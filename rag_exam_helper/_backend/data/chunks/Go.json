[
  {
    "page_content": "ptg16105617\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 0,
      "page_label": "Cover"
    }
  },
  {
    "page_content": "ptg16105617\nThe Go \nProgramming \nLanguage\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 1,
      "page_label": "i"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 2,
      "page_label": "ii"
    }
  },
  {
    "page_content": "ptg16105617\nThe Go \nProgramming \nLanguage\nAlan A. A. Donovan\nGoogle Inc.\nBrian W. Kernighan\nPrinceton University\nNew Y ork • Boston • Indianapolis • San Francisco\nToronto • Montreal • London • Munich • Paris • Madrid\nCapetown • Sydney • Tokyo • Singapore • Mexico City\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 3,
      "page_label": "iii"
    }
  },
  {
    "page_content": "ptg16105617\nMany of the designations used by manufacturers and sellers to distinguish their products are claimed \nas trademarks. Where those designations appear in this book, and the publisher was aware of a trade-\nmark claim, the designations have been printed with initial capital letters or in all capitals.\nTh e  a u t h o r s  a n d  p u b l i s h e r  h a v e  t a k e n  c a r e  i n  t h e  p r e p a r a t i o n  o f  t h i s  b o o k ,  b u t  m a k e  n o  e x p r e s s e d  \nor implied warranty of any kind and assume no responsibility for errors or omissions. No liability is \nassumed for incidental or consequential damages in conn ection with or arising out of the use of the \ninformation or programs contained herein.\nFor information about buying this title in bulk quantities, or for special sales opportunities (which \nmay include electronic versions; custom cover designs; and content particular to your business, train-\ning goals, marketing focus, or branding interests), please contact our corporate sales department at \ncorpsales@pearsoned.com or (800) 382-3419.\nFor government sales inquiries, please contact governmentsales@pearsoned.com. \nFor questions about sales outside the United States, please contact international@pearsoned.com. \nVisit us on the Web: informit.com/aw\nLibrary of Congress Control Number: 2015950709\nCopyright © 2016 Alan A. A. Donovan & Brian W . Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 4,
      "page_label": "iv"
    }
  },
  {
    "page_content": "Visit us on the Web: informit.com/aw\nLibrary of Congress Control Number: 2015950709\nCopyright © 2016 Alan A. A. Donovan & Brian W . Kernighan\nAll rights reserved. Printed in the United States of America. Th i s  p u b l i c a t i o n  i s  p r o t e c t e d  b y  c o p y r i g h t ,  \nand permission must be obtained from the publisher prior to any prohibited reproduction, storage in a \nretrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, \nrecording, or likewise. To obtain permission to use material from this work, please submit a written \nrequest to Pearson Education, Inc., Permissions Department, 200 Old Tappan Road, Old Tappan, New \nJersey 07675, or you may fax your request to (201) 236-3290.\nFront cover: Millau Viaduct, Tarn valley, southern France. A paragon of simplicity in modern engi-\nneering design, the viaduct replaced a convoluted path from capital to coast with a direct route over \nthe clouds. © Jean-Pierre Lescourret/Corbis.\nBack cover: the original Go gopher. © 2009 Renée French. Used under Creative Commons Attribu-\ntions 3.0 license.\nTypeset by the authors in Minion Pro, Lato, and Consolas, using Go, groff , ghostscript, and a host of \nother open-source Unix tools. Figures were created in Google Drawings.\nISBN-13: 978-0-13-419044-0\nISBN-10: 0-13-419044-0 \nText printed in the United States on recycled paper at RR Donnelley in Crawfordsville, Indiana.\nFirst printing, October 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 4,
      "page_label": "iv"
    }
  },
  {
    "page_content": "ptg16105617\nFo rLeil aan dMe g\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 5,
      "page_label": "v"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 6,
      "page_label": "vi"
    }
  },
  {
    "page_content": "ptg16105617\nCont ents\nPr eface xi\nTheO rigins ofG ox ii\nTheG oP ro jec t xiii\nOrganizat iono ft he Bookx v\nWh ere toF indM oreI nfor mat ionx vi\nAc knowledgments xvii\n1. T utorial1\n1.1. H el lo, Wor ld1\n1.2. C ommand-L ineA rguments 4\n1.3. Findin gD up lic ateL ines 8\n1.4. Animat ed GIFs 13\n1.5. Fet chingaU RL 15\n1.6. Fet chingU RLs Con cur rently1 7\n1.7. A We bServer 19\n1.8. L oose End s 23\n2. P ro gramS tr ucture2 7\n2.1. Names 27\n2.2. D eclarat ions 28\n2.3. Var iables 30\n2.4. A ssig nments 36\n2.5. Typ e Decl arat ions 39\n2.6. Packages an dF iles 41\n2.7. Sco pe 45\nvii\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 7,
      "page_label": "vii"
    }
  },
  {
    "page_content": "ptg16105617\nviii CONTENTS\n3. Bas ic Data Typ es5 1\n3.1. I nt egers 51\n3.2. Float ing-Point Numbers 56\n3.3. C omplex Numbers 61\n3.4. B oole ans6 3\n3.5. S tr ings6 4\n3.6. C on stants7 5\n4. C om positeT yp es8 1\n4.1. A rrays 81\n4.2. Slices 84\n4.3. Maps 93\n4.4. S tr ucts9 9\n4.5. JSO N1 07\n4.6. Text an dH TMLT empl ates1 13\n5. Func tions 119\n5.1. Fun ctionD eclarat ions 119\n5.2. R ec ursion1 21\n5.3. M ultipleR etur nValues 124\n5.4. Er ro rs1 27\n5.5. Fun ctionV alues 132\n5.6. A nony mou sFunc tions 135\n5.7. Var iadic Functions 142\n5.8. Defer red FunctionC al ls1 43\n5.9. Panic 148\n5.10. R ecov er1 51\n6. M etho ds 155\n6.1. Met hod Declarat ions 155\n6.2. Met hodsw it haP oint erR eceiver1 58\n6.3. C omposingT yp esby Str uct Emb edding1 61\n6.4. Met hod Values andE xpressions 164\n6.5. Exam ple: Bit Vec tor Typ e 165\n6.6. En capsulat ion1 68\n7. I nterfaces1 71\n7.1. I nt erfaces as Contrac ts 171\n7.2. I nt erface Typ es 174\n7.3. I nt erface Satisfac tion1 75\n7.4. Parsin gF lags wit hflag.Value 179\n7.5. I nt erface Values 181\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 8,
      "page_label": "viii"
    }
  },
  {
    "page_content": "ptg16105617\nCONTENTSi x\n7.6. S or tingw it hsort.Interface 186\n7.7. The http.Handler Interface 191\n7.8. The errorInterface 196\n7.9. Exam ple: ExpressionE valuator1 97\n7.10. Typ e As ser tions 205\n7.11. Di scriminat ingE rror swith Typ eAs ser tions 206\n7.12. Quer yingB eh avior swith Int erface Typ eAs ser tions 208\n7.13. Typ e Sw itch es2 10\n7.14. Exam ple: Token-B ased XML Decoding2 13\n7.15. A Fe wWo rds ofA dv ice 216\n8. G or o utines and Channels 217\n8.1. G oroutines2 17\n8.2. Exam ple: Con cur rentC lo ckS er ver 219\n8.3. Exam ple: Con cur rentE ch oServer 222\n8.4. C hannel s 225\n8.5. L ooping inP aral lel2 34\n8.6. Exam ple: Con cur rentW eb Craw ler 239\n8.7. M ultiplexingw it hselect 244\n8.8. Exam ple: Con cur rentD irec tor yTraversal2 47\n8.9. Cance llat ion2 51\n8.10. Exam ple: ChatS er ver 253\n9. C oncurrency withS hared Vari ables2 57\n9.1. Race C on dit ion s 257\n9.2. M ut ual Exc lusion: sync.Mutex 262\n9.3. R ead/Write Mut exes: sync.RWMutex 266\n9.4. Mem or ySy nchro nizat ion2 67\n9.5. Lazy Ini tializat ion:sync.Once 268\n9.6. Th eR ace Detec tor 271\n9.7. Exam ple: Con cur rentN on-Blo cking Cache 272\n9.8. G oroutinesa nd Threads 280\n10. Pack ages and the GoT ool2 83\n10.1. I nt roduc tion2 83\n10.2. I mp ort Pat hs2 84\n10.3. Th eP ackageD eclarat ion2 85\n10.4. I mp ort Declarat ions 285\n10.5. B lank Imp orts2 86\n10.6. Packages an dN aming2 89\n10.7. Th eG oT ool2 90\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 9,
      "page_label": "ix"
    }
  },
  {
    "page_content": "10.6. Packages an dN aming2 89\n10.7. Th eG oT ool2 90\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 9,
      "page_label": "ix"
    }
  },
  {
    "page_content": "ptg16105617\nxC ONTENTS\n11. Tes ting 301\n11.1. The go testTo ol3 02\n11.2. TestFunc tions 302\n11.3. C ov erage3 18\n11.4. BenchmarkFunc tions 321\n11.5. P roﬁling3 23\n11.6. ExampleFunc tions 326\n12. Reﬂec ti on3 29\n12.1. W hy Reﬂec tion?3 29\n12.2. reflect.Type and reflect.Value 330\n12.3. Display,aR ec ursiveV alue Print er3 33\n12.4. Exam ple: Enco dingS -E xpressions 338\n12.5. Set ting Var iables wit hreflect.Value 341\n12.6. Exam ple: DecodingS -E xpressions 344\n12.7. Accessin gS tr uct Field Tags 348\n12.8. Di splaying the Met hodso faT yp e 351\n12.9. A Wo rdo fC aution 352\n13. L ow-L evel Pro gramming3 53\n13.1. unsafe.Sizeof, Alignof,a nd Offsetof 354\n13.2. unsafe.Pointer 356\n13.3. Exam ple: DeepE quivalence 358\n13.4. Cal lingCC odew it hcgo 361\n13.5. A nother Wordo fC aution 366\nIndex3 67\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 10,
      "page_label": "x"
    }
  },
  {
    "page_content": "ptg16105617\nPref ace\n‘‘Go is ano pens ourc eprog rammi n glang uaget hatm ak esi te asyt ob ui lds impl e,r el iab le,\nan defﬁcients of tware.’’(Fro mtheG ow eb sit eat golang.org)\nGo was conceive din Septemb er2 007 byR ob ert Gries emer,R ob Pike, and Ken Thomps on, all\nat Google, and was announced inN ov emb er2 009. Th eg oals oft he langu agea nd its accom-\npany ing tools weret ob ee xpressive, efﬁcient in bot hcomp ilation and exe cut ion,and effec tive\nin writing reliablea nd robustp rograms.\nGo bears a sur face simi lar ity toC a nd,l ikeC ,i sat oolf or prof essionalp rogrammers, achie v-\ningm aximum effe ctw it hminimum means.B ut it ism uchm oret hana nu pdated versiono f\nC. I tb or rowsa nd adaptsg ood ide asfrom manyo ther langu ages, whi le avoidingf eaturest hat\nhave led toc omplexity and unreliablec ode. I ts facilities for con cur rency are new and efﬁcient,\nandi ts approach to dat a abstrac tiona nd obj e ct-oriente dprog rammingi su nu sually ﬂexible. I t\nhasa ut omat ic memory managemento r garb age col lec tion.\nGo ise sp eci ally wel lsuit edf or bui ldingi nf rastr ucturel iken et wor ked ser vers, andt ools and\nsystems for prog rammers, but it ist ruly a general-pur pos elanguage and ﬁnd sus ein domains\nas divers eas graphics, mobilea pp lic ations,a nd machinel earning. I th as becom epopu lar as a\nrepl acementf or u nt ypeds cr ipt ing l angu ages because i tb al ances expressivenessw it h safety :",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 11,
      "page_label": "xi"
    }
  },
  {
    "page_content": "repl acementf or u nt ypeds cr ipt ing l angu ages because i tb al ances expressivenessw it h safety :\nGo programst ypic al ly run fastert hanp rogramsw ritt eni nd ynamic langu ages ands uf fer far\nfe wer crashesd ue tou nexp ected typ e er ror s.\nGo isa no pen-s ource pro jec t,s os ourcec odef or itsc ompi ler,l ibrar ies, andt ools is fre ely avai l-\nable toa ny one.C ontr ibution sto the pro jec tcome fro man active worldw ide community.G o\nruns o nU nix-li kes ystems—Li nux, F re eBSD, O penBSD, M ac OS X—an do nP lan9a nd\nMicros oft Windows. P rogramsw ritt eni no ne oft hese env iro nmentsg eneral lyw or kwithout\nmo diﬁcation on the others.\nxi\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 11,
      "page_label": "xi"
    }
  },
  {
    "page_content": "ptg16105617\nxii PREFACE\nThisb ooki sm eant toh elpy ou start usingG oe ffec tive lyr ig hta way andt ou se itw el l,t ak ing\nfull a dvantage ofG o’sl angu agef eaturesa nd stand ard librar ies to write clear, idiomatic, and\nefﬁcientp rograms.\nTheO rigins ofG o\nLike biolog ical species, successf ull angu ages beget offspring thati ncor poratet he advantageso f\ntheir ancestors;i nt erbre e dings om etimesl eads tos ur prisings trengt hs; and, ver yoccasionally,\nar adic alne wfe ature arisesw it houtp re cedent. W ec an lear nal ot about why a langu agei st he\nway iti sa nd whate nv iro nment ith as beena dapt edf or byl ooking att hese inﬂuences.\nThe ﬁgureb elow shows the most imp ortanti nﬂuences ofe arlier programmingl angu ages on\nthed esig nof Go.\nGo iss om etimesd es crib eda sa‘‘C-li kel angu age,’’or as ‘‘Cf or the 21stc entury.’’Fr omC ,G o\nin her ite ditse xpressions yntax, cont rol-ﬂow statements, basic dat atypes, cal l-by-value param-\neter passin g, p oint ers,a nd a bove a ll,C ’se mp hasiso np rogramst hatc ompi let oe fﬁcient\nmachinec odea nd cooperaten atural lyw it hthea bstrac tions ofc ur rento perat ings ystems.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 12,
      "page_label": "xii"
    }
  },
  {
    "page_content": "ptg16105617\nT\nHE ORIGINS OF GO xiii\nB\nut t\nhere  a\nre  o\nther ancestors in G\no’s f\nami ly t\nre e. O\nne maj or s\ntream o\nf i\nnﬂuence comes f\nro m \nl\nanguages b\ny N\nik laus W\nir th, beg inning w\nit h P\nascal. M\nodula-2 inspired the package c\non cept. \nO\nb ero n e\nliminated the distinc tion b\net ween m\nodule i\nnt erface ﬁ\nles and m\nodule i\nmp lementation \nﬁ\nles. O\nbero n-2  inﬂuence d t\nhe syntax  for packages,  im\nports,  a\nnd declarat ions, a\nnd provided \nt\nhe sy\nntax f\nor met hod declarat ions.\nAnot her  l\nineage  am\nong  G\no’s a\nncestors, a\nnd  o\nne  t\nhat m\nakes  G\no d\nistinc tive a\nmong  r\necent \np\nrog ramming l\nangu ages,  i\ns a\n sequence  o\nf l\nit tle-k now n r\nesearch  l\nangu ages  de\nve lop ed a\nt B\nel l \nL\nabs,  al\nl i\nns pired  b\ny t\nhe  c\non cept o\nf c\nommu nicating  s\nequent ial  p\nro cesses (CS\nP)  f\nro m T\no ny\nHo are’s s\neminal 1978 pap er o\nn the found ation s o\nf con cur rency. I\nn C\nSP , a p\nrogram is a p\naral lel \nco\nmp osition of processes t\nhat h\nave n\no s\nhare d s\nt ate; t\nhe pro cesses c\nommunic ate a\nnd synchro- \nnize  u\nsing c\nhannel s. B\nut  H\noare’s CS\nP  was\n  a  f\nor mal  l\nangu age f\nor  des\n cribing t\nhe  f\nundament al \nco\nncepts of c\non cur rency, n\not a programming l\nangu age f\nor writing exe cut able p\nrograms.\nRob P\nike a\nnd others b\negan to e\nxp eriment w\nit h CS\nP i\nmp lementation s as\n actu al l\nangu ages.  T\nhe \nﬁr\ns t w\nas  c\nal le d S\nque ak (\n‘‘ A l\nangu age f\nor  c\nommunic ating w\nit h mice’\n’),  w\nhich p\nrovide d a l\nan- \ng\nu age f",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 13,
      "page_label": "xiii"
    }
  },
  {
    "page_content": "angu ages.  T\nhe \nﬁr\ns t w\nas  c\nal le d S\nque ak (\n‘‘ A l\nangu age f\nor  c\nommunic ating w\nit h mice’\n’),  w\nhich p\nrovide d a l\nan- \ng\nu age f\nor  h\nandling m\nou se an\nd  k\ney board  e\nvents,  w\nit h s\nt atically cr\ne ate d c\nh annel s. Thi\ns was \nf\no llowe d b\ny Newsque ak, w\nhich o\nffered C-li ke s\ntatement and expression s\nyntax a\nnd Pas cal-li ke \nt\nype  n\not ation. I\nt was  a\n  p\nurely f\nunctional l\nangu age w\nit h garb \nage c\nol lec tion, again\n  aim\ned  at \nm\nanaging key board , m\nous e, a\nnd window e\nvents.  C\nhannel s b\necame ﬁr\ns t-class values, dynami- \nc\nally c\nre ate d an\nd s\ntorable in variables.\nThe P\nlan 9 o\nperat ing s\nystem c\nar r ied t\nhese ide as f\norward i\nn a l\nangu age c\nal le d A\nlef. A\nlef tried \nt\no  m\nake N\newsque ak a v\niable s\nystem p\nrogramming l\nangu age,  b\nut  i\nts o\nmission o\nf g\narb age c\nol- \nle \nction made conc urrency too painf ul.\nOt her  c\nons tructions  in G\no s\nhow t\nhe  i\nnﬂuence  o\nf n\non-ancestral  g\nenes  h\nere a\nnd  t\nhere; f\nor \nex\nample i\nota i\ns  lo\nosely  f\nro m AP\nL,  an\nd l\nexic al s\ncop e w\nith  n\neste d f\nunc tions  i\ns f\nro m S\ncheme\n(and m\nost l\nangu ages since).  H\nere t\noo we ﬁn\nd nove l m\nu tat ions. G\no’s inn\novat ive slices provide \nd\ny namic  ar\nrays  w\nit h ef\nﬁcient r\nandom a\nccess b\nut  al\ns o p\nermit  s\nop histicate d s\nh aring\nar \nrangementsr eminiscento fl in ked lists. A nd the deferst \natement isn ew wit hGo.\nTheG\noP roject\nAl",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 13,
      "page_label": "xiii"
    }
  },
  {
    "page_content": "s o p\nermit  s\nop histicate d s\nh aring\nar \nrangementsr eminiscento fl in ked lists. A nd the deferst \natement isn ew wit hGo.\nTheG\noP roject\nAl \nl prog rammingl angu ages reﬂec tthep rogrammingp hi losop hyo ft heir creators,w hicho ften\nincludes a signiﬁca nt c omponent o fr eactiont ot he p erceive d shortcomings o fe arlier lan-\ngu ages. TheG op ro jec twas bor neo ff rust rat ionw it hseveral sof twares ystems atG ooglet hat\nwere s uf fer ingf ro m an explosio no fc omplexity.( Thisp ro blem i sb yn om eans u nique to\nGo ogle.)\nAs Rob Pikep ut it, ‘‘comp lexity ism ultiplic ative’’: ﬁxingap ro blem bym ak ingo ne par tof the\nsystemm orec omplex slowlyb ut surelya ddsc omplexity too ther par ts. Wi thc on stant pres-\nsure t oa dd f eaturesa nd o pt ion s andc onﬁgurat ions,a nd t os hipc odeq uickly, it’se asy to\nneglec tsimplicity,e vent houg h in the lon gruns implicity ist he key tog ood sof tware.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 13,
      "page_label": "xiii"
    }
  },
  {
    "page_content": "ptg16105617\nxiv PREFACE\nSimp licity requires morew or kat the beg inningo fap ro jec tto reduce an ideat oi ts essencea nd\nmore dis cip lineo vert he lifet imeo fap ro jec tto distinguish good changesf ro mbado rp er ni-\ncious ones. W it hsufﬁciente ffor t,ag ood change can bea ccommodated wit houtc ompromis-\ningw hatF re dBrooks cal le dthe ‘‘conceptu ali nt egr ity’’of the desig nbutab ad change cannot,\nandap er nicious change trades simplicity for itss hallow cou sin, conv enience.O nlyt hrough\nsimplicity ofd esig ncanas ystemr emain stable, sec ure ,andc oh erent asi tg rows.\nTheG op ro jec t includes the langu agei ts elf,i ts tools and stand ard librar ies, andl astb ut not\nle ast, a cultural agenda ofr adic al simplicity.A sar ecenth ig h-leve llanguage ,Go has the bene-\nﬁto fh indsig ht, andt he basics ared on ewe ll: ith as garbagec ol lec tion,ap ackages ystem, ﬁrs t-\ncl ass functions,l exic alscop e,as ystemc al l interface,a nd immut ables tr ingsi nw hicht ext is\ngeneral lye ncoded i nU TF-8. B ut it h as co mp arat ive lyf ew f eaturesa nd i su nlikelyt oa dd\nmore . Fo rinst ance, ith as noi mp licitn umer ic conv ersions,n oc on str uctor s or destr uctor s,n o\nop erator overloading, nod efau ltp arameter values, noi nher itance, nog ener ics,no exception s,\nno macros, nof unctiona nnot ation s,a nd no thread-lo cal storage. T he langu agei sm aturea nd\nst able, and guarante esb ackwards comp ati bi lit y:o lder Gop rogramsc an bec ompi led and run",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 14,
      "page_label": "xiv"
    }
  },
  {
    "page_content": "st able, and guarante esb ackwards comp ati bi lit y:o lder Gop rogramsc an bec ompi led and run\nwith newer versions ofc ompi lersa nd stand ard librar ies.\nGo has enough ofat yp e systemt oa void mosto ft he carelessm istakest hatp lague program-\nmers ind ynamic langu ages, but it has a simpler typ e systemt hanc omparable typ edl angu ages.\nThisa ppro ach c an s om etimesl eadt oi solate d pockets of ‘‘untyped’’prog rammingw it hin a\nbroader fram ewor k of t yp es, andG op rogrammersd on ot g ot ot he l engt hst hatC ++ or\nHaskel lprog rammersd ot oe xpress safet yprop erties as typ e-bas edp ro ofs. B ut inp rac tice Go\ngivesp rogrammersm ucho ft he s afet y andr un-t imep er for mance beneﬁts o far el ative ly\nst ron gtype systemw it houtt he burden ofac omplex one.\nGo e ncourages an awarenes so fc ontemp orar y comp uters ystemd esig n, partic ularlyt he\nimportance ofl ocality.I ts bui lt-in dat atypesa nd most librar y data str uctures arec raf ted to\nwork natural lyw it houte xpliciti nitializat iono ri mp licitc on str uctor s,s or el ative lyf ew mem-\nor yal location sandm emor ywr itesa re hidden in t he code. G o’sa ggregatet yp es (str uctsa nd\nar rays) hold t heir elements dir ec tly,r equir ingl esss toragea nd fewer allo cat ions and p oint er\nindirec tion sthan langu ages thatu se indirec tﬁelds.A nd since the moder n comp uteri sap ar-\nal lelm achine, Goh as conc urrency featuresb as edo nC SP,a sm ention ede arlier.T he var iable-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 14,
      "page_label": "xiv"
    }
  },
  {
    "page_content": "al lelm achine, Goh as conc urrency featuresb as edo nC SP,a sm ention ede arlier.T he var iable-\nsize stackso fG o’sl ig h tweig htt hreads or goro utines arei nitial lys mall enoug hthat creating one\ngoro utine isc he apa nd cre ating a millioni sp rac tic al.\nGo’ss tand ard l ibrar y,o ften descr ibeda sc omingw it h ‘‘batt eries in clude d,’’prov ides cle an\nbuildingb lo cks andA PIsf or I /O,t ext p ro cessing, g raphics, cryp tography,n et wor king, a nd\ndist ribut eda pp lic ations,w it h supp ort f or m anys tand ard ﬁle f or mats an dp ro tocol s.T he\nlibrar ies andt ools make extensive use ofc onvent ion tor educe the need for conﬁgurat iona nd\nexplanation,t hu ssimplif yingp rogram logic andm ak ingd iverse Go programsm ores imi lar to\neach other andt hu seasier tol earn.P ro jec tsb ui ltu singt he go to olu se onlyﬁ le andi dentiﬁer\nnamesa nd a no cc asionals peci al commentt od eter minea ll the librar ies, ex ec utables, tests,\nbenchmarks, examples, p latfor m-speciﬁcv ar iants, andd ocumentation for a pr oj e ct; t he G o\nsource its elf cont ainst he bui ldsp eciﬁcation.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 14,
      "page_label": "xiv"
    }
  },
  {
    "page_content": "ptg16105617\nTHE GO PROJECTx v\nOr ganization oft he Book\nWe assume thaty ou havep rogrammed ino ne orm oreo ther langu ages, whether comp ile d li ke\nC, C++, andJ ava, ori nt erprete dli keP yt hon,R uby, and JavaS crip t,s ow ew on’ts pell out every-\nthing as if for a tot alb eg inner.S ur face sy ntaxw ill bef ami liar, as will var iables andc on stants,\nexpressions,c ontrol ﬂow,a nd functions.\nChapter1 i sat ut orialo nt he basic cons tructso fG o, int roduce dthro ugh a dozen programsf or\never ydayt asks like readinga nd writing ﬁles, for matting text, creating images, andc ommuni-\ncating wit hInternet clients ands er vers.\nChapter2 d es crib est he s tr uctural elements o faG op rogram—de c larat ions,v ar iables, new\ntypes, packages and ﬁles, ands cope.C hapt er3 d is cussesn umbers,b oole ans, str ings, andc on-\nst ants, an de xplainsh ow t op ro cessU nico de.C hapt er4 d es crib esc omposite t yp es, that is,\ntypesb ui ltu pf ro m simpler o nesu singa rrays, maps, s tr ucts, and sli ces,G o’sa ppro ach to\ndy namic lists. C hapt er5 c ov ers functions and dis cussese rror handling, panic and recover,\nandt he deferst atement.\nChapters 1 t hrough 5 a re thu stheb asics, things t hata re par tof any mainst reami mp erat ive\nlanguage . Go’ss yntaxa nd s ty les om etimesd if fer fro mot her langu ages, but mostp rogram-\nmers will pickt hemu pq uickly. T he remainingc hapt ers focus ont opics where Go’sa ppro ach\nis",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 15,
      "page_label": "xv"
    }
  },
  {
    "page_content": "mers will pickt hemu pq uickly. T he remainingc hapt ers focus ont opics where Go’sa ppro ach\nis \nlessc onvent ion al: met hods, interfaces, conc urrency,p ackages, testing ,andr eﬂec tion.\nGo has an unusuala ppro ach to obj e ct-oriente dprog ramming. T here are noc lass hierarchies,\nor indeed any class es; comp lex obj e ctb eh avior sarec re ate dfrom simpler onesb yc omposition,\nnoti nher itance. M et hodsm ay bea ss oci ated wit hanyu ser-deﬁne d type,n ot justs tr uctures,\nandt he rel ation shipb et weenc on crete t yp es anda bstrac t types( interfaces)i si mp licit, s oa\nconcrete typ emays at isf y an interface thatt he typ e’sd esig ner was unawareo f. M et hodsa re\ncovere din Chapt er6a nd int erfaces in Chapt er7 .\nChapter8 p resentsG o’sa ppro ach to con cur rency,w hichi sb as edo nt he ide a of communic at-\nings equential pro cesses( CSP), embodie dby goroutinesa nd channel s.C hapt er9 e xplainst he\nmore tradition ala sp ectso fc on cur rency bas edo ns hare dvar iables.\nChapter1 0d es crib esp ackages, t he me ch anism f or or ganizingl ibrar ies. Thi sc hapt era ls o\nshows h ow t om akee ffec tive u se o ft he go to ol, whichp rovides for com pi lat ion, testing ,\nbenchmarking ,prog ramformatting ,do cumentation,a nd manyo ther tasks, allw it hin a single\ncommand.\nChapter1 1d eals w it h test ing , whereG ot akes a n ot ably l ig htweig hta ppro ach,a voiding\nabstrac tion-l adenframewor ksi nf avor of s implel ibrar ies andt ools.T he t esting l ibrar ies",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 15,
      "page_label": "xv"
    }
  },
  {
    "page_content": "abstrac tion-l adenframewor ksi nf avor of s implel ibrar ies andt ools.T he t esting l ibrar ies\nprov i de a found ation atopw hichm orec omplex abstrac tions can beb ui lt if necessary.\nChapter1 2d is cussesr eﬂec tion,t he a bi lit y of a prog ram to e xaminei ts o wn r epresent ation\nduring exe cut ion.R eﬂec tion isap ow erfult ool, thoug hon eto beu sedc aref ully; thisc hapt er\nexplains ﬁndingt he rig htb al ance bys howing how iti su sedt oi mp lements om eimportantG o\nlibrar ies. Chapter1 3e xplainst he gor ydet ails ofl ow-le vel programmingt hatu sest he unsafe\npackaget os tepa ro und Go’st yp e system, andw hent hati sa ppro priate.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 15,
      "page_label": "xv"
    }
  },
  {
    "page_content": "ptg16105617\nxvi PREFACE\nEach chapterh as a numbero fe xercis est haty ou can use tot esty ouru nderst andingo fG o, and\nto explore extensions and alt ernat ivest ot he examples fro mtheb ook.\nAl lbutt he most trivialc odee xamples in the booka re avai lable for dow nlo adfrom the public\nGitr ep ository at gopl.io.E ache xamplei si dentiﬁed byi ts packagei mp ort pat h andm ay be\nconv enientlyf etch ed, bui lt, andi ns tal le dusingt he go getcommand. Y ou’ll need toc ho ose a\ndirec tor y to b ey ourG ow or ksp ace an ds et t he GOPATH enviro nment var iable top oint toi t.\nThe goto olw ill cre ate the direc tor yif necessary.F or example:\n$e xport GOPATH=$HOME/gobook #c hoose workspace directory\n$g og et gopl.io/ch1/helloworld #f etch, build, install\n$$ GOPATH/bin/helloworld #r u n\nHello, BF\nTo run the examples, you will need atl east version1 .5 ofG o.\n$g ov ersion\ngo version go1.5 linux/amd64\nFo llowt he i ns tructions a t https://golang.org/doc/install if t he go to olo ny ourc om-\nputeri so lder orm issing.\nWheret oF ind MoreI nformation\nTheb ests ourcef or morei nfor mat iona bout Goi st he ofﬁci alwe bsite, https://golang.org,\nwhichp rovides accesst ot he documentation,i ncludingt he Go Programmi n gLang uageS peciﬁ-\ncati on,s tand ard packages, andt he like. T here are als o tutorialso nh ow tow rite Goa nd how\nto write itw el l,a nd a wide variet yof onlinet ext andv ide oresources thatw ill bev aluablec om-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 16,
      "page_label": "xvi"
    }
  },
  {
    "page_content": "to write itw el l,a nd a wide variet yof onlinet ext andv ide oresources thatw ill bev aluablec om-\nplements tot hisb ook. Th eG oB log at blog.golang.org pu blishess om e of the bestw riting\non Go, wit har ticles ont he state oft he langu age, plans for the fut ure , reportso nc onferences,\nandi n-depth explanation s of a wide variet yof Go-rel ate d topics.\nOneo ft he most usefula sp ectso fo nlinea ccesst oG o( andar eg rettablel imitation of a p ap er\nbook) ist he abi lit yto run Gop rogramsf ro mthew eb pages thatd es crib ethem. Thi sf unc-\ntion ality i sp rovide d by t he G oP layg round a t play.golang.org,a nd m ay b ee mb edde d\nwithin other pages, sucha st he home pagea t golang.org or the documentation pages ser ved\nby the godocto ol.\nTheP layg round m akes i tc onvenientt op er for m simplee xp eriments toc he cko ne’su nder-\nst andingo fs yntax, seman tics, o rl ibrar y packages w it h short p rograms, an di nm anyw ays\ntakest he p lace ofare a d-e val-print loop (REPL) in o ther langu ages. Its persi stentU RLs are\ngreatf or sharing snipp ets ofG oc odew it hot hers, for rep ortingb ugs orm ak ings ug gestion s.\nBuilta topt he Playg round,t he GoT oura t tour.golang.org is a sequence ofs hort int erac tive\nlessons ont he basic ideas andc on str uctions ofG o, ano rderly wal kthro ugh the langu age.\nThep rimary s hortcomingo ft he P layg round and the T ouri st hatt he y al lowo nlys tand ard",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 16,
      "page_label": "xvi"
    }
  },
  {
    "page_content": "Thep rimary s hortcomingo ft he P layg round and the T ouri st hatt he y al lowo nlys tand ard\nlibrar iesto bei mp orted,a nd manyl ibrar yfe atures—ne twor king, for example—ar er estr icted\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 16,
      "page_label": "xvi"
    }
  },
  {
    "page_content": "ptg16105617\nWHERE TOF IND MORE INFORMATION xvii\nforp rac tic alor sec urity reasons.T he yalso requirea ccesst ot he Int ernet toc ompi lea nd run\neach program. S of or moree laboratee xp eriments, you will havet or un Gop rogramso ny our\now n comp uter. F or tunatelyt he d ow nlo ad processi ss traig htfor ward, s oi ts houldn ot t ake\nmore thanaf ew minut est of etch the God istr ibution fro mgolang.org ands tart writing and\nrunningG op rogramso fy ouro wn.\nSinceG oi sa no pen-s ource pro jec t,y ou can readt he codef or any typ eor function in the stan-\ndard l ibrar y on linea t https://golang.org/pkg;t he s amec odei sp ar t of t he d ow nlo ade d\ndist ribut ion.U se t hist o ﬁgur eo ut h ow s om ethingw or ks, o rt oa nswerq uestion s ab out\ndet ails,o rm erelyt os ee how exp erts write reallyg ood Go.\nAcknowledgments\nRobP ikea nd RussC ox,c orem embers oft he Got eam, readt he manus cript several times wit h\ngreatc are; their comments one verythingf ro mword choice too veral lst ruc turea nd organiza-\ntion haveb eeni nvaluable. W hi leprep aringt he Jap anes etransl ation,Y oshi kiS hibata wentf ar\nbeyond the c al lof duty; h is met iculou seyes pott edn umerou sinconsistencies in t he Eng lish\ntext ande rror sin the code. W eg re atlya ppre ciate thoro ugh revie ws andc riticalc ommentso n\nthee nt ire manus cript fro mBr ian Goetz, Corey Kos ak,Ar noldR obbins, JoshB le e cherS ny der,\nandP eter Weinberger.\nWe",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 17,
      "page_label": "xvii"
    }
  },
  {
    "page_content": "thee nt ire manus cript fro mBr ian Goetz, Corey Kos ak,Ar noldR obbins, JoshB le e cherS ny der,\nandP eter Weinberger.\nWe \nare indebte d to SameerA jmani,I tt aiB al aban, Dav id Crawshaw, BillyD on ohue, Jon athan\nFeinberg ,Andrew Gerrand, Rob ert Gries emer,J ohnL inder man, Minux Ma, Bryan Mills, Bal a\nNataraj an, Cosmos Nico laou , Paul S tanifor th, Nig el T ao,a nd H owardT rickey f or m any\nhelpf uls ug gestion s.W ea ls othan kDavidB rai lsforda nd RaphL evien for typ esetting adv ice.\nOure ditorG regD oencha tA ddison-Wesle ygott he bal lro llingo riginallya nd has beenc on-\ntinuou sly helpf ule vers ince.T he AWp ro duc tiont eam—Jo h nF uller,D ay naI sley,J ulie Nahi l,\nChut iPras ertsith,a nd Barb araWo o d—ha sb eeno utst anding; author scouldn ot hop eforb et-\nters up por t.\nAlanD on ovan wishest ot hank:S ameerA jmani,C hr isD emet riou, WaltD rummon d,a nd Reid\nTatgea tG ooglef or allow ing him timet ow rite;S teph enD on ovan, for his adv ice andt imely\nencouragement; an da bove a ll,h is w ifeL ei laK azemi,f or h er un hesitating e nt husi asm and\nunwaver ings up por tfort hisp ro jec t,d espit e thel on g hourso fd istrac tiona nd a bs ente eism\nfrom fami lyl ifet hati te nt ailed.\nBr ian Ker nighani sd eeply gratef ult of riends and col leagues for their pat ience andf orbearance\nas hem ov eds lowlya long the pat hto underst anding, and esp eci ally toh is wifeM eg ,whoh as\nbeen unfailinglys up por tiveo fb ook-w rit ing and som uche ls e.\nNe wYo rk",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 17,
      "page_label": "xvii"
    }
  },
  {
    "page_content": "been unfailinglys up por tiveo fb ook-w rit ing and som uche ls e.\nNe wYo rk\nOc \ntob er2 015\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 17,
      "page_label": "xvii"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 18,
      "page_label": "xviii"
    }
  },
  {
    "page_content": "ptg16105617\n1\nTutorial\nThisc hapt eri sat ouro ft he basic comp onentso fG o. Weh op eto provide enough infor mat ion\nande xamples tog et you off t he gro und and doi ng usefult hings as quic klya sp ossible. T he\nexamples here, and indeed int he whole book, area imed att asks thaty ou mig hth avet od oi n\nther ealw or ld. I nt hisc hapt erw e’ll tryt og ivey ou a taste oft he diversity ofp rogramst hato ne\nmig htw rite i nG o, ranging f ro msimpleﬁ le p ro cessinga nd a b it of g raphics t oc on cur rent\nInternet clients an ds er vers. Wec er tain lyw on’te xplain e verythingi nt he ﬁrs t ch apt er, but\nstudying suchp rograms in a new langu agec an be an effec tive way tog et started.\nWh eny ou’re learningan ew langu age, there’san atural tendency tow rite codea sy ou wou ld\nhave writt eni ti nal angu agey ou already know. B ea wareo ft hisb iasa sy ou learn Goa nd try\nto avoid it. We’ve tried toi llustratea nd explain how tow rite good Go, sou se the codeh erea s\nag uide wheny ou’re writing your own.\n1.1. Hello, World\nWe’ll start wit hthen ow-t radition al ‘‘hel lo, wor ld’’example, whicha pp earsa tt he beg inningo f\nTheCP rogrammi n gLang uage,p ublishe din 1978. Ci so ne oft he most direc tinﬂuences on\nGo,a nd ‘‘hel lo, wor ld’’illustrates a numbero fc entral ideas.\ngopl.io/ch1/helloworld\npackage main\nimport \"fmt\"\nfunc main() {\nfmt.Println(\"Hello, BF\")\n}\n1\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 19,
      "page_label": "1"
    }
  },
  {
    "page_content": "fmt.Println(\"Hello, BF\")\n}\n1\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 19,
      "page_label": "1"
    }
  },
  {
    "page_content": "ptg16105617\n2C HAPTER 1. TUTORIAL\nGo i sac ompi led l angu age. T he G ot oolchain co nv ertsas ourcep rogram an dt he t hings it\ndep ends oni nt oinst ruc tions int he nat ive machinel angu ageo fac omputer. T hese tools are\naccessedt hrough a singlec ommand cal le dgo that has a num bero fs ub command s.T he sim-\nplesto ft hese sub command sis run,w hichc ompi les the sourcec odef ro mon e or mores ource\nﬁles w hose n ames endi n .go,l in ks it wit h librar ies, then run st he resulting exe cut able ﬁle.\n(Wew ill use $as the command pro mpt throughoutt he book.)\n$g or un helloworld.go\nNo tsurprisingly, thisp rints\nHello, BF\nGo nat ive lyh andles Unico de,s oi tc an pro cesst ext in allt he wor ld’sl angu ages.\nIf the program ism oret hanao ne-shote xp eriment, it’sl ikelyt haty ou wou ldw antt oc ompi le\nit once ands avet he compi led resultf or later use.T hati sd on ewith go build:\n$g ob uild helloworld.go\nThisc re atesa ne xe cut ableb inar y ﬁle cal le dhelloworld that can ber un anyt imew it houtf ur-\nther pro cessing:\n$. /helloworld\nHello, BF\nWe havel ab ele deach sig niﬁcant examplea sar eminder thaty ou can obt ain the codef ro mthe\nbook’ss ourcec oder ep ository at gopl.io:\ngopl.io/ch1/helloworld\nIf you run go get gopl.io/ch1/helloworld,i tw ill fetch the sourcec odea nd place iti nt he\ncorrespondingd irec tor y.T here’sm orea bout thist opic in Sec tion 2.6 andS ec tion 10.7.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 20,
      "page_label": "2"
    }
  },
  {
    "page_content": "correspondingd irec tor y.T here’sm orea bout thist opic in Sec tion 2.6 andS ec tion 10.7.\nLet’sn ow tal k ab out the program its elf.G oc odei so rganize d into packages, whicha re simi lar\nto librar iesor modules in other langu ages. A packagec on sists ofo ne orm ore .go source ﬁles\nin a singled irec tor ythat deﬁne whatt he packaged oes. Eac hs ource ﬁle beg insw it ha package\nde clarat ion, herepackage main,t hats tatesw hichp ackaget he ﬁle belon gst o, fol low edb yal ist\nof other packages t hati ti mp orts, andt hent he declarat ions oft he program thata re store din\nthat ﬁle.\nTheG os tand ard l ibrar y haso ver1 00 packages for commo nt asks li ke i np uta nd o ut put,\nsorting, and text manipu lat ion. For ins tance,t he fmt packagec ontainsf unctions for printing\nformatte doutput and scanningi np ut. Println is one oft he basic out put functions in fmt;i t\npr intso ne orm orev alues, sep arated bys paces, wit han ewlinec harac ter at the end sot hatt he\nvalues appear as a singlel ineo fo ut put.\nPackage main is s peci al.I td eﬁnesas tand alone e xe cut ablep rogram, n ot a l ibrar y.W it hin\npackage main the func tion main is als o sp eci al—it ’sw here exe cut ion of the program beg ins.\nWh ate ver main do esis whatt he program does. Of cour se, main wi l lnormal lyc al lup onfunc-\ntion sin other packages to do mucho ft he wor k,s uch as the functio n fmt.Println.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 20,
      "page_label": "2"
    }
  },
  {
    "page_content": "The Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 20,
      "page_label": "2"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.1. HELL O, WORLD 3\nWe mustt el lthec ompi ler whatp ackages aren eeded byt hiss ourceﬁ le; that’st he roleo ft he\nimport de clarat iont hatf ol lowst he package de clarat ion. The ‘‘hel lo, wor ld’’prog ram us es\non lyo ne functionf ro mon eot her package, but mostp rogramsw ill imp ort morep ackages.\nYo umu sti mp ort e xac tly t he p ackages y ou n eed.A prog ram wi l lnotc ompi lei ft here are\nmissingi mp ortso ri ft here are unnecessary ones. Thi ss tr ict requirementp re vents references\nto unu sed packages fro macc umulat ing as programse vo l ve.\nThe import de clarat ions mustf ol low the package de clarat ion. After that, a program consists\nof the declarat ions off unctions,v ar iables, cons tants, andt yp es (introduce dby the key words\nfunc, var, const,a nd type); for the most par t,theo rder ofd eclarat ions doesn ot matter. T his\nprog ramis about ass hort asp ossibles ince itd eclareso nlyo ne function, whichi nt ur ncalls\non lyo ne other function. T os aves pace,w ew ill som etimesn ot showt he package and import\nde clarat ions whenp resent ing examples, but the y arei nt he s ourceﬁ le andm ustb et here to\ncomp ile the code.\nAf unctiond eclarat ionc on sists oft he key word func,t he nameo ft he function, a parameter\nlist (empt yfor main), a res ultl ist( also emp tyh ere), andt he bodyo ft he function—th es tate-\nmentst hatd eﬁne w hati td oes—en clos edi nb races. We ’ll t akeac los er lo o ka tf unctions in\nChapter5 .",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 21,
      "page_label": "3"
    }
  },
  {
    "page_content": "mentst hatd eﬁne w hati td oes—en clos edi nb races. We ’ll t akeac los er lo o ka tf unctions in\nChapter5 .\nGo doesn ot requires emicolons att he end sof statementso rd eclarat ions,e xceptw here two or\nmore app ear ont he samel ine. I ne ffec t,n ewlines fol low ing cer tain tokensa re converted int o\nsemicolons,s ow here newlines arep lace dmatt ers to pro per parsingo fG oc ode. F or ins tance,\ntheo peningb race { of the functionm ustb eo nt he samel inea st he end oft he func de clara-\ntion,n ot onal ineb yi ts elf,a nd int he expression x+y ,an ewlinei sp er mitt eda fter but not\nbefore the +op erator.\nGo takes a stron gst anceo nc odef or matting . The gofmt to olr ewritesc odei nt othes tand ard\nformat, andt he go to ol’s fmt su bcommanda pp lies gofmt to all the ﬁles in t he speciﬁed pack-\nage, ort he onesi nt he cur rentd irec tor yby defau lt. All Gos ourceﬁ les in the bookh aveb een\nrunt hrough gofmt,a nd you shouldg et into the habit of doing t he samef or youro wn code.\nDecl aring a stand ard for mat by ﬁat eliminates a lo to fp oint lessd eb ate about trivia and,m ore\nimportantly, e nables a variet y of aut omated s ourcec odet ransfor mat ions t hatw ou ldb e\ninfeasible if arbit rar yformatting were allow ed.\nMany text editors can bec onﬁgured tor un gofmteach timey ou saveaﬁle ,s ot haty ours ource\nco deis always pro perly for matte d. Ar el ate d to ol,goimports,a ddition allym anages the ins er-\ntion",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 21,
      "page_label": "3"
    }
  },
  {
    "page_content": "co deis always pro perly for matte d. Ar el ate d to ol,goimports,a ddition allym anages the ins er-\ntion \nand removal ofi mp ort declarat ions asn eeded.I ti sn ot par tof the stand ard distr ibution\nbuty ou can obt ain itw it hthis command:\n$g og et golang.org/x/tools/cmd/goimports\nFo rmost users,t he usu alw ay tod ow nlo ad andb ui ldpackages, run their tests, showt heir doc-\numentation,a nd soo n, isw it hthe goto ol, whichw e’ll look at in Sec tion 10.7.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 21,
      "page_label": "3"
    }
  },
  {
    "page_content": "ptg16105617\n4C HAPTER 1. TUTORIAL\n1.2. Command-Line Arguments\nMost programsp ro cesss om einputt op ro duce som eoutput;t hat’sp rett ymuch the deﬁnition\nof computing . Buth ow doesap rogram get inputd at aon whicht oo perate? S om e prog rams\ngeneratet heir own data,b ut moreo ften, inputc om esf ro man exter nal source: a ﬁle,an et wor k\nconnec tion,t he out put of another program, a u sera tak ey board ,command-linea rguments,\nor the like. T he next few examples will dis cusss om e of these alt ernat ives, startingw it hcom-\nmand-linea rguments.\nThe ospackagep rovides functions and other values for dealingw it htheo perat ings ystemi na\npl atfor m-indep endentf ashion. C ommand-linea rguments ar ea vai lable toap rogram in a\nvar iable named Args that i sp ar t of t he os package; t hu sitsn amea ny where outside t he os\npackagei s os.Args.\nThev ar iableos.Args is a sli ce of str ings. Slices ar eaf undament aln ot ion inG o, and we’ll tal k\nal ot morea bout thems oon. F or now,t hin kof a s lice as a d ynamic ally size dsequence s of\nar ray elements where i ndiv idu ale lements can b ea ccesseda s s[i] andac ontiguous s ubse-\nquence as s[m:n].T he numbero fe lements isg iven by len(s).A si nm osto ther program-\nmingl angu ages, alli ndexingi nG ou ses half-open intervalst hati nclude t he ﬁrs t index b ut\nexclude the last, because its impliﬁes logic. F or example, the slice s[m:n],w here 0 ≤ m ≤ n ≤\nlen(s),c ontains n-melements.\nTh",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 22,
      "page_label": "4"
    }
  },
  {
    "page_content": "exclude the last, because its impliﬁes logic. F or example, the slice s[m:n],w here 0 ≤ m ≤ n ≤\nlen(s),c ontains n-melements.\nTh\ne ﬁrs t elemento f os.Args, os.Args[0],i st he nameo ft he command its elf; the other ele-\nmentsa re t he a rguments t hatw erep resent edt ot he p rogram w heni ts tarted e xe cut ion.A\nslice expressiono ft he for ms[m:n] yields a slice thatr eferst oe lements m thro ugh n-1,s ot he\nelements wen eed for our next examplea re those int he slice os.Args[1:len(os.Args)].I f m\nor n is omitt ed, itd efau lts to0o r len(s) resp ectively, sow ec an abbreviate the desired slice as\nos.Args[1:].\nHere’sa ni mp lementation of t he Unix echo command, whichp rintsi ts command-linea rgu-\nmentso nas inglel ine. I ti mp ortst wo packages, whicha re given as a parenthesize d list rat her\nthan as individu al importde clarat ions.E it her for mis legal,b ut convent ion allyt he listf or mis\nus ed. T he o rder o fi mp ortsd oesn’tm atter; t he gofmt to ols or tst he p ackagen ames in to\nalph abeticalo rder.( Wh ent here are s everal versio ns o fa ne xample, w ew ill o ften num ber\nthem soy ou can bes ureo fw hicho ne we’re tal kinga bout.)\ngopl.io/ch1/echo1\n// Echo1 prints its command-line arguments.\npackage main\nimport (\n\"fmt\"\n\"os\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 22,
      "page_label": "4"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.2. COMMAND-LINE ARGUMENTS5\nfunc main() {\nvar s, sep string\nfor i := 1; i < len(os.Args); i++ {\ns+ =s ep + os.Args[i]\nsep = \" \"\n}\nfmt.Println(s)\n}\nComments beg in with //.A ll t ext f ro m a // to t he end o ft he l inei sc omment ary f or\nprog rammersa nd isi gnored byt he compi ler.B yc onvent ion,w ed es crib eeach package in a\ncommenti mmediate lyp re cedingi ts packaged eclarat ion; for a main package, thisc omment is\non e or morec ompletes entences thatd es crib ethep rogram as a whole.\nThe var de clarat iond eclarest wo var iabless and sep,o ft yp estring.A var iable can bei ni-\ntialize d as par tof itsd eclarat ion. Ifi ti sn ot explicitlyi nitialize d,i ti si mp licitlyi nitialize dto\nthe zero value fori ts typ e,w hichi s 0 forn umer ictypesa nd the e mp tys tr ing \"\" fors tr ings.\nThus int hise xample, the declarat ioni mp licitlyi nitializes s and sep to emp tys tr ings. We ’ll\nhave moret os ay aboutv ar iables andd eclarat ions inC hapt er2 .\nFo r numb ers,G op rovides t he u su ala rithmetica nd l og ical operator s.W hena pp lie d to\nst rings, how ever, the +op erator concatenate sthev alues, sot he expression\nsep + os.Args[i]\nrepres ents the con catenat iono ft he str ings sep and os.Args[i].T he statement weu sedi n\nthep rogram,\ns+ =s ep + os.Args[i]\nis an assig nment statement that conc atenatest he old value of s with sep and os.Args[i] and\nassig nsi tb ackt o s;i ti se quivalentt o\ns=s+s ep + os.Args[i]",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 23,
      "page_label": "5"
    }
  },
  {
    "page_content": "assig nsi tb ackt o s;i ti se quivalentt o\ns=s+s ep + os.Args[i]\nTheo perator +=is an assig nment operator.E acha rithmetica nd log ical operator like +or *has\nac or respondinga ssig nmento perator.\nThe echo prog ram couldh avep rint edi ts out put inal oopo ne pie ce at a time, but thisv ersion\ninsteadb ui ldsu pas tr ing byr ep eatedlya pp endingn ew text tot he end.T he str ing s st artsl ife\nempt y,t hati s, wit hvalue \"\",a nd eacht ript hrough the loopa ddss om etext toi t; aftert he ﬁrs t\nit erat ion, a space isa ls oinserted sot hatw hent he loopi s ﬁnishe d,t here iso ne space bet ween\neach argument. Thi si saq uadrat icprocesst hatc ou ldb ec ostlyi ft he numbero fa rguments is\nlarge ,butf or echo,t hat’su nlikely. W e’ll showan umbero fi mp rov edv ersions of echo in this\nch apt era nd the next thatw ill dealw it hanyr eali nefﬁciency.\nThel oopi ndex variable iis declare din the ﬁrs tpart oft he forlo op. T he :=sy mboli sp ar tof\na sh ort v ar iab led eclarati on,as tatement thatd eclareso ne orm orev ar iables andg ives t hem\nappropriatet yp esbasedo nt he initializer values; there’sm orea bout this in the next chapt er.\nThei ncrement statement i++ adds1t o i;i t’se quivalentt o i+ =1 whichi si nt ur nequivalent\nto i=i+1 .T here’sac or respondingd ecrement s tatement i-- that s ubtrac ts 1. Thes e are\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 23,
      "page_label": "5"
    }
  },
  {
    "page_content": "ptg16105617\n6C HAPTER 1. TUTORIAL\nst atements, not expressions ast he yarei nm ostl angu ages in the C fami ly, so j=i ++ is illegal,\nandt he yarep ostﬁxo nly, so --iis not legal either.\nThe for lo opi st he o nlyl oops tatement inG o. I th as a num bero ff or ms, o ne o fw hichi s\nillustrated here:\nfor initialization; condition; post {\n// zero or more statements\n}\nParent hes es aren ever u seda ro und the t hree c omponentso fa for lo op. T he b races are\nmand atory,h ow ever, and the openingb race mustb eo nt he samel ine as the postst atement.\nTheo pt ion al initialization st atement ise xe cut edb eforet he loops tarts. I fi ti sp resent,i t\nmu stb easi mp les tatement,t hati s, a s hort var iable decl arat ion, an incremento ra ssig nment\nst atement,o raf unctionc al l.T he condition is a b oole an expressiont hati se valuate dat the\nbeginningo fe achi terat iono ft he loop; if ite valuatest o true,t he statementsc ontrol led byt he\nlo opa re exe cut ed. T he post st atement ise xe cut eda fter the bodyo ft he loop, thent he con di-\ntion ise valuate dagain. Th el oope nd swhen the con dit ion becom esf alse.\nAnyo ft hese p ar ts mayb eo mitt ed. I ft here isn o initialization andn o post,t he s emi-\ncolons may also beo mitt ed:\n// a traditional \"while\" loop\nfor condition {\n// ...\n}\nIf the con dit ion iso mitt ede nt ire ly in any oft hese for ms, for examplei n\n// a traditional infinite loop\nfor {\n// ...\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 24,
      "page_label": "6"
    }
  },
  {
    "page_content": "// ...\n}\nIf the con dit ion iso mitt ede nt ire ly in any oft hese for ms, for examplei n\n// a traditional infinite loop\nfor {\n// ...\n}\nthel oopi si nﬁnite, thoug h lo ops oft hisf or mmayb et er minated i ns om eot her way,l ikea\nbreakor returnst atement.\nAnot her f or m of the for lo opi terates overara n ge of values fro mad at atype likeast r ingo ra\nslice.T oi llustrate, here’sas econ dversiono f echo:\ngopl.io/ch1/echo2\n// Echo2 prints its command-line arguments.\npackage main\nimport (\n\"fmt\"\n\"os\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 24,
      "page_label": "6"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.2. COMMAND-LINE ARGUMENTS7\nfunc main() {\ns, sep := \"\", \"\"\nfor _, arg := range os.Args[1:] {\ns+ =s ep + arg\nsep = \" \"\n}\nfmt.Println(s)\n}\nIn eachi terat iono ft he loop, range produces a pair o fv alues: the index an dt he value oft he\nelementa tt hati ndex. I nt hise xample, wed on’tn eed the index, but the syntaxo fa rangelo op\nre quires thati fw ed ealw it hthee lement, wem ustd ealw it hthei ndex too.O ne ide awouldb e\nto assig nthei ndex to an o bv iou sly temporar y var iable like temp andi gnorei ts value,b ut Go\ndo esnotp er mitu nu sed local variables, sot hisw ou ldr esult in a compi lat ione rror.\nThes olut ion ist ou se the bl ank ident iﬁer,w hose namei s _(t hat is, an underscore). Th eb lank\nidentiﬁer may b eu sedw hene ver synt axr equires a variablen ameb ut prog ram log ic do esnot,\nfori ns tance tod is carda nu nwante dlo opi ndex whenw er equireo nlyt he elementv alue.M ost\nGo programmersw ou ldl ikelyu se range and _ to write the echo prog ram as abov e,s ince the\nindexingo ver os.Argsis imp licit, not explicit, andt hu seasier tog et rig ht.\nThisv ersiono ft he program usesa s hort v ar iable decl arat iont od eclare and initialize s and\nsep,b ut wec ou lde qu allyw el lhave declare dthev ar iables sep arately. T here are s everal ways\nto declare a str ing var iable; these are all equivalent:\ns: =\" \"\nvar s string\nvar s = \"\"\nvar s string = \"\"\nWhys houldy ou prefero ne for mto another? The ﬁrs t form,as hort var iable decl arat ion, is",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 25,
      "page_label": "7"
    }
  },
  {
    "page_content": "s: =\" \"\nvar s string\nvar s = \"\"\nvar s string = \"\"\nWhys houldy ou prefero ne for mto another? The ﬁrs t form,as hort var iable decl arat ion, is\nthem ostc ompact,b ut it may beu sedo nlyw it hin a fun ction, not for package-le vel var iables.\nThes econ dform r elies ond efau lti nitializat iont ot he zerov alue for str ings, whichi s \"\".T he\nthirdf or mis rarelyu sede xceptw hend eclaring multiplev ar iables. Thef ourthf or mis explicit\nab out the var iable’st yp e,w hichi sr edundant wheni ti st he samea st hato ft he initial value but\nne cessary ino ther cas eswheret he yaren ot oft he samet yp e.I np rac tice,y ou shouldg eneral ly\nus e on e of t he ﬁrs t twof or ms, w it h expliciti nitializat iont os ay t hatt he i nitial value is\nimportanta nd imp liciti nitializat iont os ay thatt he initial value doesn’tm atter.\nAs not eda bove ,each timea ro und the loop, the str ing s gets comp letelyn ew contents. The +=\nst atement makes a new str ing byc on catenat ingt he old str ing ,as pace charac ter,a nd the next\nargument, thena ssig nst he news tr ing to s.T he old cont entsof saren ol on g eri nu se,s ot he y\nwi l lbe garb age-collec ted ind ue course.\nIf t he amoun to fd at a invo l vedi sl arge , this c ou ldb ec ostly. A simpler an dm oree fﬁcient\nsolut ion wou ldb et ou se the Joinfunc tionf ro mthe stringspackage:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 25,
      "page_label": "7"
    }
  },
  {
    "page_content": "ptg16105617\n8C HAPTER 1. TUTORIAL\ngopl.io/ch1/echo3\nfunc main() {\nfmt.Println(strings.Join(os.Args[1:], \" \"))\n}\nFinal ly, ifw ed on’tc area bout for mat but justw antt os ee the values, perhaps for debug ging, we\ncanl et Printlnformat the results for us:\nfmt.Println(os.Args[1:])\nTheo ut put of thiss tatement i sl ikew hatw ew ou ldg et f ro m strings.Join,b ut wit h sur-\nro undingb rackets. A ny slice may bep rint edt hisw ay.\nExercis e 1.1: Mo dif ythe echo prog ramto als opr int os.Args[0],t he nameo ft he command\nthat invo ked it.\nExercis e 1.2:Mo dif ythe echo prog ramto print the index andv alue ofe acho fi ts arguments,\non eperl ine.\nExercis e 1.3: Experiment tom easure the dif ference in runningt imeb et weeno ur pot ent ial ly\ninefﬁcientv ersions a nd the one t hatu ses strings.Join.( Section1 .6 i llustrates par t of t he\ntime package, a nd S ec tion 11.4 s hows h ow t ow rite b enchmark t ests f or s ystematicp er-\nformance evaluation.)\n1.3. Finding Duplicat eL ines\nProg ramsf or ﬁle copy ing ,pr int ing ,searching, sor ting, count ing ,andt he likea ll haveas imi lar\nst ruc ture: a loop overt he inp ut, som ecomp utation on eache lement, andg enerat iono fo ut put\non the ﬂyo ra tt he end.W e’ll showt hree var iants ofap rogram cal le ddup;i ti sp ar tly ins pired\nby t he U nix uniq command, w hichl ooks f or adj acentd up lic atel ines. Th es tr uctures and\npackages useda re model sthat can bee asi lya dapt ed.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 26,
      "page_label": "8"
    }
  },
  {
    "page_content": "packages useda re model sthat can bee asi lya dapt ed.\nThe ﬁrs t versiono f dup pr intse achl inet hata pp earsm oret hano ncei nt he stand ard inp ut,\npreceded byi ts count. Thi sp rogram introduces the if st atement,t he map data typ e,a nd the\nbufiopackage.\ngopl.io/ch1/dup1\n// Dup1 prints the text of each line that appears more than\n// once in the standard input, preceded by its count.\npackage main\nimport (\n\"bufio\"\n\"fmt\"\n\"os\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 26,
      "page_label": "8"
    }
  },
  {
    "page_content": "ptg16105617\nF\nINDING DUPLICATE LINESSECTION 1.3. 9\nfunc main() {\ncounts := make(map[string]int)\ninput := bufio.NewScanner(os.Stdin)\nfor input.Scan() {\ncounts[input.Text()]++\n}\n// NOTE: ignoring potential errors from input.Err()\nfor line, n := range counts {\nif n > 1 {\nfmt.Printf(\"%d\\t%s\\n\", n, line)\n}\n}\n}\nAs \nwit hfor,p arenthes \nes aren ever useda ro und the c on dit ion ina n if st \natement,b ut braces\n           \n       \nar\ne r\nequired for the body.  Th\nere can be a\nn o\npt ion al e\nlse p\nart that i\ns e\nxe cut ed i\nf t\nhe con dit ion \ni\ns false.\nA m\nap h\nolds a s\net of k\ney/value pairs a\nnd provides cons tant-t ime o\nperat ions to s\ntore , r\netr ieve, \no\nr test f\nor an i\ntem i\nn t\nhe set. T\nhe k\ney may be o\nf a\nny typ e w\nhos e va\nlues can be comp are d w\nith\n==, st rings being t\nhe most common e\nxample; the value may be o\nf a\nny typ e at \nall. I\nn t\nhis exa-\nmple, the k\neys a\nre  s\ntr ings a\nnd the values are i\nnts.  T\nhe b\nui lt-in function make creates a new\nempty m\nap; it h\nas other uses t\noo. M\naps are di\ns cussed a\nt l\nengt h in \nSec tion 4.3.\nEach \ntime dup re \nads a l ineo fi np ut, t he l inei su seda sak ey i nt o them ap an dt he c or-\nresp ondingv alue isi ncrement ed. T he statement counts[input.Text()]++ is \nequivalentt o\nthes etwos tatements:\nline := input.Text()\ncounts[line] = counts[line] + 1\nIt’sn ot \na pro blem if the map doesn’ty et cont ain thatk ey.T he ﬁrs ttime a newl inei ss een, the\nexpression counts[line]on",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 27,
      "page_label": "9"
    }
  },
  {
    "page_content": "It’sn ot \na pro blem if the map doesn’ty et cont ain thatk ey.T he ﬁrs ttime a newl inei ss een, the\nexpression counts[line]on \nthe rig ht-hands ide evaluatest ot he zerov alue for itst yp e,w hich\nis 0for int.\nTo \nprint the results, weu se another range-b \nased for lo \nop, thist imeo vert he counts map. \nAs\nbefore ,each iterat ionp ro duces two results, a k ey a nd the v alue oft he map elementf or that\nke y.T he order ofm ap iterat ioni sn ot speciﬁed,b ut inp rac tice iti sr andom, varying fro mon e\nrunt oa nother.T hisd esig nis int ent ion al, since itp re vents programsf ro m re lying ona ny par-\nticularo rder ingw here non eis guarante e d.\nOnwardt ot he bufio package, \nwhichh elps makei np uta nd out put efﬁcienta nd convenient.\nOneo fi ts mostu sefulf eaturesi sat yp ecalled Scannerthat \nreads inp uta nd bre aks iti nt olines\nor words;i t’so ften the easiestw ay top ro cessi np utt hatc om esn atural ly in lines.\nThep rogram usesas hort var iable decl arat iont oc re ate a n ew var iableinput that \nreferst oa\nbufio.Scanner:\ninput := bufio.NewScanner(os.Stdin)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 27,
      "page_label": "9"
    }
  },
  {
    "page_content": "ptg16105617\n10 CHAPTER 1. TUTORIAL\nThes canner reads fro mthep rogram’ss tand ard inp ut. Eac hc al lto input.Scan() re ads the\nnext linea nd remov est he newlinec harac ter fro mthee nd;t he resultc an ber et rie ved byc al l-\ning input.Text().T he Scan func tionr etur nstrue if there isal inea nd false when there is\nno more inp ut.\nThef unction fmt.Printf,l ike printf in C an do ther langu ages, pro duces for matte doutput\nfrom a l isto fe xpressions.I ts ﬁrs t argumenti saf or mat str ing thats peciﬁes how subsequent\narguments shouldb ef or matte d. Thef or mat ofe acha rgumenti sd eter mined byac onversion\nch arac ter,al etterf ol low ing a percents ig n. Fo rexample, %d formats an integero perandu sing\nde cimal not ation,a nd %sexp ands tot he value ofas tr ing operand.\nPrintfhaso verad ozen suchc onversions,w hichG op rogrammersc al lverb s.T hist able isf ar\nfrom a completes peciﬁcation but illustrates manyo ft he featurest hata re avai lable:\n%d de cimal integer\n%x, %o, %b integer in hexade cimal,o ctal,b inar y\n%f, %g, %e ﬂoating-p ointn umber: 3.141593 3.141592653589793 3.141593e+00\n%t boole an:trueor false\n%c rune (Unico de co depoint)\n%s st ring\n%q quot eds tr ing \"abc\"or rune 'c'\n%v anyv alue in a natural for mat\n%T type ofa ny value\n%% literal percents ig n (noo perand)\nThef or mat str ing in dup1 also containsata b \\t andan ewline \\n.S tr ing lit eralsm ay cont ain",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 28,
      "page_label": "10"
    }
  },
  {
    "page_content": "%% literal percents ig n (noo perand)\nThef or mat str ing in dup1 also containsata b \\t andan ewline \\n.S tr ing lit eralsm ay cont ain\nsuch es cap esequ ences forr epresent ing other wis einvisiblec harac ters. Printf do esnotw rite a\nne wlineb yd efau lt. B yc onvent ion,f or matting f unctions w hose n ames en di n f,s ucha s\nlog.Printf and fmt.Errorf,u se the for matting rules of fmt.Printf,w here ast hose whose\nnamese nd i n ln fo llow Println,f or matting t heir arguments as if by %v,f ol low edb ya\nne wline.\nMany programsr eade it her fro mtheir stand ard inp ut, as abov e,o rf ro mas equence ofn amed\nﬁles. Th en ext versiono f dup canr eadf ro mthes tand ard inp uto rh andleal isto fﬁ le names,\nusing os.Opento opene acho ne:\ngopl.io/ch1/dup2\n// Dup2 prints the count and text of lines that appear more than once\n// in the input. It reads from stdin or from a list of named files.\npackage main\nimport (\n\"bufio\"\n\"fmt\"\n\"os\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 28,
      "page_label": "10"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.3. FINDING DUPLICATE LINES 11\nfunc main() {\ncounts := make(map[string]int)\nfiles := os.Args[1:]\nif len(files) == 0 {\ncountLines(os.Stdin, counts)\n}e lse {\nfor _, arg := range files {\nf, err := os.Open(arg)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"dup2: %v\\n\", err)\ncontinue\n}\ncountLines(f, counts)\nf.Close()\n}\n}\nfor line, n := range counts {\nif n > 1 {\nfmt.Printf(\"%d\\t%s\\n\", n, line)\n}\n}\n}\nfunc countLines(f *os.File, counts map[string]int) {\ninput := bufio.NewScanner(f)\nfor input.Scan() {\ncounts[input.Text()]++\n}\n// NOTE: ignoring potential errors from input.Err()\n}\nThef unction os.Open returnst wo values. The ﬁrs t is ano penﬁ le (*os.File)t hati su sedi n\nsu bsequentr eads byt he Scanner.\nThes econ dresu lto f os.Open is a v alue oft he bui lt-inerror type.I f err equals the speci al\nbuilt-in value nil,t he ﬁle was o pene dsuccessf ully. T he ﬁle isr ead, and whent he end oft he\ninputi sr each ed,Close clos estheﬁ le andr eleasesa ny res ources. On theo ther hand, if err is\nnot nil,s om ethingw entw ro ng. I nt hatc as e,t he error value descr ibest he pro blem. Our sim-\nple-minde d er ror handlingp rintsam essage ont he stand ard error streamu sing Fprintf and\nthev erb %v,w hichd ispl ays a value o fa ny typ e in a default for mat, and dup then car r ieson\nwith then ext ﬁle; the continue st atement goest ot he next iterat iono ft he enclosing for lo op.\nIn the int erestso fk eeping codes amples toar easonables ize,o ur early examples arei nt ent ion-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 29,
      "page_label": "11"
    }
  },
  {
    "page_content": "In the int erestso fk eeping codes amples toar easonables ize,o ur early examples arei nt ent ion-\nal lys om ewhat cavalier ab oute rror h andling. C le arly w em ustc he ckf or a ne rror f ro m\nos.Open;h ow ever, wea re ignor ing the lessl ikelyp ossibi lit ythat an er ro rcouldo cc urwhile\nre adingt he ﬁle w it h input.Scan.W ew ill n ot epl aces w here we’ve skipp ede rror che cking ,\nandw ew ill goi nt othed et ails ofe rror handling in Sec tion 5.4.\nNo tice thatt he cal lto countLinesprecedes its decl arat ion. Functions a nd other package-le vel\nentities may bed eclare din anyo rder.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 29,
      "page_label": "11"
    }
  },
  {
    "page_content": "ptg16105617\n12 CHAPTER 1. TUTORIAL\nAm ap isare ference to the dat ast ruc turec re ate dby make.W henam ap isp assedt oaf unc-\ntion,t he functionr eceivesa c opyo ft he reference,s oa ny changest he cal le dfunc tionm akes to\ntheu nderly ing d at a st ruc turew ill b ev isible thr ough t he c al ler’sm ap reference t oo.I no ur\nexample, the values inserted int othe countsmapb y countLinesares eenb y main.\nThev ersions of dup ab ove operatei na‘‘st reaming’’mo dei nw hichi np uti sr eada nd bro ken\ninto lines as needed,s oi np rincip let hese programsc an handlea na rbit rar y amount ofi np ut.\nAn alt ernat ive appro ach ist or eadt he ent ire inp uti nt omemory ino ne big gulp,s plit it i nt o\nlines alla to nce, thenp ro cesst he lines. Th ef ol low ing version, dup3,o perates in thatf ashion.\nIt int roduces t he f unction ReadFile (f rom t he io/ioutil package), whic hr eads t he e nt ire\ncont entso fana me dﬁle,a nd strings.Split,w hichs plitsas tr ing int oas lice ofs ubst rings.\n(Splitis the opp osite of strings.Join,w hichw es aw earlier.)\nWe’ve simpliﬁed dup3some what. Fir st,i to nlyr eads name dﬁles, not the stand ard inp ut, since\nReadFile re quires a ﬁle nam ea rgument. S econ d,w em ov edt he count ing oft he lines back\ninto main,s ince iti sn ow needed ino nlyo ne place.\ngopl.io/ch1/dup3\npackage main\nimport (\n\"fmt\"\n\"io/ioutil\"\n\"os\"\n\"strings\"\n)\nfunc main() {\ncounts := make(map[string]int)\nfor _, filename := range os.Args[1:] {\ndata, err := ioutil.ReadFile(filename)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 30,
      "page_label": "12"
    }
  },
  {
    "page_content": "\"os\"\n\"strings\"\n)\nfunc main() {\ncounts := make(map[string]int)\nfor _, filename := range os.Args[1:] {\ndata, err := ioutil.ReadFile(filename)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"dup3: %v\\n\", err)\ncontinue\n}\nfor _, line := range strings.Split(string(data), \"\\n\") {\ncounts[line]++\n}\n}\nfor line, n := range counts {\nif n > 1 {\nfmt.Printf(\"%d\\t%s\\n\", n, line)\n}\n}\n}\nReadFile returnsab ytes lice t hatm ustb ec onverted i nt o a string so i tc an b es plit b y\nstrings.Split.W ew ill dis cusss tr ingsa nd bytes lices at lengt h in Sec tion 3.5.4.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 30,
      "page_label": "12"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.4. ANIMATED GIF S1 3\nUn der the cov ers, bufio.Scanner, ioutil.ReadFile,a nd ioutil.WriteFile us ethe Read\nand Write methodso f *os.File,b ut it’sr aret hatm ostp rogrammersn eed t oa ccesst hose\nlower-le vel routinesd irec tly.T he hig her-le vel functions liket hose fro mbufioand io/ioutil\naree asier tou se.\nExercis e 1.4:Mo dif ydup2to print the names ofa ll ﬁles in whiche achd up lic ated lineo cc urs.\n1.4. Animated GIFs\nThen ext program demon strates basic usage ofG o’ss tand ard image packages, whichw e’ll use\nto cre ate a sequence ofb it-mappedi magesa nd thene ncodet he sequence as a GIF animat ion.\nThei mages, cal le dLi ssajous ﬁgure s,w ereas taplev isuale ffec tin sci-ﬁﬁ lmso ft he 1960s. Th ey\naret he paramet ric cur ves pro duce dby har monic osci l lat ioni nt wo dimensions,s ucha st wo\nsinew aves fed int othe x and y inputs of an oscillos cope.F igure1 .1 shows som eexamples.\nFigure 1.1. Fo urL issajous ﬁgures.\nTherea re several new con str uctsi nt hisc ode, including const de clarat ions,s tr uct typ es, and\ncomp osite l it erals. Unlik em osto fo ur examples, thi so ne a ls o invo l vesﬂ oating-p ointc om-\nputation s.W e’ll dis cusst hese topics onlyb rieﬂyh ere, pushingm ostd et ails off tol ater chap-\nters,s ince t he primary g oalr ig htn ow ist og ivey ou ani de a of w hatG ol ooks li ke and the\nkind sof things thatc an bed on eeasi lyw it hthel angu agea nd its librar ies.\ngopl.io/ch1/lissajous",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 31,
      "page_label": "13"
    }
  },
  {
    "page_content": "kind sof things thatc an bed on eeasi lyw it hthel angu agea nd its librar ies.\ngopl.io/ch1/lissajous\n// Lissajous generates GIF animations of random Lissajous figures.\npackage main\nimport (\n\"image\"\n\"image/color\"\n\"image/gif\"\n\"io\"\n\"math\"\n\"math/rand\"\n\"os\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 31,
      "page_label": "13"
    }
  },
  {
    "page_content": "ptg16105617\n14 CHAPTER 1. TUTORIAL\nvar palette = []color.Color{color.White, color.Black}\nconst (\nwhiteIndex = 0 // first color in palette\nblackIndex = 1 // next color in palette\n)\nfunc main() {\nlissajous(os.Stdout)\n}\nfunc lissajous(out io.Writer) {\nconst (\ncycles = 5/ /n umber of complete x oscillator revolutions\nres = 0.001 // angular resolution\nsize = 100 // image canvas covers [-size..+size]\nnframes = 64 // number of animation frames\ndelay =8/ /d elay between frames in 10ms units\n)\nfreq := rand.Float64() * 3.0 // relative frequency of y oscillator\nanim := gif.GIF{LoopCount: nframes}\nphase := 0.0 // phase difference\nfor i := 0; i < nframes; i++ {\nrect := image.Rect(0, 0, 2*size+1, 2*size+1)\nimg := image.NewPaletted(rect, palette)\nfor t := 0.0; t < cycles*2*math.Pi; t += res {\nx: =m ath.Sin(t)\ny: =m ath.Sin(t*freq + phase)\nimg.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5),\nblackIndex)\n}\nphase += 0.1\nanim.Delay = append(anim.Delay, delay)\nanim.Image = append(anim.Image, img)\n}\ngif.EncodeAll(out, &anim) // NOTE: ignoring encoding errors\n}\nAf ter importingap ackagew hose pat hhasm ultiplec omponents, like image/color,w er efer\nto t he p ackagew it h an amet hatc om esf ro m thel astc omponent.T hu s thev ar iable\ncolor.Whitebelongst ot he image/colorpackagea nd gif.GIFbelongst o image/gif.\nA const de clarat ion( §3.6) g ives names t oc on stants, thati s, values t hata re ﬁxe d at comp ile",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 32,
      "page_label": "14"
    }
  },
  {
    "page_content": "A const de clarat ion( §3.6) g ives names t oc on stants, thati s, values t hata re ﬁxe d at comp ile\ntime,s ucha st he numer ical parametersf or cyc les, frames, an dd el ay. L ike var de clarat ions,\nconstde clarat ions may appear at packagel evel (so the names arev isible throughoutt he pack-\nage) orw it hin a function( so the names arev isible onlyw it hin thatf unction). Th ev alue ofa\ncons tantm ustb ean umber, str ing ,or boole an.\nThee xpressions []color.Color{...} and gif.GIF{...} are comp osite lit era ls (§4.2, §4.4.1),\nac ompact not ation for ins tantiat inga ny ofG o’sc omposite typ esfrom a s equence ofe lement\nvalues. Her e, the ﬁrs ton eis a slice andt he secon d on eis a st ruc t.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 32,
      "page_label": "14"
    }
  },
  {
    "page_content": "ptg16105617\nF\nETCHING A URLSECTION 1.5. 15\nThet yp \ne gif.GIFis \na str uct typ e (§4.4). A st ruc tis a gro upo fv alues cal le dﬁel ds,o ften ofd if-\nferent typ es, that arec ol lec ted toget her in a singleo bj e ctt hatc an b et re ate das a unit. The\nvar iableanim is \na str uct oft yp egif.GIF.T he \nstr uct lit eral createsas tr uct value whose Loop-\nCount ﬁeldi\nss et to nframes;a ll \nother ﬁelds have the zerov alue for their typ e.T he indiv idu al\nﬁelds ofas tr uct c an b ea ccessedu singd ot not ation,a si nt he ﬁnalt wo a ssig nments which\nexplicitlyu pdatet he Delayan\nd Imageﬁelds \nof anim.\nTh\ne lissajous func \ntionh as t wo n este d lo ops. Th eo ut erl oopr unsf or 6 4i terat ions,e ach\np\nroducing a s\ningle f\nrame o\nf t\nhe  a\nnimat ion.  I\nt c\nre ates a n\new 201&201 image w\nit h a p\nalette  o\nf \nt\nwo c\nolor s, w\nhite  a\nnd  b\nlack. A\nll  p\nixel s ar\ne i\nnitial ly s\net  t\no t\nhe  p\nalette’s z\nero v\nalue  (t\nhe  z\nerot h \nco\nlor i\nn t\nhe palette), which w\ne s\net to w\nhite.  E\nach p\nass t\nhrough the outer loop generates a new\nim\nageb ys etting som e pixe lst ob lack.T he resulti sa pp ended,u singt he bui lt-inappend func-\ntion \n(§4.2.1), t oal isto ff rames in anim,a long \nwit h as peciﬁed d el ayo f8 0ms. Final l yt he\nsequence off rames andd el ays ise ncoded int oGIF for mat andw ritt ent ot he out put stream\nout.T he \ntyp eof out is io.Writer,w hichl ets \nusw rite to a w ide range ofp ossibled estina-\ntion s, as we’ll shows oon.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 33,
      "page_label": "15"
    }
  },
  {
    "page_content": "out.T he \ntyp eof out is io.Writer,w hichl ets \nusw rite to a w ide range ofp ossibled estina-\ntion s, as we’ll shows oon.\nThei nner loop runst he two oscillator s.T he x os cillator isj ustt he sinef unction. The y os cil-\nlatori sa ls o as inus oid,b ut it sf re quency r el ative t ot he x os cillator i sar andomn umber\nbetween0a nd 3,a nd its phase rel ative tot he x os cillator isi nitial lyz erob ut incre asesw it h\neach f rameo ft he a nimat ion. Th el oopr unsu nt i lthe x os cillator h as co mp leted ﬁve f ull\ncycles. A te achs tep, itc al lsSetColorIndex to \ncolor the pixel cor respondingt o( x, y)b lack,\nwhich is at position 1 int he palette.\nThe main func \ntionc al lst he lissajous func \ntion, direc ting itt ow rite to t he stand ard out put,\nso thisc ommand pro duces an animated GIF wit hframes like those inF igure1 .1:\n$g\nob uild gopl.io/ch1/lissajous\n$. /lissajous >out.gif\nExercis \ne 1.5: Change t he L issajous p rogram’sc olor p alette to g re eno nb lack,f or a dde d\nauthenticity.T oc re ate t he web c olor #RRGGBB,u se color.RGBA{0xRR,0 xGG,0 xBB,0 xff},\nwheree achp air \nofh exade cimal digitsr epresentst he int ensit y of the red,g re en, orb luec om-\nponent oft he pixel.\nExercis e 1.6: Mo dif y theL issajous program top ro duce images in m ultiplec olor sby adding\nmore values to palette andt hend ispl \naying t hemb yc hang ing the t hirda rgumento f Set-\nColorIndexin som \ne interest ing way.\n1.\n5. F et ching a URL\nFo",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 33,
      "page_label": "15"
    }
  },
  {
    "page_content": "aying t hemb yc hang ing the t hirda rgumento f Set-\nColorIndexin som \ne interest ing way.\n1.\n5. F et ching a URL\nFo \nr many app lic ations,a ccesst oi nfor mat ionf ro mtheI nt ernet isa si mp ortanta sa ccesst ot he\nlo cal ﬁle system. G op rovides a co llec tion of packages, gro upedu nder net,t hatm akei\nte asy\nto s enda nd receive infor mat iont hrough t he Int ernet, makel ow-le vel networ kconnec tion s,\nands et ups er vers, for whichG o’sc on cur rency features( introduce d in Chapt er8 )a re par tic u-\nlarlyu seful.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 33,
      "page_label": "15"
    }
  },
  {
    "page_content": "ptg16105617\n16 CHAPTER 1. TUTORIAL\nTo i llustratet he m inimum n ecessary t or et rie vei nfor mat iono verH TTP, here’sas imple\nprog ramcalled fetch that fetch est he content ofe achs peciﬁed URL andp rintsi ta su ninter-\npreted text; it’si ns pired byt he invaluableu tilit ycurl.O bv iou sly one wou ldu su allyd om ore\nwith suchd at a,butt hiss hows the basic idea. W ew ill use thisp rogram fre quentlyi nt he book.\ngopl.io/ch1/fetch\n// Fetch prints the content found at a URL.\npackage main\nimport (\n\"fmt\"\n\"io/ioutil\"\n\"net/http\"\n\"os\"\n)\nfunc main() {\nfor _, url := range os.Args[1:] {\nresp, err := http.Get(url)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"fetch: %v\\n\", err)\nos.Exit(1)\n}\nb, err := ioutil.ReadAll(resp.Body)\nresp.Body.Close()\nif err != nil {\nfmt.Fprintf(os.Stderr, \"fetch: reading %s: %v\\n\", url, err)\nos.Exit(1)\n}\nfmt.Printf(\"%s\", b)\n}\n}\nThisp rogram in troduces fun ctions f ro m twop ackages, net/http and io/ioutil.T he\nhttp.Get func tionm akes an HTTP r equesta nd,i ft here isn oe rror,r etur nst he resulti nt he\nresp ons e st ruc t resp.T he Body ﬁeldo f resp cont ainst he s er ver respons e as a r eadable\nst ream. Next, ioutil.ReadAll re ads the ent ire resp ons e;t he resulti ss tore din b.T he Body\nst reami sc los edt oa void leak ingr es ources, and Printf wr itest he respons eto the stand ard\noutput.\n$g ob uild gopl.io/ch1/fetch\n$. /fetch http://gopl.io\n<html>\n<head>\n<title>The Go Programming Language</title>\n...",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 34,
      "page_label": "16"
    }
  },
  {
    "page_content": "output.\n$g ob uild gopl.io/ch1/fetch\n$. /fetch http://gopl.io\n<html>\n<head>\n<title>The Go Programming Language</title>\n...\nIf the HTTPr equestf ai ls,fetchreportst he fai lurei ns tead:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 34,
      "page_label": "16"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.6. FETCHING URLS CONCURRENTL Y1 7\n$. /fetch http://bad.gopl.io\nfetch: Get http://bad.gopl.io: dial tcp: lookup bad.gopl.io: no such host\nIn eit her erro rcase, os.Exit(1)caus est he pro cesst oe xitw it has tatu sco deof 1.\nExercis e 1.7:Thef unctionc al lio.Copy(dst, src)re ads fro msrc andw ritest o dst.U se it\ninsteado f ioutil.ReadAll to c opyt he r espons e bodyt o os.Stdout withoutr equir inga\nbuffer large enoug hto holdt he ent ire stream. B es uret oc he ckt he error resulto f io.Copy.\nExercis e 1.8:Mo dif yfetch to add the preﬁx http:// to eacha rgumentU RL if iti sm issing.\nYo umig htw antt ou se strings.HasPrefix.\nExercis e 1.9:Mo dif yfetchto als opr int the HTTPs tatu sco de,f ound in resp.Status.\n1.6. F et ching URLsC oncurrently\nOneo ft he most int erest ing and nove laspectso fG oi si ts sup por tforc on cur rentp rogram-\nming. T hisi sal arge topic, tow hichC hapt er8 a nd Chapt er9 a re devot ed, sof or now we’ll\ngive youj ustat aste ofG o’sm ain conc urrency mechanisms, goroutinesa nd channel s.\nThen ext program, fetchall,d oest he samef etch ofaU RL’sc ontentsa st he pre vious example,\nbuti tf etch esm anyU RLs, al lc on cur rently, sot hatt he pro cessw ill t aken ol on g ert hant he\nlongest fetch rat her thant he sum ofa ll the fetch times. Thi sv ersiono f fetchall discards the\nresp ons esb ut rep ortst he size ande laps edt imef or eacho ne:\ngopl.io/ch1/fetchall",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 35,
      "page_label": "17"
    }
  },
  {
    "page_content": "resp ons esb ut rep ortst he size ande laps edt imef or eacho ne:\ngopl.io/ch1/fetchall\n// Fetchall fetches URLs in parallel and reports their times and sizes.\npackage main\nimport (\n\"fmt\"\n\"io\"\n\"io/ioutil\"\n\"net/http\"\n\"os\"\n\"time\"\n)\nfunc main() {\nstart := time.Now()\nch := make(chan string)\nfor _, url := range os.Args[1:] {\ngo fetch(url, ch) // start a goroutine\n}\nfor range os.Args[1:] {\nfmt.Println(<-ch) // receive from channel ch\n}\nfmt.Printf(\"%.2fs elapsed\\n\", time.Since(start).Seconds())\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 35,
      "page_label": "17"
    }
  },
  {
    "page_content": "ptg16105617\n18 CHAPTER 1. TUTORIAL\nfunc fetch(url string, ch chan<- string) {\nstart := time.Now()\nresp, err := http.Get(url)\nif err != nil {\nch <- fmt.Sprint(err) // send to channel ch\nreturn\n}\nnbytes, err := io.Copy(ioutil.Discard, resp.Body)\nresp.Body.Close() // don'tl eak resources\nif err != nil {\nch <- fmt.Sprintf(\"while reading %s: %v\", url, err)\nreturn\n}\nsecs := time.Since(start).Seconds()\nch <- fmt.Sprintf(\"%.2fs %7d %s\", secs, nbytes, url)\n}\nHere’s an example:\n$g ob uild gopl.io/ch1/fetchall\n$. /fetchall https://golang.org http://gopl.io https://godoc.org\n0.14s 6852 https://godoc.org\n0.16s 7261 https://golang.org\n0.48s 2475 http://gopl.io\n0.48s elapsed\nA goro utine is a c on cur rentf unctione xe cut ion.A ch ann el is a c ommunic ationm echanism\nthat allows one goroutine top assv alues ofas peciﬁed typ eto another goroutine.T he function\nmainruns inag oroutine and the gost atement cre atesa ddition alg oroutines.\nThe mainfunc tionc re atesac hannel ofs tr ingsu sing make.F or eachc ommand-linea rgument,\nthe go st atement int he ﬁrs trange loops tartsan ew goroutine thatc al lsfetch asy nchro nou sly\nto fetch the URL using http.Get.T he io.Copy func tionr eads the bodyo ft he respons eand\ndiscards i tb yw riting t ot he ioutil.Discard output s tream. Copy returnst he b ytec ount,\nalong wit hanye rror thato cc urre d.A se achr esulta rrives, fetchsend sas ummar y lineo nt he\nch annel ch.T he secon drange loopi n mainre ceivesa nd printst hose lines.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 36,
      "page_label": "18"
    }
  },
  {
    "page_content": "ch annel ch.T he secon drange loopi n mainre ceivesa nd printst hose lines.\nWh eno ne goroutine att emp tsas endo rr eceive onac hannel,i tb lo cks until another goroutine\nattemp tst he cor respondingr eceive ors endo perat ion, at whichp oint the value ist ransfer red\nandb ot hgoro utinesp ro ceed.I nt hise xample, each fetch send sav alue (ch <-expre ssi on)o n\nthec hannel ch,a nd main re ceivesa ll oft hem( <-ch). Hav ing main do allt he print ing ens u res\nthat out put fro meach goroutine isp ro cesseda sau nit, wit hno dangero fi nt erleaving ift wo\ngoro utines ﬁnish att he samet ime.\nExercis e 1.10: Findaw eb sit ethat pro duces a lar ge amounto fd at a. Invest igatec achingb y\nrunning fetchall twice in successio nt os ee w hether the rep orted ti me changesm uch. Do\nyoug et the samec ontent eacht ime? M odif yfetchall to print its out put toaﬁle s oi tc an be\nexamined.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 36,
      "page_label": "18"
    }
  },
  {
    "page_content": "ptg16105617\nS\nECTION 1.7. AW EB SERVER 19\nExercis \ne 1.11: Tr yfetchall with \nlon g era rgumentl ists, sucha ss amples fro mthet op million\nwe b sitesa vai lable at alexa.com.H ow \ndoest he p rogram b eh ave i fawe b site j ustd oesn’t\nresp ond?( Section8 .9 descr ibesm echanismsf or coping in suchc as es.)\n1.\n7. A WebS erver\nG\no’s  library m\nakes i\nt e\nasy  t\no w\nrite  a\n  w\neb  s\ner ver  t\nhat r\nespond s t\no  c\nlient r\nequests  li\nke  t\nhose\nmade \nby fetch.I nt hiss ec \ntion,w e’ll showam inimal ser ver thatr etur nst he pat h comp onent\nof t he U RL u sedt oa ccesst he s er ver.T hati s, if t he r equesti sf or http://local-\nhost:8000/hello,t he \nrespons ewi l lbe URL.Path \n= \"/hello\".\ngopl.io/ch1/server1\n// Server1 is a minimal \"echo\" server.\npackage main\nimport (\n\"fmt\"\n\"log\"\n\"net/http\"\n)\nfunc main() {\nhttp.HandleFunc(\"/\", handler) // each request calls handler\nlog.Fatal(http.ListenAndServe(\"localhost:8000\", nil))\n}\n// handler echoes the Path component of the request URL r.\nfunc handler(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintf(w, \"URL.Path = %q\\n\", r.URL.Path)\n}\nThep rogram \niso nlyah andf ulo fl ines long because l ibrar y func tions dom osto ft he wor k.\nThe main func \ntionc onne cts a handler functiont oi ncomingU RLs thatb eg inwith /,w hichi s\nal \nl URLs, an ds tartsas er ver listeningf or incomingr equests onp or t8000. A re questi sr ep-\nresent eda sas tr uct oft yp ehttp.Request,w hichc ontainsan umbero\nfr el ate dﬁelds,o ne of",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 37,
      "page_label": "19"
    }
  },
  {
    "page_content": "resent eda sas tr uct oft yp ehttp.Request,w hichc ontainsan umbero\nfr el ate dﬁelds,o ne of\nwhichi st he URL oft he incomingr equest. W henar equesta rrives, iti sg iven tot he handler\nfunc tion, whic he xt racts the p at h comp onent ( /hello)f ro \nm ther equestU RL an ds ends i t\nback a st he r espons e,u sing fmt.Fprintf W .eb \nser versw ill b ee xplained i nd et aili n\nSection7 .7.\nLet’ss tart the ser ver in the backg round.O nM ac OS X orL inux, add an ampers and (&)t\not he\ncommand; onM icros oft Windows, you will need tor un the command wit houtt he amp ers and\nin a sep aratec ommand window.\n$g\nor un src/gopl.io/ch1/server1/main.go &\nWe \ncan thenm akec lientr equests fro mthec ommand line:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 37,
      "page_label": "19"
    }
  },
  {
    "page_content": "ptg16105617\n20 CHAPTER 1. TUTORIAL\n$g ob uild gopl.io/ch1/fetch\n$. /fetch http://localhost:8000\nURL.Path = \"/\"\n$. /fetch http://localhost:8000/help\nURL.Path = \"/help\"\nAlternat ive ly, wec an accesst he ser ver fro maw eb brows er, as shown inF igure1 .2.\nFigure 1.2. Ar espons efrom the ech oserver.\nIt’se asy t oa dd f eaturest ot he s er ver.O ne u sefula ddition i sas peciﬁcU RL t hatr etur nsa\nst atu sof som esort.F or example, thisv ersiond oest he samee ch obuta ls ocounts the number\nof requests; a r equestt ot he URL /count returnst he count sof ar,e xc luding /count re quests\nthemselves:\ngopl.io/ch1/server2\n// Server2 is a minimal \"echo\" and counter server.\npackage main\nimport (\n\"fmt\"\n\"log\"\n\"net/http\"\n\"sync\"\n)\nvar mu sync.Mutex\nvar count int\nfunc main() {\nhttp.HandleFunc(\"/\", handler)\nhttp.HandleFunc(\"/count\", counter)\nlog.Fatal(http.ListenAndServe(\"localhost:8000\", nil))\n}\n// handler echoes the Path component of the requested URL.\nfunc handler(w http.ResponseWriter, r *http.Request) {\nmu.Lock()\ncount++\nmu.Unlock()\nfmt.Fprintf(w, \"URL.Path = %q\\n\", r.URL.Path)\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 38,
      "page_label": "20"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.7. AW EB SERVER 21\n// counter echoes the number of calls so far.\nfunc counter(w http.ResponseWriter, r *http.Request) {\nmu.Lock()\nfmt.Fprintf(w, \"Count %d\\n\", count)\nmu.Unlock()\n}\nThes er ver has two handlers, andt he requestU RL deter mines whicho ne isc al le d:ar equest\nfor /count invo kes counter anda ll othersi nv oke handler.A hand ler pattern that ends wit h\nas lash match esa ny URL thath as the pattern asap reﬁx. B ehindt he scenes, the ser ver runs\ntheh andler f or e achi ncomingr equesti nas ep arateg oroutine s ot hati tc an ser vem ultiple\nre quests simultane ously.H ow ever, ift wo con cur rentr equests try tou pdate count at the same\ntime,i tm ig htn ot bei ncrement edc on sistent ly; the program wou ldh aveas er ious bug cal le d a\nra c econdit ion (§9.1). T oa void thi sp ro blem, w em uste ns ure t hat at mos to ne g oroutine\naccessest he var iable at a time, whichi st he pur pos eof the mu.Lock() and mu.Unlock() calls\nthat brackete acha ccesso f count.W e’ll lookm orec los ely atc on cur rency w it hsh are dvar i-\nables in Chapt er9 .\nAs a r ichere xample, t he h andler fun ctionc an rep ort o nt he he adersa nd f or m data th at it\nre ceives, mak ingt he ser ver usefulf or ins pec ting and debug gingr equests:\ngopl.io/ch1/server3\n// handler echoes the HTTP request.\nfunc handler(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintf(w, \"%s %s %s\\n\", r.Method, r.URL, r.Proto)\nfor k, v := range r.Header {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 39,
      "page_label": "21"
    }
  },
  {
    "page_content": "func handler(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintf(w, \"%s %s %s\\n\", r.Method, r.URL, r.Proto)\nfor k, v := range r.Header {\nfmt.Fprintf(w, \"Header[%q] = %q\\n\", k, v)\n}\nfmt.Fprintf(w, \"Host = %q\\n\", r.Host)\nfmt.Fprintf(w, \"RemoteAddr = %q\\n\", r.RemoteAddr)\nif err := r.ParseForm(); err != nil {\nlog.Print(err)\n}\nfor k, v := range r.Form {\nfmt.Fprintf(w, \"Form[%q] = %q\\n\", k, v)\n}\n}\nThisu sest he ﬁelds oft he http.Requestst ruc tto pro duce out put liket his:\nGET /?q=query HTTP/1.1\nHeader[\"Accept-Encoding\"] = [\"gzip, deflate, sdch\"]\nHeader[\"Accept-Language\"] = [\"en-US,en;q=0.8\"]\nHeader[\"Connection\"] = [\"keep-alive\"]\nHeader[\"Accept\"] = [\"text/html,application/xhtml+xml,application/xml;...\"]\nHeader[\"User-Agent\"] = [\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5)...\"]\nHost = \"localhost:8000\"\nRemoteAddr = \"127.0.0.1:59911\"\nForm[\"q\"] = [\"query\"]\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 39,
      "page_label": "21"
    }
  },
  {
    "page_content": "ptg16105617\n22 CHAPTER 1. TUTORIAL\nNo tice how the cal lto ParseForm is neste dwithin an if st atement.G oa llowsas imples tate-\nment sucha sal ocal var iabled eclarat iont op re cedet he if condit ion,w hichi sp ar tic ularly\nus efulf or error handling as in thise xample. W ec ou ldh avew ritt eni ta s\nerr := r.ParseForm()\nif err != nil {\nlog.Print(err)\n}\nbutc om biningt he statementsi ss horter andr educes the scope oft he var iableerr,w hichi s\ngo o dprac tice.W e’ll deﬁne scope inS ec tion 2.7.\nIn these programs, we’ve seent hree ver y dif ferentt yp esus eda so ut put streams.T he fetch\nprog ram copied H TTPr espons e data t o os.Stdout,aﬁle ,a sd id t he lissajous prog ram.\nThe fetchall prog ramthre wther espons eaway (whi le counting its lengt h) by copying itt o\nthet rivials in kioutil.Discard.A nd the web ser ver abov eus ed fmt.Fprintf to write to an\nhttp.ResponseWriterrepres enting the web brows er.\nAlthough t hese t hree t yp es dif fer in the d et ails o fw hatt he y do,t he y al l satisf y ac ommon\ninterface,a llow ing any oft hemt ob eu sedw here ver an o ut put streami sn eeded.T hati nt er-\nface,c al le dio.Writer,i sd is cussed in Sec tion 7.1.\nGo’si nt erface mechanism ist he topic ofC hapt er7 ,b ut tog ivea ni de aof whati t’sc ap able of,\nlet’ss ee h ow easy iti st oc om bine the w eb s er ver wit hthe lissajous func tions ot hata ni-\nmate d GIFs arew ritt enn ot tot he s tand ard out put,b ut tot he H TTPc lient. J usta dd t hese",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 40,
      "page_label": "22"
    }
  },
  {
    "page_content": "mate d GIFs arew ritt enn ot tot he s tand ard out put,b ut tot he H TTPc lient. J usta dd t hese\nlines tot he web ser ver :\nhandler := func(w http.ResponseWriter, r *http.Request) {\nlissajous(w)\n}\nhttp.HandleFunc(\"/\", handler)\nor equivalently:\nhttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\nlissajous(w)\n})\nThes econ dargumentt ot he HandleFunc func tionc al l immediate lya bove isafu nc tionl it era l,\nthat is, an an onymou s func tiond eﬁne d at its p oint o fu se.W ew ill e xplain i tf ur theri n\nSection5 .6.\nOnce you’ve made thisc hange ,visit http://localhost:8000in yourb rows er.E acht imey ou\nlo adthep age, you’ll see a new animat ionl iket he one inF igure1 .3.\nExercis e 1.12:Mo dif ytheL issajous ser ver tor eadp arameter values fro mtheU RL. F or exam-\nple, you mig hta rrange its ot hataU RL li ke http://localhost:8000/?cycles=20 sets t he\nnumb ero fc yc les to 20 ins teado ft he defau lt5 .U se the strconv.Atoifunc tiont oc onvert the\nst ringp arameter into ani nt eger. You can see its document ation wit hgo doc strconv.Atoi.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 40,
      "page_label": "22"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.8. LOOSE ENDS 23\nFigure 1.3. Animated Lissajous ﬁgures in a brows er.\n1.8. Loose Ends\nTherei sal ot moret oG ot hanw e’ve cov ere din thisq uicki nt roduc tion. Herea re som etopics\nwe’ve barelyt ouch edu pono ro mitt ede nt ire ly, wit hju ste noug h discussiont hatt he ywi l lbe\nfami liar whent he ymake brief appearances beforet he full treatment.\nContro lﬂow : We cov ere dthet wo fundament alc ontrol-ﬂow statements, if and for,b ut not\nthe switchst atement,w hichi sam ulti-way branch.H ere’sas mall example:\nswitch coinflip() {\ncase \"heads\":\nheads++\ncase \"tails\":\ntails++\ndefault:\nfmt.Println(\"landed on edge!\")\n}\nTher esulto fc al lingcoinflipis compare dto the value ofe achc as e.C as es aree valuate dfrom\ntopt ob ot tom,s ot he ﬁrs tmatchingo ne ise xe cut ed. T he opt ion ald efau ltc as ematch esi fn on e\nof the other cas es do es;it may bep lace d anywhere . Casesd on ot fal lthro ugh fro mon eto the\nnext as in C-li ke langu ages (thoug htherei sar arelyu sed fallthrough st atement thato ver-\nrides thisb eh avior).\nA switch do es notn eed a no perand; i tc an j ustl istt he c as es, each o fw hichi sab oole an\nexpression:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 41,
      "page_label": "23"
    }
  },
  {
    "page_content": "ptg16105617\n24 CHAPTER 1. TUTORIAL\nfunc Signum(x int) int {\nswitch {\ncase x > 0:\nreturn +1\ndefault:\nreturn 0\ncase x < 0:\nreturn -1\n}\n}\nThisf or mis cal le d ataglesss witch;i t’se quivalentt o switch true.\nLike the for and if st atements, a switch mayi nclude an opt ion als imples tatement—as hort\nvar iable decl arat ion, an incremento ra ssig nments tatement,o raf unctionc al l—th at can be\nus edt os et a value beforei ti st este d.\nThe break and continue st atementsm odif y theﬂ ow ofc ontrol . A break caus esc ontrol to\nresume att he next statement after t he inner mostfor, switch,o r select st atement (which\nwe’ll see l ater), anda sw es aw in S ec tion 1.3, a continue caus est he i nner mostfor lo opt o\nst art its next i terat ion. Statementsm ay b el ab ele dso t hat break and continue canr efer to\nthem, for ins tance tob re ako ut of several neste dlo ops at onceo rt os tart the next iterat iono f\ntheo ut ermostl oop. T here ise vena goto st atement,t houg hit’si nt ended for machine-gener-\nated code, not regu lar use byp rogrammers.\nNa med types: A type de clarat ionm akes itp ossiblet og iveana me toa ne xist ing typ e.S ince\nst ruc ttypesa re often long ,they are nearlya lways named.A fami liar examplei st he deﬁnition\nof a Pointtype for a 2-D graphics system:\ntype Point struct {\nX, Y int\n}\nvar p Point\nType declarat ions and named typ es arec ov ere din Chapt er2 .\nPo int ers: Go provides point ers,t hati s, values t hatc ontain the addresso fav ar iable.I ns om e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 42,
      "page_label": "24"
    }
  },
  {
    "page_content": "Po int ers: Go provides point ers,t hati s, values t hatc ontain the addresso fav ar iable.I ns om e\nlanguages, not ably C,p oint ers are relative lyu ncon strained.I no ther langu ages, point e rs are\ndisguiseda s ‘‘references,’’andt here’sn ot mucht hatc an bed on ewith them exceptp asst hem\naround.G ot akes a posi tion som ewherei nt he midd le.P oint ers are explicitlyv isible.T he &\nop erator y ieldst he a ddresso fav ar iable,a nd the * op erator r et rie ves the v ar iable thatt he\npointerr eferst o, but there isn op oint era rithmetic. We’ll explain point ers inS ec tion 2.3.2.\nMe thods and inte rfa ces: Am et hod isaf unctiona ss oci ated wit han amed typ e;Go isu nu sual\nin thatm et hodsm ay bea tt ach edt oa lmosta ny named typ e.M et hodsa re cov ere din Chap-\nter6 .I nt erfaces area bstrac t typest hatl et ust re atd if ferentc on crete typ es in the s amew ay\nbasedo nw hatm et hodst he yhave ,noth ow the yarer epresent edo ri mp lemente d. Interfaces\naret he subjec tof Chapt er7 .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 42,
      "page_label": "24"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 1.8. LOOSE ENDS 25\nPa ckage s:Go com esw it han extensive stand ard librar yof usefulp ackages, andt he Goc om-\nmunity has create dands hare dmany more. P rogrammingi so ften morea bout usinge xist ing\npackages thana bout writing originalc odeo fo ne’so wn.T hroughoutt he book, wew ill point\noutac oupleo fd ozen oft he most imp ortants tand ard packages, but there are manym orew e\ndon’th aves pace tom ention,a nd wec annot provide anyt hingr emot ely likeac ompleter efer-\nence for any package.\nBefore you emb ark ona ny new program, it’sag ood ide ato see ifp ackages already exist that\nmig hth elpy ou get yourj ob don emore easi ly. You can ﬁnd a ni ndex oft he stand ard librar y\npackages at https://golang.org/pkg andt he p ackages co nt ribut edb yt he c ommunity a t\nhttps://godoc.org.T he go doc to olm akes t hese d ocuments easi lya ccessiblef ro m the\ncommandl ine:\n$g od oc http.ListenAndServe\npackage http // import \"net/http\"\nfunc ListenAndServe(addr string, handler Handler) error\nListenAndServe listens on the TCP network address addr and then\ncalls Serve with handler to handle requests on incoming connections.\n...\nComm ents: We h avea lready m ention edd ocumentation comme ntsa tt he b eg inningo fa\nprog ram or p ackage. I t’sa ls o go o dst yle t ow rite a c omment beforet he d eclarat iono fe ach\nfunc tiont os pecif y itsb eh avior.T hese convent ion sarei mp ortant, because the yareu sedb y",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 43,
      "page_label": "25"
    }
  },
  {
    "page_content": "func tiont os pecif y itsb eh avior.T hese convent ion sarei mp ortant, because the yareu sedb y\nto ols like go docand godocto locatea nd displ ayd ocumentation (§10.7.4).\nFo rcomments thats panm ultiplel ines ora pp ear wit hin an exp ressiono rs tatement,t here is\nalso t he /* ... */notation f ami liar fro m ot her langu ages. Suc hc ommentsa re s om etimes\nus eda tt he beg inningo faﬁle f or a large blo cko fe xplanatory text toa void a // on every line.\nWi thin a comment, //and /*have nos peci alme aning, soc omments do not nest.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 43,
      "page_label": "25"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 44,
      "page_label": "26"
    }
  },
  {
    "page_content": "ptg16105617\n2\nProgramS tructure\nIn Go, asi na ny other programmingl angu age, one bui ldsl arge programsf ro mas mall set of\nbasic co ns tructs. Var iables s tore v alues. Sim plee xpressions a re c om bine d into l argero nes\nwith o perat ions l ikea ddition and subtrac tion. Basic typ es ar ec ol lec ted int oag gregates li ke\nar rays ands tr ucts. Exp ressions are usedi ns tatementsw hose exe cut ion order isd eter mined\nby c ontrol-ﬂow s tatementsl ike if and for.S tatementsa re gro upedi nt o func tions f or\nis olation and reuse.F unctions are gat hered int osource ﬁles andp ackages.\nWe saw examples ofm osto ft hese int he pre vious chapt er. I nt hisc hapt er, we’ll goi nt omore\ndet aila bout the basic str uctural elements ofaG op rogram. Th ee xamplep rogramsa re int en-\ntion allys imple, sow ec an focus ont he langu agew it houtg etting sidet racke dby complic ated\nalgor it hms ord at ast ruc tures.\n2.1. Names\nThen ames ofG of unctions,v ar iables, cons tants, typ es,st atement lab els,a nd packages fol low a\nsimpler ule: a nam eb eg insw it hal etter( that is, anyt hingt hatU nico de de emsa l etter) ora n\nunderscorea nd may havea ny numbero fa ddition all etters,d ig its, andu nderscores. Cas e mat-\nters: heapSortand Heapsortared if ferentn ames.\nGo has 25 ke yword sli keif and switch that may beu sedo nlyw here the syntaxp er mits; the y\ncan’tb eu sed as names.\nbreak default func interface select\ncase defer go map struct\nchan else goto package switch",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 45,
      "page_label": "27"
    }
  },
  {
    "page_content": "can’tb eu sed as names.\nbreak default func interface select\ncase defer go map struct\nchan else goto package switch\nconst fallthrough if range type\ncontinue for import return var\n27\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 45,
      "page_label": "27"
    }
  },
  {
    "page_content": "ptg16105617\n28 CHAPTER 2. PROGRAM STRUCTURE\nIn addition,t here are about three dozen pred eclare dnamesl ike int and true forb ui lt-in con-\nst ants, typ es, andf unctions:\nCons tants: true false iota nil\nTypes: int int8 int16 int32 int64\nuint uint8 uint16 uint32 uint64 uintptr\nfloat32 float64 complex128 complex64\nbool byte rune string error\nFunc tions: make len cap new append copy close delete\ncomplex real imag\npanic recover\nThes enamesa re not res erve d,s oy ou may use t hemi nd eclarat ions.W e’ll see a h andf ulo f\npl aces where rede claring one oft hemm akes sense,b ut bewareo ft he pot ent ial for confusion.\nIf ane nt ity isd eclare dwithin a fun ction, iti s local to thatf unction. I fd eclare doutside ofa\nfunc tion, how ever, iti sv isible in all ﬁles o ft he packaget ow hichi tb elon gs. Th ec as eof the\nﬁrs t lettero fan amed eter mines its visibilit yacrossp ackageb ound aries. I ft he nameb eg ins\nwith anu pp er-case letter, iti s expor ted,w hichm eans thati ti sv isible anda ccessibleo utside of\nitso wn packagea nd may ber efer red tob yo ther par ts of the program, as w it hPrintf in the\nfmtpackage. P ackagen ames thems elves area lways in lowerc as e.\nTherei sn ol imito nn amel engt h,butc onvent ion and sty lei nG op rogramsl eant owards hort\nnames, especi ally for local variables wit hsmal lscop es; you are muchm orel ikelyt os ee var i-\nables named i than theLoopIndex.G eneral ly, the largert he scope ofan ame, the lon g era nd",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 46,
      "page_label": "28"
    }
  },
  {
    "page_content": "ables named i than theLoopIndex.G eneral ly, the largert he scope ofan ame, the lon g era nd\nmore meaningf ulit shouldb e.\nSt ylist ically, Gop rogrammersu se ‘‘camel cas e’’when for mingn ames byc om biningw ords;t hat\nis,i nt erior c apit all etters are preferred overi nt erior underscores. Th us the stand ard librar ies\nhave f unctions w it h namesl ike QuoteRuneToASCII and parseRequestLine butn ever\nquote_rune_to_ASCII or parse_request_line.T he letters ofa cronymsa nd initialismsl ike\nASCII andH TMLa re always rendered int he samec as e,s oaf unctionm ig htb ec al le dhtml-\nEscape, HTMLEscape,o r escapeHTML,b ut not escapeHtml.\n2.2. Declarations\nA decl arati on namesap rogram entity a nd s peciﬁes s om e or all o fi ts pro per ties. Ther ea re\nfour maj ork inds ofd eclarat ions: var, const, type,a nd func.W e’ll tal k ab out var iables and\ntypes in thisc hapt er, con stants in Chapt er 3, and functions inC hapt er5 .\nAG op rogram iss tore din one orm oreﬁ les whose names endi n .go.E ach ﬁle beg insw it ha\npackage de clarat iont hats ays w hatp ackaget he ﬁle i sp ar t of . The package de clarat ioni s\nfo llowe d by a ny import de clarat ions,a nd the nas equence of pack age-level de clarat ions o f\ntypes, variables, cons tants, andf unctions,i na ny order.F or example, thisp rogram decl aresa\ncons tant, a function, andac oupleo fv ar iables:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 46,
      "page_label": "28"
    }
  },
  {
    "page_content": "The Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 46,
      "page_label": "28"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.2. DECLARATIONS 29\ngopl.io/ch2/boiling\n// Boiling prints the boiling point of water.\npackage main\nimport \"fmt\"\nconst boilingF = 212.0\nfunc main() {\nvar f = boilingF\nvar c = (f - 32) * 5 / 9\nfmt.Printf(\"boiling point = %g°F or %g°C\\n\", f, c)\n// Output:\n// boiling point = 212°F or 100°C\n}\nThec on stant boilingF is a package-le vel declarat ion( as is main), where ast he var iablesf and\nc arel ocal t ot he f unction main.T he n ameo fe achp ackage-le vel e nt ity i sv isible n ot o nly\nthro ughoutt he sourceﬁ le thatc ontainsi ts decl arat ion, but throughouta ll the ﬁles oft he pack-\nage. B yc ontrast, lo cald eclarat ions a re v isible o nlyw it hin t he f unctioni nw hicht he y are\nde clare dandp erhaps onlyw it hin a smal lpart ofi t.\nAf unctiond eclarat ionh as a nam e, a l isto fp arameters( thev ar iables whose v alues are\nprov ide d by t he f unction’sc al lers), an opt ion all isto fr esults, an dt he f unctionb ody, which\ncont ainst he s tatementst hatd eﬁne w hatt he f unctiond oes. Th er esultl isti so mitt edi ft he\nfunc tiond oesn ot retur n anyt hing. E xe cut ion of the functionb eg insw it htheﬁ rs tst atement\nandc ontinues until ite ncount ers a retur nst atement orr each est he end ofaf unctiont hath as\nno results. C ontrol and any results aret henr etur ned tot he cal ler.\nWe’ve seenaf air numbero ff unctions already and there are l otsm oret oc om e,i ncludinga n",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 47,
      "page_label": "29"
    }
  },
  {
    "page_content": "We’ve seenaf air numbero ff unctions already and there are l otsm oret oc om e,i ncludinga n\nextensive dis cussioni nC hapt er5 ,s ot hisi so nlyas ketch.T he function fToC belowe nc apsu-\nlatest he temperaturec onversionl og icso t hati ti sd eﬁne d on lyo nceb ut may b eu sedf ro m\nmu ltiplep laces. Here maincallsi tt wice,u singt he values oft wo dif ferentl ocal cons tants:\ngopl.io/ch2/ftoc\n// Ftoc prints two Fahrenheit-to-Celsius conversions.\npackage main\nimport \"fmt\"\nfunc main() {\nconst freezingF, boilingF = 32.0, 212.0\nfmt.Printf(\"%g°F = %g°C\\n\", freezingF, fToC(freezingF)) // \"32°F = 0°C\"\nfmt.Printf(\"%g°F = %g°C\\n\", boilingF, fToC(boilingF)) // \"212°F = 100°C\"\n}\nfunc fToC(f float64) float64 {\nreturn (f - 32) * 5 / 9\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 47,
      "page_label": "29"
    }
  },
  {
    "page_content": "ptg16105617\n30 CHAPTER 2. PROGRAM STRUCTURE\n2.3. Variables\nA var de clarat ionc re atesav ar iable ofap ar tic ulart yp e,a tt ach esan amet oi t, ands ets its ini-\ntial value.E achd eclarat ionh as the general for m\nvar name type = expression\nEither the typ eor the = expression part may beo mitt ed, but not bot h.I ft he typ eis omitt ed,\nit isd eter mined byt he initializer expression. I ft he expressioni so mitt ed, the initial value is\nthe zero value fort he typ e,w hichi s 0forn umbers, false forb oole ans,\"\"fors tr ings, and nil\nfori nt erfaces andr eference typ es (slice,p oint er, map,c hannel,f unction). Th ez erov alue ofa n\nag gregatet yp e li ke an array oras tr uct has the zerov alue ofa ll ofi ts elements or ﬁelds.\nThez ero-value mechanism ensurest hatav ar iable always holds a wel l-deﬁne dvalue ofi ts typ e;\nin G ot here i sn os ucht hinga sa nu ninitialize d var iable.T hiss impliﬁes code an do ften\nensuress ensibleb eh avior of bound ary con dit ion swithoute xt rawork.F or example,\nvar s string\nfmt.Println(s) // \"\"\npr intsa ne mp tys tr ing ,rat her thanc ausings om ekind ofe rror or unp redic table beh avior.G o\nprog rammerso ften g ot os om e ef for t to m aket he z erov alue o fam orec omplic ated t yp e\nme aningf ul,s ot hatv ar iables beg in life in a usefuls tate.\nIt isp ossiblet od eclare and opt ion allyi nitialize a set ofv ar iables in a singled eclarat ion, wit ha",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 48,
      "page_label": "30"
    }
  },
  {
    "page_content": "It isp ossiblet od eclare and opt ion allyi nitialize a set ofv ar iables in a singled eclarat ion, wit ha\nmatchingl isto fe xpressions.O mitt ing the typ e al lows decl arat iono fm ultiplev ar iables ofd if-\nferent typ es:\nvar i, j, k int // int, int, int\nvar b, f, s = true, 2.3, \"four\" // bool, float64, string\nInit ializersm ay b el it eral values o ra rbit rar y expressions.P ackage-le vel var iables arei nitial-\nize d before main begins ( §2.6.2), an dl ocal var iables ar ei nitialize d as their de cl arat ions a re\nencountere dduring functione xe cut ion.\nAs et ofv ar iables can also bei nitialize dby cal lingaf unctiont hatr etur nsm ultiplev alues:\nvar f, err = os.Open(name) // os.Open returns a file and an error\n2.3.1. Short Variable Declarations\nWi thin a function, an alternatef or mcalled a sh ort var iab led eclarati on mayb eu sedt od eclare\nandi nitialize localv ar iables. Itt akes the for mname := expression,a nd the t yp eof name is\ndeter mined byt he typ eof expression.H erea re three oft he manys hort var iable decl arat ions\nin the lissajousfunc tion( §1.4):\nanim := gif.GIF{LoopCount: nframes}\nfreq := rand.Float64() * 3.0\nt: =0.0\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 48,
      "page_label": "30"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.3. VARIABLES 31\nBecaus eof their bre vit yand ﬂexibi lit y,s hort var iable decl arat ions are usedt od eclare and ini-\ntialize the maj ority ofl ocal variables. A varde clarat iont ends tob er es erve dforl ocal variables\nthat need ane xplicitt yp ethat differs fro mthat oft he initializer expression, orf or whent he\nvar iable will bea ssig ned a value later andi ts initial value isu nimportant.\ni: =1 00 // an int\nvar boiling float64 = 100 // a float64\nvar names []string\nvar err error\nvar p Point\nAs wit hvar de clarat ions,m ultiplev ar iables may bed eclare dandi nitialize d in the sames hort\nvar iable decl arat ion,\ni, j := 0, 1\nbutd eclarat ions wit hmu ltiplei nitializer expressions shouldb eu sedo nlyw hent he y helpr ead-\nabilit y,s uch as for short and natural gro upingsl iket he initializat ionp ar tof a forlo op.\nKe epi nm indt hat := is a d eclarat ion, where as = is ana ssig nment. A mu lti-var iable decl ara-\ntion shouldn ot bec onfusedw it ha tupl eassig nment (§2.4.1), in whic he achv ar iable ont he\nlef t-hands ide isa ssig ned the cor respondingv alue fro mther ig ht-hands ide:\ni, j = j, i // swap values of i and j\nLike ordinar yvar de clarat ions,s hort var iable decl arat ions may beu sedf or cal lst of unctions\nli keos.Openthat retur ntwoo rm orev alues:\nf, err := os.Open(name)\nif err != nil {\nreturn err\n}\n// ...use f...\nf.Close()\nOnes ubtleb ut imp ortantp oint:as hort var iable decl arat iond oesn ot necessarily decl are al lthe",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 49,
      "page_label": "31"
    }
  },
  {
    "page_content": "return err\n}\n// ...use f...\nf.Close()\nOnes ubtleb ut imp ortantp oint:as hort var iable decl arat iond oesn ot necessarily decl are al lthe\nvar iables oni ts left-hands ide.I fs om e of themw erea lready declare din the same lexic alblock\n(§2.7), t hent he short var iable decl arat iona ctsl ikea n assig n ment to those var iables.\nIn the codeb elow,t he ﬁrs tst atement declaresb ot hin and err.T he secon dde clares out but\non lya ssig nsav alue tot he exist ing errvar iable.\nin, err := os.Open(infile)\n// ...\nout, err := os.Create(outfile)\nAs hort var iable decl arat ionm ustd eclare atl east one newv ar iable,h ow ever, sot hisc odew ill\nnotc ompi le:\nf, err := os.Open(infile)\n// ...\nf, err := os.Create(outfile) // compile error: no new variables\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 49,
      "page_label": "31"
    }
  },
  {
    "page_content": "ptg16105617\n32 CHAPTER 2. PROGRAM STRUCTURE\nThe ﬁxi st ou se ano rdinar y assig nmentf or the secon dst atement.\nAs hort v ar iable decl arat iona ctsl ikea na ssig nmento nlyt ov ar iables thatw erea lready\nde clare din the samel exic alblock; decl arat ions ina no ut erb lo cka re ignored.W e’ll see exam-\nples oft his at the end oft he chapt er.\n2.3.2. Poin ters\nA variab le is a pie ceof storagec ontainingav alue.V ar iables create dby declarat ions are iden-\ntiﬁed byan ame, sucha s x,b ut manyv ar iables arei dentiﬁed onlyb ye xpressions like x[i] or\nx.f.A ll these expressions readt he value ofav ar iable,e xceptw hent he yappear ont he lef t-\nhand side of an assig nment, in whichc as ean ew value isa ssig ned tot he var iable.\nA pointer value ist he ad dre ss of a v ar iable.A pointeri st hu sthel ocat iona tw hichav alue is\nstored.N ot every value has an address, b ut every var iable does. Wit hap oint er, wec an read\nor update the value ofav ar iable in direc tly,w it houtu singo re venk nowing the nameo ft he\nvar iable, if indeed ith as a name.\nIf a v ar iable isd eclare dvar x int,t he e xpression &x (‘‘addresso f x’’)y ieldsap oint ert oa n\nintegerv ar iable,t hati s, a value o ft yp e *int,w hichi sp ro nounced ‘‘pointert oi nt.’’If t his\nvalue isc al le dp,w es ay ‘‘ppoints to x,’’or equivalently ‘‘pcont ainst he addresso f x.’’Thev ar i-\nable tow hich p points isw ritt en *p.T he expression *p yields t he value oft hatv ar iable,a n",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 50,
      "page_label": "32"
    }
  },
  {
    "page_content": "able tow hich p points isw ritt en *p.T he expression *p yields t he value oft hatv ar iable,a n\nint,b ut since *pdenot esav ar iable,i tm ay also app ear ont he lef t-hands ide ofa na ssig nment,\nin whichc as ethea ssig nmentu pdates the var iable.\nx: =1\np: =& x/ /p ,o ft ype *int, points to x\nfmt.Println(*p) // \"1\"\n*p = 2// equivalent to x = 2\nfmt.Println(x) // \"2\"\nEach component ofav ar iable ofa ggregatet yp e—a ﬁel do fas tr uct ora ne lemento fa na rray—\nis als oav ar iable andt hu shas an addresst oo.\nVariables ares om etimesd es crib eda s ad dre ssabl evalues. Exp ressions thatd enot evar iables are\ntheo nlye xpressions tow hicht he ad dre ss-of op erator &mayb ea pp lie d.\nThez erov alue for a point ero fa ny typ eis nil.T he test p! =nil is truei f p points toav ar i-\nable.P oint ers a re c omparable; t wo p oint ers a re e qu ali fa nd o nlyi ft he y pointt ot he s ame\nvar iable orb ot haren il.\nvar x, y int\nfmt.Println(&x == &x, &x == &y, &x == nil) // \"true false false\"\nIt isp er fec tly safef or a functiont or etur nthea ddresso fal ocal variable. F or ins tance,i nt he\nco debelow, the local variable vcreate dby thisp ar tic ularc al lto fwi l lremain in existence even\naf ter the cal lhasr etur ned,a nd the point er pwi l lst i l lrefert oi t:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 50,
      "page_label": "32"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.3. VARIABLES 33\nvar p = f()\nfunc f() *int {\nv: =1\nreturn &v\n}\nEach cal lof freturnsad istinc tvalue:\nfmt.Println(f() == f()) // \"false\"\nBecaus eap oint erc ontainst he addresso fav ar iable,p assingap oint era rgumentt oaf unction\nmakesi tp ossiblef or the functiont ou pdatet he var iable thatw as indirec tly passed. F or exam-\nple, t hisf unctioni ncrementst he v ar iable thati ts argumen tp ointst oa nd r etur nst he ne w\nvalue oft he var iable soi tm ay beu sed in an expression:\nfunc incr(p *int) int {\n*p++ // increments what p points to; does not change p\nreturn *p\n}\nv: =1\nincr(&v) // side effect: v is now 2\nfmt.Println(incr(&v)) // \"3\" (and v is 3)\nEach timew et aket he addresso fav ar iable orc opyap oint er, wec re ate new aliases or ways to\nidentify the samev ar iable.F or example, *p is ana li asfor v.P oint era li asingi su sefulb ecause\nit allowsu st oa ccessav ar iable wit houtu singi ts name, but thisi sad ou ble-e dged sword:t o\nﬁnd all the statementst hata ccessav ar iable,w eh avet ok nowa ll its alias es. It’sn ot justp oint-\nerst hatc re ate ali ases; aliasinga ls ooccurs whenw ec opyv alues ofo ther reference typ es li ke\nslices, maps, andc hannel s,a nd evens tr ucts, arrays, andi nt erfaces thatc ontain these typ es.\nPo int ers are key tot he flag package, whichu sesap rogram’sc ommand-linea rguments tos et\nthev alues ofc er tain variables dist ribut edt hroughoutt he program. T oi llustrate, thisv ar iat ion",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 51,
      "page_label": "33"
    }
  },
  {
    "page_content": "thev alues ofc er tain variables dist ribut edt hroughoutt he program. T oi llustrate, thisv ar iat ion\non t he e arlier echo commandt akes t wo o pt ion al ﬂags: -n caus es echo to o mitt he t rai ling\nne wlinet hatw ou ldn or mal lyb ep rint ed, a nd -s sepcaus esi tt os ep aratet he o ut put argu-\nmentsb yt he contentso ft he str ing sep insteado ft he defau lts ingles pace.S ince thisi so ur\nfour thv ersion, the packagei sc al le dgopl.io/ch2/echo4.\ngopl.io/ch2/echo4\n// Echo4 prints its command-line arguments.\npackage main\nimport (\n\"flag\"\n\"fmt\"\n\"strings\"\n)\nvar n = flag.Bool(\"n\", false, \"omit trailing newline\")\nvar sep = flag.String(\"s\", \" \", \"separator\")\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 51,
      "page_label": "33"
    }
  },
  {
    "page_content": "ptg16105617\n34 CHAPTER 2. PROGRAM STRUCTURE\nfunc main() {\nflag.Parse()\nfmt.Print(strings.Join(flag.Args(), *sep))\nif !*n {\nfmt.Println()\n}\n}\nThef unction flag.Boolcreatesan ew ﬂag variableo ft yp ebool.I tt akes three arguments: the\nname oft he ﬂag (\"n\"), the var iable’sd efau ltv alue (false), andam essage thatw ill bep rint ed\nif t he u serp rovides an invalid argument, an invalid ﬂag , or -h or -help.S imi larly,\nflag.Stringtakesan ame, a defau ltv alue,a nd a mess age ,andc re atesa stringvar iable.T he\nvar iables sep and n arep oint ers to t he ﬂag var iables, whic hm ustb ea ccessedi ndirec tly a s\n*sepand *n.\nWh ent he program isr un, itm ustc al lflag.Parse before the ﬂags areu sed, to updatet he ﬂag\nvar iables fro mtheir default values. Th en on-ﬂag arguments ar ea vai lable fro mflag.Args()\nas a slice o fs tr ings. If flag.Parse encounters ane rror,i tp rintsau sage message and c al ls\nos.Exit(2)to terminatet he program.\nLet’sr un som etest cas eson echo:\n$g ob uild gopl.io/ch2/echo4\n$. /echo4 a bc def\nab cd ef\n$. /echo4 -s / a bc def\na/bc/def\n$./echo4 -n a bc def\nab cd ef$\n$. /echo4 -help\nUsage of ./echo4:\n-n omit trailing newline\n-s string\nseparator (default \" \")\n2.3.3. The newFunction\nAnot her way t oc re ate a v ar iable ist ou se the bui lt-in function new.T he expression new(T)\ncreatesa n unname d variab le of t yp e T,i nitializes i tt ot he z erov alue of T,a nd r etur nsi ts\naddress, whichi sav alue oft yp e*T.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 52,
      "page_label": "34"
    }
  },
  {
    "page_content": "createsa n unname d variab le of t yp e T,i nitializes i tt ot he z erov alue of T,a nd r etur nsi ts\naddress, whichi sav alue oft yp e*T.\np: =n ew(int) // p, of type *int, points to an unnamed int variable\nfmt.Println(*p) // \"0\"\n*p = 2// sets the unnamed int to 2\nfmt.Println(*p) // \"2\"\nAv ar iable create dwith new is nod if ferentf ro man ordinar y lo cal variablew hose addressi s\ntaken, excep tt hatt here’sn on eed t oi nv ent ( andd eclare)ad ummyn ame, a nd w ec an u se\nnew(T) in an expression. Th us newis onlyas yntactic conv enience,n ot a fundament aln ot ion:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 52,
      "page_label": "34"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.3. VARIABLES 35\nthet wo newIntfunc tions below havei denticalb eh avior s.\nfunc newInt() *int { func newInt() *int {\nreturn new(int) var dummy int\n}r eturn &dummy\n}\nEach cal lto newreturnsad istinc tvar iable wit hau nique address:\np: =n ew(int)\nq: =n ew(int)\nfmt.Println(p == q) // \"false\"\nTherei so ne e xception tot hisr ule: t wo v ar iables whose t yp e carries n oi nfor mat iona nd i s\nthereforeo fs ize zero, sucha s struct{} or [0]int,m ay,d ep endingo nt he imp lementation,\nhave the samea ddress.\nThe new func tioni sr el ative lyr arelyu sedb ecause the most commonu nnamed var iables areo f\nst ruc ttypes, for whicht he str uct lit eral synt ax( §4.4.1) i sm ore ﬂexible.\nSince new is a p re declare d func tion, n ot a k ey word, i t’sp ossiblet or edeﬁne the n amef or\nsomethinge ls ewithin a function, for example:\nfunc delta(old, new int) int { return new - old }\nOf course,w it hin delta,t he bui lt-innewfunc tioni su navai lable.\n2.3.4. Lif etime ofV ariables\nThe li fetim eof a var iable ist he int erval oft imed ur ingw hichi te xistsa st he program exec utes.\nThel ifet imeo fap ackage-le vel var iable ist he ent ire exe cut ion of the program. B yc ontrast,\nlo cal variables hav ed ynamic lifet imes: a n ew i ns tance i sc re ate d each t imet he d eclarat ion\nst atement ise xe cut ed, and the var iable liveso nu nt i lit becom es unre ach abl e,a tw hichp oint its",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 53,
      "page_label": "35"
    }
  },
  {
    "page_content": "st atement ise xe cut ed, and the var iable liveso nu nt i lit becom es unre ach abl e,a tw hichp oint its\nstoragem ay ber ec ycled.F unctionp arametersa nd results arel ocal variables too;t he yarec re-\nated eacht imet heir enclosingf unctioni sc al le d.\nFo rexample, int hise xcer ptf ro mtheL issajous program ofS ec tion 1.4,\nfor t := 0.0; t < cycles*2*math.Pi; t += res {\nx: =m ath.Sin(t)\ny: =m ath.Sin(t*freq + phase)\nimg.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5),\nblackIndex)\n}\nthev ar iablet is cre ate deach timet he for lo opb eg ins, andn ew var iablesx and y arec re ate d\non eachi terat iono ft he loop.\nHo wdo estheg arb agec ol lec tor knowt hatav ar iable’ss toragec an ber eclaimed?T he full story\nis muchm ored et aile dthan wen eed here, but the basic ideai st hate very package-le vel var i-\nable,a nd every local variableo fe achc ur rentlya ctivef unction, can p ot ent ial lyb et he start or\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 53,
      "page_label": "35"
    }
  },
  {
    "page_content": "ptg16105617\n36 CHAPTER 2. PROGRAM STRUCTURE\nro oto fap at hto the var iable in question,f ol low ing point ers and other kinds ofr eferences that\nultimate lyl eadt ot he var iable.I fn os uchp at h exists, the var iable has becom eunreach able, so\nit can nol on g era ffec tther esto ft he computation.\nBecaus ethel ifet imeo fav ar iable isd eter mined onlyb yw hether orn ot iti sr each able, a local\nvar iable may out liveas inglei terat iono ft he enclosingl oop. I tm ay cont inuet oexist evena fter\nitse nclosingf unctionh as retur ned.\nAc ompi ler may cho ose toa llocatel ocal variables ont he heap oro nt he stack but,p erhaps sur-\npr isingly, thisc hoice isn ot deter mined byw hether varor newwas usedt od eclare the var iable.\nvar global *int\nfunc f() { func g() {\nvar x int y: =n ew(int)\nx=1 *y = 1\nglobal = &x }\n}\nHere ,x mu stb eh eap-al locate dbecaus eit iss till reach ablef ro mthev ar iableglobal af terf\nhasr etur ned,d espit ebeingd eclare das a lo calv ar iable; wes ay x es cap esf ro mf.C onvers ely,\nwhen g returns, the var iable*y becomesu nreach ablea nd can ber ec ycled.S ince *y do esnot\nes cap efrom g,i t’ss afef or the compi ler toa llocate *y on the stack,e vent houg hit was allo-\ncate dwith new.I na ny cas e,t he notion of e scapingi sn ot som ethingt haty ou need tow or ry\nab out ino rder t ow rite c or rec t co de,t houg h it’sg ood t ok eepi nm indd ur ingp er for mance",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 54,
      "page_label": "36"
    }
  },
  {
    "page_content": "ab out ino rder t ow rite c or rec t co de,t houg h it’sg ood t ok eepi nm indd ur ingp er for mance\nopt imizat ion, since eachv ar iable thate scap esre quires an extra memor yal location.\nGarb \nagec ol lec tion isat remendou shelpi nw riting cor rec tprog rams, but it d oesn ot relie ve\nyouo ft he burden oft hin kinga bout memor y.Y ou don’tn eed toe xplicitlya llocatea nd fre e\nmemory,b ut tow rite efﬁcientp rogramsy ou still need tob ea wareo ft he lifet imeo fv ar iables.\nFo r example, k eeping u nnecessary p oint ers to s hort-live d objec tsw it hin lo ng-live d objec ts,\nespeci ally globalv ar iables, will pre ventt he garb agec ol lec tor fro m re claimingt he short-live d\nobjec ts.\n2.4. Assignments\nThev alue heldb yav ar iable isu pdated bya na ssig nments tatement,w hichi ni ts simplestf or m\nhasav ar iable ont he lef tof the =sig n and an expressiono nt he rig ht.\nx=1 // named variable\n*p = true // indirect variable\nperson.name = \"bob\" // struct field\ncount[x] = count[x] * scale // array or slice or map element\nEach oft he arithmetica nd bit w ise binar yop erator shasac or responding assig nment operator\nal lowing ,fore xample, the lasts tatement tob er ewritt ena s\ncount[x] *= scale\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 54,
      "page_label": "36"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.4. ASSIGNMENT S3 7\nwhichs aves usf ro mhaving tor ep eat (andr e-e valuate)t he expressionf or the var iable.\nNumericv ar iables can also bei ncrement eda nd decrement edb y ++and --st atements:\nv: =1\nv++ // same as v = v + 1; v becomes 2\nv-- // same as v = v - 1; v becomes 1 again\n2.4.1. Tuple Assignment\nAnot her f or m of a ssig nment, known a s tupl e assig nment,a llowss everal var iables t ob e\nassig ned ato nce. A ll oft he rig ht-hands ide expressions are evaluate dbefore any oft he var i-\nables areu pdated,m ak ingt hisf or mmost usefulw hens om e of the var iables appear onb ot h\nsides oft he assig nment, as happens,f or example, whens wapping the values oft wo var iables:\nx, y = y, x\na[i], a[j] = a[j], a[i]\nor whenc omputing the gre atest commond iv isor( GCD) oft wo int egers:\nfunc gcd(x, y int) int {\nfor y != 0 {\nx, y = y, x%y\n}\nreturn x\n}\nor whenc omputing the n-t h Fibonacci numberi terat ive ly:\nfunc fib(n int) int {\nx, y := 0, 1\nfor i := 0; i < n; i++ {\nx, y = y, x+y\n}\nreturn x\n}\nTu ple assig nmentc an also makeas equence oft riviala ssig nments morec ompact,\ni, j, k = 2, 3, 5\nthough asam attero fs ty le, avoid the tup lef or mif the expressions are complex; a sequence of\nseparates tatementsi se asier tor ead.\nCertain expressions,s ucha sac al lto a f unctionw it hmu ltipler esults, pro duce several values.\nWh ens uchac al lis used ina na ssig nments tatement,t he lef t-hands ide musth avea sm any\nvar iables as the functionh as results.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 55,
      "page_label": "37"
    }
  },
  {
    "page_content": "Wh ens uchac al lis used ina na ssig nments tatement,t he lef t-hands ide musth avea sm any\nvar iables as the functionh as results.\nf, err = os.Open(\"foo.txt\") // function call returns two values\nOf ten, functions use these addition alr esults toi ndic ates om ekind ofe rror,e it her byr etur ning\nan error as in the cal lto os.Open,o ra bool,u su allyc al le dok.A sw e’ll see inl ater chapt ers,\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 55,
      "page_label": "37"
    }
  },
  {
    "page_content": "ptg16105617\n38 CHAPTER 2. PROGRAM STRUCTURE\ntherea re three operator sthat s om etimesb eh ave t hisw ay too.I fam ap lo okup (§4.3), typ e\nassertion( §7.10), o rc hannel receive (§8.4.2) ap pearsi na na ssig nmenti nw hicht wo results are\nexp ected,e achp ro duces an addition alb oole anresu lt:\nv, ok = m[key] // map lookup\nv, ok = x.(T) // type assertion\nv, ok = <-ch // channel receive\nAs wit hvar iable decl arat ions,w ec an assig n unwante dvalues tot he blank identiﬁer :\n_, err = io.Copy(dst, src) // discard byte count\n_, ok = x.(T) // check type but discard result\n2.4.2. Assignability\nAs sig nments tatementsa re a ne xplicitf or m of assig nment, but t here are m anyp laces in a\nprog ramwherea na ssig nmento cc ursimplicit ly:a f unctionc al l implicitlya ssig nst he argument\nvalues t ot he c or respondingp arameter var iables; a return st atement imp licitlya ssig nst he\nreturnop erands tot he cor respondingr esultv ar iables; andal it eral expressionf or a composite\ntype (§4.2) such as thi ss lice:\nmedals := []string{\"gold\", \"silver\", \"bronze\"}\nimplicitlya ssig nse ache lement, as if ith ad beenw ritt enl iket his:\nmedals[0] = \"gold\"\nmedals[1] = \"silver\"\nmedals[2] = \"bronze\"\nThee lements ofm aps andc hannel s,t houg hnoto rdinar y var iables, area ls osu bjec tto simi lar\nimplicita ssig nments.\nAn assig nment, explicito ri mp licit, isa lways legal if t he lef t-hands ide (the var iable) andt he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 56,
      "page_label": "38"
    }
  },
  {
    "page_content": "implicita ssig nments.\nAn assig nment, explicito ri mp licit, isa lways legal if t he lef t-hands ide (the var iable) andt he\nright-hands ide (the value) havet he samet yp e.M oreg eneral ly, the assig nmenti sl egal onlyi f\nthev alue is assig nab le to the typ eof the var iable.\nTher ulef or assig nab ility hasc as esforv ar ious typ es,so we’ll explain the relevantc as e as we\nintroduce eachn ew typ e.F or the typ eswe’ve dis cusseds of ar,t he rules ares imple: the typ es\nmu ste xac t ly match,a nd nil mayb ea ssig ned toa ny var iable ofi nt erface orr eference typ e.\nCons tants (§3.6) hav em ore ﬂexibler ules for assig nabilit ythat avoidt he need for moste xplicit\nconv ersions.\nWh ether two values may bec ompare dwith == and != is rel ate d to assig nabilit y:i na ny com-\nparison, the ﬁrs top erandm ustb ea ssig nable tot he typ eof the secon dop erand, orv ice versa.\nAs wit hassig nabilit y,w e’ll explain the relevantc as esfor comp arab ility when wep resent each\nne wtype.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 56,
      "page_label": "38"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.5. TYPE DECLARATIONS 39\n2.5. Type Declarations\nThet yp e of a v ar iable ore xpressiond eﬁnest he charac ter ist ics oft he values itm ay takeo n,\nsuch ast heir size (numbero fb itso rn umbero fe lements, perhaps), how the yarer epresent ed\ninternal ly, the int rinsic operat ions thatc an bep er for med ont hem, andt he methodsa ss oci-\nated wit hthem.\nIn any program there are var iables thats hare the samer epresent ation but sig nifyv er y dif fer-\nentc on cepts. F or ins tance,a n int couldb eu sedt or epresent a loopi ndex, a timestamp,aﬁle\ndes crip tor,o ram onth;a float64couldr epresent a velocit yin metersp er secon d or a temper-\naturei no ne ofs everal scales; anda string couldr epresent a passwordo rt he nameo fac olor.\nA type de clarat iond eﬁnesan ew name dty pethat has the same un derly ing type as an exist ing\ntype.T he named typ eprov ides a way t os ep arated if ferenta nd perhaps incomp atibleu seso f\ntheu nderly ing typ eso thatt he ycan’tb em ixed unintent ion ally.\ntype name underlying-type\nType declarat ions mosto ften appear at packagel evel,w here the named typ eis visible through-\noutt he package, and ift he namei se xp orted (it startsw it han upp er-case letter), it’sa ccessible\nfrom other packages as wel l.\nTo illustratet yp e de clarat ions,l et’st ur nthed if ferentt emperatures cales into dif ferentt yp es:\ngopl.io/ch2/tempconv0\n// Package tempconv performs Celsius and Fahrenheit temperature computations.\npackage tempconv",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 57,
      "page_label": "39"
    }
  },
  {
    "page_content": "gopl.io/ch2/tempconv0\n// Package tempconv performs Celsius and Fahrenheit temperature computations.\npackage tempconv\nimport \"fmt\"\ntype Celsius float64\ntype Fahrenheit float64\nconst (\nAbsoluteZeroC Celsius = -273.15\nFreezingC Celsius =0\nBoilingC Celsius =1 00\n)\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\nThisp ackaged eﬁnest wo typ es,Celsius and Fahrenheit,f or the two units oft emperature.\nEv ent houg hboth havet he sameu nderly ing typ e,float64,t he yaren ot the samet yp e,s ot he y\ncannot bec ompare dor com bine din arit hmetice xpressions.D istinguishingt he typ esmakesi t\npossible toa void erro rsl ikei nadver tentlyc om biningt emperatures in the two dif ferents cales;\nan explicitt yp econv ersion li keCelsius(t) or Fahrenheit(t) is required toc onvert from a\nfloat64. Celsius(t) and Fahrenheit(t) arec onversions,n ot f unctionc al ls. Th ey d on’t\nch ange the value orr epresent ation ina ny way,b ut the ymake the change ofm eaninge xplicit.\nOn t he o ther han d, t he f unctions CToF and FToC conv ert b et weent he t wo s cales; t he y do\nreturn dif ferentv alues.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 57,
      "page_label": "39"
    }
  },
  {
    "page_content": "ptg16105617\n40 CH\nAPTER PROGRAM STRUCTURE2.\nFo \nr ever ytype T,t here \nisac or respondingc onversiono perat ionT(x) that \nconv ertst he value x\nt\no typ e T. A co\nnv ersion f\nro m o\nn e t\nype to a\nnother is al\nlow ed if b\not h h\nave the same un\nderly ing \nt\nype, o\nr i\nf b\not h ar\ne u\nnnamed point er t\nyp es t\nhat point to v\nar iables of t\nhe same u\nnderly ing typ e;\nthes e co\nnv ersions change the typ e b\nut n\not the represent ation of the value. I\nf x i\ns assig nable to\nT, a co\nnversion i\ns p\ner mitt ed b\nut is u\nsu ally r\nedundant.\nConv ersions are als o al \nlowe d b\netween n\numer ic t\nypes, and b\net ween s\ntr ing and som e s\nlice typ es, \nas\n  w\ne w\nill  s\nee  i\nn t\nhe  n\next  c\nhapt er.  T\nhese  c\nonversions  m\nay  c\nhange  t\nhe  r\nepresent ation  o\nf  t\nhe \nval\nue. F\nor  in\ns tance, c\nonverting a ﬂo\nating-p oint n\number t\no a\nn i\nnt eger d\nis cards  an\ny  f\nrac tional\npart,a nd \nconvertingas tr ing toa []byteslice \nallo cates a copy oft he str ing dat a. In any cas e,a\nconv ersionn ever fails atr un time.\nTheu nderly ing typ eof a named typ e deter mines its str ucturea nd represent ation,a nd als othe\nseto fi nt rinsic operat ions its up por ts, whicha re the samea si ft he underly ing typ ehadb een\nus edd irec tly.T hatm eans thata rithmetico perator swork the samef or Celsius an\nd Fahren-\nheitas the \ny do for float64,\nas you mig hte xp ect.\nfmt.Printf(\"%g\\n\", BoilingC-FreezingC) // \"100\" °C\nboilingF := CToF(BoilingC)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 58,
      "page_label": "40"
    }
  },
  {
    "page_content": "d Fahren-\nheitas the \ny do for float64,\nas you mig hte xp ect.\nfmt.Printf(\"%g\\n\", BoilingC-FreezingC) // \"100\" °C\nboilingF := CToF(BoilingC)\nfmt.Printf(\"%g\\n\", boilingF-CToF(FreezingC)) // \"180\" °F\nfmt.Printf(\"%g\\n\", boilingF-FreezingC)\n// compile error: type mismatch\nComp \narisono perator sli ke== an\nd < cana ls \no be usedt oc ompare a v alue ofan amed typ eto\n             \n         \nan\not her o\nf t\nhe s\name t\nyp e, o\nr t\no a v\nalue o\nf an unnamed\n type with the same u\nnderly ing t\nyp e. \nB\nut t\nwo val\nues o\nf d\nif ferent name d t\nypes c\nannot be co\nmpare d dir\nec tly :\nvar c Celsius\nvar f Fahrenheit\nfmt.Println(c == 0)// \"true\"\nfmt.Println(f >= 0) // \"true\"\nfmt.Println(c == f) // compile error: type mismatch\nfmt.Println(c == Celsius(f)) // \"true\"!\nNo \ntet he l astc as e carefully. I ns pit e of itsn ame, t he t yp e conv ersion Celsius(f) do \nes not\nch ange the value ofi ts argument, justi ts typ e.T he testi st rueb ecause can\nd fareb ot \nh zero.\nAn amed typ emayp rovide not ation alc onvenience if ith elps avoidw riting out complex typ es\nov era nd overa gain. Th ea dvantage iss mall whent he underly ing typ eis simplel ike float64,\nbutb ig fo\nr complic ated typ es, as wew ill see whenw ed is cusss tr ucts.\nName d typesa ls o make i tp ossiblet od eﬁne ne wb eh avior s forv alues o ft he t yp e.T hese\nbehavior saree xpress eda sas et off unctions ass oci ated wit hthet yp e,c al le dthet yp e’s metho ds.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 58,
      "page_label": "40"
    }
  },
  {
    "page_content": "behavior saree xpress eda sas et off unctions ass oci ated wit hthet yp e,c al le dthet yp e’s metho ds.\nWe’ll look at met hods in det ail in Chapt er6b ut will give a taste oft he mech anism here.\nThed eclarat ionb elow,i nw hicht he Celsius param\neter c appearsb eforet he \nfunctionn ame,\nasso ciatesw it h the Celsius type \na m et hod n amed String that \nretur ns c’sn um\ner ic value\nfo llowe dby °C:\nfunc (c Celsius) String() string { return fmt.Sprintf(\"%g°C\", c) }\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 58,
      "page_label": "40"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.6. PACKAGES AND FILES 41\nMany typ es de clare a String method oft hisf or mbecaus eit control showv alues oft he typ e\nappear whenp rint eda sas tr ing byt he fmtpackage, asw ew ill see inS ec tion 7.1.\nc: =F ToC(212.0)\nfmt.Println(c.String()) // \"100°C\"\nfmt.Printf(\"%v\\n\", c) // \"100°C\"; no need to call String explicitly\nfmt.Printf(\"%s\\n\", c) // \"100°C\"\nfmt.Println(c) // \"100°C\"\nfmt.Printf(\"%g\\n\", c) // \"100\"; does not call String\nfmt.Println(float64(c)) // \"100\"; does not call String\n2.6. Packages and Files\nPackages in Gos er vet he samep ur pos es as librar iesor modules in other langu ages, sup por ting\nmo dular ity,e nc apsulat ion, sep aratec ompi lat ion, andr euse.T he s ourcec odef or a p ackage\nresides in one orm ore .go ﬁles, usu allyi nad irec tor ywhos ename end swith thei mp ort pat h;\nfori ns tance,t he ﬁles o ft he gopl.io/ch1/helloworld packagea re s tore d in dir ec tor y\n$GOPATH/src/gopl.io/ch1/helloworld.\nEach packages er ves as a sep aratename space fori ts decl arat ions.W it hin the image package,\nfore xample, the identiﬁer Decode refers to a d if ferentf unctiont hand oest he samei dentiﬁer\nin t he unicode/utf16 package. T or efer t oaf unctionf ro m outside its packag e, w em ust\nqu ali fy thei dentiﬁer tom akee xplicitw hether wem ean image.Decodeor utf16.Decode.\nPackages also let ush ide infor mat ionb yc ontrol lingw hichn ames arev isible outside the pack-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 59,
      "page_label": "41"
    }
  },
  {
    "page_content": "Packages also let ush ide infor mat ionb yc ontrol lingw hichn ames arev isible outside the pack-\nage, or expor ted.I nG o, a s impler uleg ov ernsw hichi dentiﬁersa re exp orted and whicha re\nnot: expor ted identiﬁerss tart wit han upp er-case letter.\nTo illustratet he basics, sup pos ethat our temperaturec onversions of twareh as becom epopu lar\nandw ew antt om akei ta vai lable tot he Goc ommunity asan ew package. H ow dow ed ot hat?\nLet’sc re a te a p ackagec al le dgopl.io/ch2/tempconv,av ar iat iono nt he p re vious e xample.\n(Herew e’ve made an exception too ur usu alr uleo fn umbering examples in s equence,s ot hat\nthep ackagep at hcanb em orer ealist ic.) Th ep ackagei ts elf iss tore din two ﬁles tos howh ow\nde clarat ions i ns ep arate ﬁles ofap ackagea re a ccessed; in r eall ife, a t inyp ackagel iket his\nwouldn eed onlyo ne ﬁle.\nWe havep ut the declarat ions oft he typ es,their cons tants, andt heir met hodsi n tempconv.go:\ngopl.io/ch2/tempconv\n// Package tempconv performs Celsius and Fahrenheit conversions.\npackage tempconv\nimport \"fmt\"\ntype Celsius float64\ntype Fahrenheit float64\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 59,
      "page_label": "41"
    }
  },
  {
    "page_content": "ptg16105617\n42 CHAPTER 2. PROGRAM STRUCTURE\nconst (\nAbsoluteZeroC Celsius = -273.15\nFreezingC Celsius =0\nBoilingC Celsius =1 00\n)\nfunc (c Celsius) String() string {r eturn fmt.Sprintf(\"%g°C\", c) }\nfunc (f Fahrenheit) String() string { return fmt.Sprintf(\"%g°F\", f) }\nandt he conversionf unctions in conv.go:\npackage tempconv\n// CToF converts a Celsius temperature to Fahrenheit.\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\n// FToC converts a Fahrenheit temperature to Celsius.\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\nEach ﬁle startsw it ha package de clarat iont hatd eﬁnest he packagen ame. W hent he package\nis imp orted,i ts members are referred toa s tempconv.CToF ands oo n. Package-le vel names\nli ket he typ es andc on stantsd eclare din one ﬁle ofa p ackagea re visible toa ll the other ﬁles of\nthep ackage, asi ft he sourcec odew erea ll inas ingle ﬁle.N ot ethat tempconv.goimports fmt,\nbut conv.godo esnot, because itd oesn ot use anythingf ro mfmt.\nBecaus ethep ackage-le vel const namesb eg inwith upp er-case letters,t he yto oarea ccessible\nwith qualiﬁed names like tempconv.AbsoluteZeroC:\nfmt.Printf(\"Brrrr! %v\\n\", tempconv.AbsoluteZeroC) // \"Brrrr! -273.15°C\"\nTo convert a Cel siu stemp eraturet oF ahren heiti nap ackaget hati mp orts gopl.io/ch2/temp-\nconv,w ec an write the fol low ing code:\nfmt.Println(tempconv.CToF(tempconv.BoilingC)) // \"212°F\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 60,
      "page_label": "42"
    }
  },
  {
    "page_content": "conv,w ec an write the fol low ing code:\nfmt.Println(tempconv.CToF(tempconv.BoilingC)) // \"212°F\"\nThe doc c omment (§10.7.4) imm ediate lyp re cedingt he package de clarat iond ocuments t he\npackagea saw hole.C onvent ion ally, its houlds tart w it h as ummar y sent encei nt he s ty le\nillustrated.O nlyo ne ﬁle in eachp ackages houldh aveap ackaged oc comment.E xtensive doc\ncomments areo ften place d in a ﬁle oft heir own,c onvent ion allyc al le ddoc.go.\nExercis e 2.1:Addt yp es, cons tants, andf unctions to tempconv forp ro cessingt emperatures in\ntheK elvins cale,w here zeroK elvini s −273.15°C an dad if ference of1 Kh as the samem ag ni-\ntude as 1°C.\n2.6.1. Imports\nWi thin a G op rogram, e very p ackagei si dentiﬁed b yau nique str ing c al le dits import p at h.\nThes e aret he s tr ingst hata pp ear in an import de clarat ionl ike \"gopl.io/ch2/tempconv\".\nThel angu ages peciﬁcation doesn’td eﬁne where these str ingsc om efrom or w hatt he y me an;\nit’su pt ot he tools toi nt erprett hem. W henu singt he go to ol( Chapter1 0), an im port p at h\ndenot esad irec tor ycont ainingo ne orm oreG os ourceﬁ les thatt oget her makeu pt he package.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 60,
      "page_label": "42"
    }
  },
  {
    "page_content": "ptg16105617\nS\nECTION 2.6. PACKAGES AND FILES 43\nIn \naddition toi ts import pat h,each packageh as a pack age nam e,w hichi st he short (andn ot\nne cessarily unique) namet hata pp earsi ni ts package de \nclarat ion. Byc onvent ion,ap ackage’s\nname match est he lasts eg mento fi ts import pat h,making ite asy top re dic tthat the package\nname of gopl.io/ch2/tempconvis tempconv.\nTo \nuse gopl.io/ch2/tempconv,w\nem usti mp ort it:\ngopl.io/ch2/cf\n// Cf converts its numeric argument to Celsius and Fahrenheit.\npackage main\nimport (\n\"fmt\"\n\"os\"\n\"strconv\"\n\"gopl.io/ch2/tempconv\"\n)\nfunc main() {\nfor _, arg := range os.Args[1:] {\nt, err := strconv.ParseFloat(arg, 64)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"cf: %v\\n\", err)\nos.Exit(1)\n}\nf: =tempconv.Fahrenheit(t)\nc:\n=t empconv.Celsius(t)\nfmt.Printf(\"%s = %s, %s = %s\\n\",\nf, tempconv.FToC(f), c, tempconv.CToF(c))\n}\n}\nThei mp \nort declarat ionb inds a short namet ot he imp orted packaget hatm ay beu sedt or efer\nto i ts cont entst hroughoutt he ﬁle.T he import ab \nove l ets u sr efer t on ames w it hin\ngopl.io/ch2/tempconv by \nusingaqu a liﬁed i dent iﬁer li ke tempconv.CToF.B yd efau \nlt, t he\ns\nhort  n\name i\ns t\nhe  p\nackage n\name— tempconv in  t\nhis c\nas e—but an im\np ort  de\nclarat ion m\nay \ns\np ecif y an\n alternat ive name t\no a\nvoid a conﬂic t (\n§10.4).\nTh\ne cf prog \nram co nv ertsas inglen umer ic command-linea rgumentt oi ts value in b ot h\nCelsiu sandF ahren heit:\n$g\nob uild gopl.io/ch2/cf\n$. /cf 32\n32°F = 0°C, 32°C = 89.6°F\n$./cf 212",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 61,
      "page_label": "43"
    }
  },
  {
    "page_content": "Celsiu sandF ahren heit:\n$g\nob uild gopl.io/ch2/cf\n$. /cf 32\n32°F = 0°C, 32°C = 89.6°F\n$./cf 212\n212°F = 100°C, 212°C = 413.6°F\n$./cf -40\n-40°F = -40°C, -40°C = -40°F\nIt \nisa ne rror toi mp ort a p ackagea nd thenn ot refer toi t. Thi sc he ckh elps eliminated ep en-\ndencies t hatb ecom eunnecessary a st he c odee vo l ves, although i tc an b eanu is anced ur ing\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 61,
      "page_label": "43"
    }
  },
  {
    "page_content": "ptg16105617\n44 CHAPTER 2. PROGRAM STRUCTURE\ndebugging, since commenting out a l ineo fc odel ike log.Print(\"got here!\")mayr emov e\nthes oler eference tot he packagen ame log,c ausingt he compi ler toe mita ne rror.I nt hiss it-\nuation,y ou need toc omment out or deletet he unnecessary import.\nBett ers till,u se t he golang.org/x/tools/cmd/goimports to ol, whicha ut omat ical lyi ns erts\nandr emov esp ackages fro mthei mp ort declarat iona sn ecessary ; most editors can bec onﬁg-\nured tor un goimports each timey ou saveaﬁle .L iket he gofmt to ol, ita ls opretty-printsG o\nsource ﬁles in the canonic alformat.\nExercis e 2.2: Wr ite a g eneral-pur pos e unit-conv ersionp rogram analog ou s to cf that r eads\nnumb ers fro mitsc ommand-linea rguments orf ro mthes tand ard inp uti ft here are n oa rgu-\nments, an dc onvertse achn umberi nt o units li ke t emperaturei nC el siu s andF ahren heit,\nlengt h in feeta nd meters,w eig ht in pound sandk ilog rams, andt he like.\n2.6.2. Packag eI nitialization\nPackagei nitializat ionb eg insb yi nitializingp ackage-le vel var iables in the order in whic ht he y\nared eclare d,e xceptt hatd ep endencies arer es olved ﬁrs t:\nvar a = b + c // a initialized third, to 3\nvar b = f() // b initialized second, to 2, by calling f\nvar c = 1 // c initialized first, to 1\nfunc f() int { return c + 1 }\nIf t he p ackageh as m ultiple .go ﬁles, t he y arei nitialize d in the o rder in whic ht he ﬁles are",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 62,
      "page_label": "44"
    }
  },
  {
    "page_content": "func f() int { return c + 1 }\nIf t he p ackageh as m ultiple .go ﬁles, t he y arei nitialize d in the o rder in whic ht he ﬁles are\ngivent ot he compi ler ;the goto ols or ts .goﬁles byn ameb eforei nv oking the compi ler.\nEach var iable decl are dat packagel evel startsl ifew it hthev alue ofi ts initializer expression, if\nany, but for som evar iables, like tables ofd at a, an ini tializer expressionm ay not bet he simplest\nway tos et its ini tial value.I nt hatc as e,t he init func tionm echanism may b es impler.A ny\nﬁle may cont ain anyn umbero ff unctions whose declarat ioni sj ust\nfunc init() { /* ... */ }\nSuch init func tions c an’tb ec al le dor reference d,b ut other wis e they a re nor mal fun ctions.\nWi thin each ﬁle, init func tions are aut omat ical lye xe cut edw hent he program starts, in t he\norder in whicht he yared eclare d.\nOnep ackagei si nitialize d at a time, int he order ofi mp ortsi nt he program, dependencies ﬁrs t,\nso a package p importing q canb es uret hat q is fullyi nitialize dbefore p’si nitializat ionb eg ins.\nInit ializat ionp ro ceedsf ro mtheb ot tom up;t he main packagei st he lastt ob ei nitialize d.I n\nthis manner,a ll packages aref ullyi nitialize dbefore the app lic ation’s mainfunc tionb eg ins.\nThep ackageb elow deﬁnesaf unction PopCount that retur nst he numbero fs et bits, thati s,\nbitsw hose value is1 ,i na uint64 value,w hichi sc al le dits popu lat ion count.I tu sesa n init",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 62,
      "page_label": "44"
    }
  },
  {
    "page_content": "bitsw hose value is1 ,i na uint64 value,w hichi sc al le dits popu lat ion count.I tu sesa n init\nfunc tiont op re compute a table ofr esults, pc,f or eachp ossible8 -bit value sot hatt he PopCount\nfunc tionn eedn’tt ake6 4s teps but can justr etur nthes um ofe ig htt able lookups. (Thi si sd eﬁ-\nnite ly not thef astest a lgor it hmf or c ount ing b its, b ut it ’sc onvenientf or i llustrat ing init\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 62,
      "page_label": "44"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.7. SCOPE 45\nfunc tions,a nd f or s howing h ow t op re compute a t able o fv alues, whic hi so ften a u seful\nprog rammingt echnique.)\ngopl.io/ch2/popcount\npackage popcount\n// pc[i] is the population count of i.\nvar pc [256]byte\nfunc init() {\nfor i := range pc {\npc[i] = pc[i/2] + byte(i&1)\n}\n}\n// PopCount returns the population count (number of set bits) of x.\nfunc PopCount(x uint64) int {\nreturn int(pc[byte(x>>(0*8))] +\npc[byte(x>>(1*8))] +\npc[byte(x>>(2*8))] +\npc[byte(x>>(3*8))] +\npc[byte(x>>(4*8))] +\npc[byte(x>>(5*8))] +\npc[byte(x>>(6*8))] +\npc[byte(x>>(7*8))])\n}\nNo tet hatt he range lo opi n init us eso nlyt he index; the value isu nnecessary and thu sne e d\nnotb ei nclude d.T he loopc ou lda ls o have beenw ritt ena s\nfor i, _ := range pc {\nWe’ll see other useso f initfunc tions int he next sec tion and inS ec tion 10.5.\nExercis e 2.3:Re writ ePopCountto use a loopi ns teado fas inglee xpression. C ompare the per-\nformance oft he two versions.( Section1 1.4 shows how toc ompare the per for mance ofd if fer-\nenti mp lementation ssystematically.)\nExercis e 2.4:Wr ite a versiono f PopCount that counts bitsb ys hif tingi ts argumentt hrough 64\nbit p osition s,t esting t he r ig htmostb it e acht ime. C ompare i ts per for mance t ot he t able-\nlo oku pversion.\nExercis e 2.5:Thee xpression x&(x-1) clears the rig htmostn on-zerob it of x.W rite a version\nof PopCountthat counts bitsb yu singt hisf ac t, anda ss ess its per for mance.\n2.7. S cope",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 63,
      "page_label": "45"
    }
  },
  {
    "page_content": "of PopCountthat counts bitsb yu singt hisf ac t, anda ss ess its per for mance.\n2.7. S cope\nAd eclarat iona ss oci ates a namew it hap rogram entity,s ucha saf unctiono rav ar iable.T he\nscop eof a declarat ioni st he par tof the sourcec odew here a use oft he declare dname referst o\nthat decl arat ion.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 63,
      "page_label": "45"
    }
  },
  {
    "page_content": "ptg16105617\n46 CHAPTER 2. PROGRAM STRUCTURE\nDon’tc onfuse scop ewith lifet ime. T he scope ofad eclarat ioni sar eg iono ft he program text;\nit isac ompi le-t imep ro per ty. T he lifet imeo fav ar iable ist he range oft imed ur inge xe cut ion\nwhen the var iable can ber efer red tob yo ther par tsof the program; iti sar un-t imep ro per ty.\nAs yntactic bl o ck is a s equence ofs tatementse nclos edi nb races like those thats ur round the\nbodyo faf unctiono rl oop. A name declare dinside a synt actic blo cki sn ot visible outside that\nblock. Th eb lo cke nclos esitsd eclarat ions and deter mines their scope.W ec an generalize this\nnotion of blo cks toi nclude other gro upingso fd eclarat ions thata re not explicitlys ur rounded\nby braces in t he sourcec ode; we’ll cal lthem all lexicalb locks.T here isal exic alblockf or the\nentire sourcec ode, cal le dthe univ ers ebl o ck;f or eachp ackage; for each ﬁle; f or each for, if,\nand switch st atement;f or eachc as e in aswitch or select st atement;a nd,o fc ours e,fore ach\nexplicits yntactic blo ck.\nAd eclarat ion’sl exic alblockd eter mines its scope,w hichm ay bel arge ors mall.T he declara-\ntion s of bui lt-in typ es,func tions,a nd c on stantsl ike int, len,a nd true arei nt he u nivers e\nblocka nd can ber efer red tot hroughoutt he ent ire program. D eclarat ions outside anyf unc-\ntion,t hati s, at pack age level,c an ber efer red tof ro many ﬁle in t he samep ackage. I mp orted\npackages,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 64,
      "page_label": "46"
    }
  },
  {
    "page_content": "tion,t hati s, at pack age level,c an ber efer red tof ro many ﬁle in t he samep ackage. I mp orted\npackages, \nsucha s fmt in the tempconv example, are declare dat the ﬁle leve l,s ot he ycanb e\nreferred tof ro mthes ame ﬁle,b ut not fro manot her ﬁle in t he samep ackagew it houta nother\nimport.M anyd eclarat ions,l iket hato ft he v ar iable c in t he tempconv.CToF func tion, are\nlocal,s ot he ycanb er efer red too nlyf ro mwithin the samef unctiono rp erhaps justap ar tof it.\nThes cope o fac ontrol-ﬂow l ab el, a su sedb y break, continue,a nd goto st atements, i st he\nentire enclosingf unction.\nAp rogram may cont ain multipled eclarat ions oft he samen ames ol on gas eachd eclarat ioni s\nin a different lexic alblock. F or example, you can decl are a local variablew it hthes amen ame\nas a package-le vel var iable.O r, ass hown inS ec tion 2.3.3, you can decl are a functionp arame-\nterc al le dnew,e vent houg haf unctiono ft hisn amei sp re declare din the univers eblock. D on’t\nov erdoi t, thoug h;thel argert he scope oft he redeclarat ion, the more likelyy ou are tos ur prise\nther eader.\nWh ent he compi ler encounters a reference toan ame, itl ooks for a d eclarat ion, startingw it h\nthei nner moste nclosingl exic alblocka nd wor kingu pt ot he univers eblock. I ft he compi ler\nﬁnd s no declarat ion, itr ep ortsa n ‘‘unde clare dname’’er ror.I fan amei sd eclare din bot han",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 64,
      "page_label": "46"
    }
  },
  {
    "page_content": "ﬁnd s no declarat ion, itr ep ortsa n ‘‘unde clare dname’’er ror.I fan amei sd eclare din bot han\nouterb lo cka nd a ni nner blo ck, the i nner de cl arat ionw ill b ef ound ﬁ rs t.I nt hatc as e,t he\ninner decl arat ioni ss aid to sh a dowor hi d etheo ut ero ne,m ak ingi ti naccessible:\nfunc f() {}\nvar g = \"g\"\nfunc main() {\nf: =\" f\"\nfmt.Println(f) // \"f\"; local var f shadows package-level func f\nfmt.Println(g) // \"g\"; package-level var\nfmt.Println(h) // compile error: undefined: h\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 64,
      "page_label": "46"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.7. SCOPE 47\nWi thin a function, lexical blo cks may ben este d to arbit rar y depth,s oo ne local decl arat ionc an\nsh adowa nother.M ostb lo cks arec re ate d by control-ﬂow c on str uctsl ike if st atementsa nd\nfor lo ops. Thep rogram below has three dif ferentv ar iables cal le dx becaus eeach declarat ion\nappears in a dif ferentl exic alblock. (Thi se xamplei llustrates scope rules, not good sty le!)\nfunc main() {\nx: =\" hello!\"\nfor i := 0; i < len(x); i++ {\nx: =x [i]\nif x != '!' {\nx: =x+ 'A' - 'a'\nfmt.Printf(\"%c\", x) // \"HELLO\" (one letter per iteration)\n}\n}\n}\nThee xpressions x[i] and x+'A' - 'a' each refer toad eclarat iono f x from ano ut erb lo ck;\nwe’ll e xplain t hati nam om ent.( No tet hatt he l attere xpressioni s not equivalentt o uni-\ncode.ToUpper.)\nAs mention eda bove ,nota ll lexic alblocks correspond toe xplicitb race-delimite dsequences of\nst atements; s om e arem erelyi mp lie d.T he for lo opa bove c re atest wo l exic al blocks: t he\nexplicitb lo ckf or the loopb ody, and ani mp licitb lo ckt hata ddition allye nclos esthev ar iables\nde clare dby the initializat ionc laus e,s ucha s i.T he scope ofav ar iable decl are din the imp licit\nblocki st he con dit ion,post-statement (i++), andb odyo ft he forst atement.\nThee xampleb elow als o hast hree var iables named x,e achd eclare din a dif ferent blo ck—on e\nin the functionb ody, one int he forst atement’sb lo ck, ando ne int he loopb ody—bu to nlyt wo\nof the blo cks aree xplicit:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 65,
      "page_label": "47"
    }
  },
  {
    "page_content": "in the functionb ody, one int he forst atement’sb lo ck, ando ne int he loopb ody—bu to nlyt wo\nof the blo cks aree xplicit:\nfunc main() {\nx: =\" hello\"\nfor _, x := range x {\nx: =x+ 'A' - 'a'\nfmt.Printf(\"%c\", x) // \"HELLO\" (one letter per iteration)\n}\n}\nLike for lo ops,if st atementsa nd switch st atementsa ls ocreate imp licitb lo cks in addition to\ntheir bodyb lo cks. Thec ode in the fol low ing if-elsech ain shows the scope of xand y:\nif x := f(); x == 0 {\nfmt.Println(x)\n}e lse if y := g(x); x == y {\nfmt.Println(x, y)\n}e lse {\nfmt.Println(x, y)\n}\nfmt.Println(x, y) // compile error: x and y are not visible here\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 65,
      "page_label": "47"
    }
  },
  {
    "page_content": "ptg16105617\n48 CH\nAPTER PROGRAM STRUCTURE2.\nThes econ \nd if st \natement isn este dwithin the ﬁrs t,s ov ar iables decl are dwithin the ﬁrs tst ate-\nment’si nitializer ar ev isible w it hin t he s econ d.S imi lar rules ap ply toe achc as e of a s witch\nst atement:t here isab lo ckf or the con dit ion and a blo ckf or eachc as ebody.\nAt the packagel evel,t he order in whichd eclarat ions app ear has noe ffec ton their scope,s oa\nde clarat ionm ay refer t oi ts elf ort oa nother t hatf ol lowsi t, let ting u sd eclare re cursiveo r\nmu tuallyr ec ursivet yp es andf unctions.T he compi ler will rep ort ane rror ifac on stant orv ar i-\nable decl arat ionr eferst oi ts elf,h ow ever.\nIn thisp rogram:\nif f, err := os.Open(fname); err != nil { // compile error: unused: f\nreturn err\n}\n \n  \n \n  \nf\n.Stat()     // compile error: undefined f \nf\n.Close() /\n/ c\nompile error: undefined f\nthes cope \nof f is \njustt he if st \natement,s o f is \nnot a ccessiblet ot he s tatementst hatf ol low,\nresu lting i nc ompi ler er ro rs. Dep endin go nt he c ompi ler,y ou m ay get an addi tion ale rror\nreportingt hatt he local variable fwas never used.\nThus \niti so ften necessary tod eclare fbefore \nthe con dit ion sot hati ti sa ccessiblea fter :\nf, err := os.Open(fname)\nif err != nil {\nreturn err\n}\nf\n.Stat()\nf.Close()\nYo \nu mayb et empt edt oa void decl aring f an\nd err in \nthe out erb lo ckb ym ov ing the cal lst o\nReadBytean\nd Closein\nside an elseblock:\nif f, err := os.Open(fname); err != nil {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 66,
      "page_label": "48"
    }
  },
  {
    "page_content": "d err in \nthe out erb lo ckb ym ov ing the cal lst o\nReadBytean\nd Closein\nside an elseblock:\nif f, err := os.Open(fname); err != nil {\nreturn err\n}e lse {\n/\n/ f and err are visible here too \nf\n.Stat()\nf.Close()\n}\nbutn or \nmal prac tice in Goi st od ealw it hthee rror int he if blocka nd \nthenr etur n,so thatt he\nsuccessf ule xe cut ion pat his not indente d.\nSh ort v ar iable decl arat ions d emanda na warenesso fs cope.C on sider t he p rogram b elow,\nwhichs tartsb yo bt ainingi ts cur rentw or kingd irec tor yands av ingi t in a package-le vel var i-\nable.T hisc ou ldb ed on eby cal lingos.Getwd in \nfunction main,b ut \nit mig htb eb ettert os ep a-\nratet hisc on cer nfrom the primary log ic, especi ally iff ai lingt og et the direc tor yis a fat al er ror.\nThef unction log.Fatalfpr \nintsam essage and cal lsos.Exit(1).\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 66,
      "page_label": "48"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 2.7. SCOPE 49\nvar cwd string\nfunc init() {\ncwd, err := os.Getwd() // compile error: unused: cwd\nif err != nil {\nlog.Fatalf(\"os.Getwd failed: %v\", err)\n}\n}\nSincen either cwd nor err is already declare din the init func tion’sb lo ck, the := st atement\nde claresb ot h of thema sl ocal var iables. Th ei nner de cl arat iono f cwd makest he out ero ne\ninaccessible, sot he statement doesn ot updatet he package-le vel cwdvar iable as intended.\nCurrentG oc ompi lersd etec t that t he l ocal cwd var iable isn ever u seda nd rep ort t hisa sa n\ner ror,b ut the yaren ot str ictly required top er for mthis che ck. Fur thermore, a m inor change ,\nsuch ast he addition of a log gings tatement thatr eferst ot he local cwdwouldd efeatt he che ck.\nvar cwd string\nfunc init() {\ncwd, err := os.Getwd() // NOTE: wrong!\nif err != nil {\nlog.Fatalf(\"os.Getwd failed: %v\", err)\n}\nlog.Printf(\"Working directory = %s\", cwd)\n}\nTheg lobal cwd var iable remain su ninitialize d,a nd the a pp arent lyn or mal log o ut put\nobfuscates the bug .\nTherea re a numbero fw ays tod ealw it hthis pot ent ial pro blem. Th em ostd irec tis toa void :=\nby declaring errin a sep aratevarde clarat ion:\nvar cwd string\nfunc init() {\nvar err error\ncwd, err = os.Getwd()\nif err != nil {\nlog.Fatalf(\"os.Getwd failed: %v\", err)\n}\n}\nWe’ve n ow s eenh ow p ackages, ﬁles, de cl arat ions,a nd s tatementse xpress t he s tr uctureo f\nprog rams. Int he next two chapt ers,w e’ll look at the str uctureo fd at a.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 67,
      "page_label": "49"
    }
  },
  {
    "page_content": "prog rams. Int he next two chapt ers,w e’ll look at the str uctureo fd at a.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 67,
      "page_label": "49"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 68,
      "page_label": "50"
    }
  },
  {
    "page_content": "ptg16105617\n3\nBasic Data Types\nIt’sa ll bits at t he bot tom,o fc ours e,butc omputers operatef undament allyo nﬁ xe d-size num-\nbers cal le dword s,w hicha re int erprete das integers,ﬂ oating-p ointn umbers,b it sets, orm em-\nor yaddresses, thenc om bine dinto largera ggregates thatr epresent packets, pixel s,p or tfo lios,\npoetr y,a nd everythinge ls e.G oo ffersav ar ietyo fw ays too rganize dat a, with a s pectrumo f\ndata t yp es that at one end mat ch the featureso ft he hardwarea nd att he other endp rovide\nwhat programmersn eed toc onvenientlyr epresent complic ated dat ast ruc tures.\nGo’st yp es fal l into f ourc ategor ies: basi c ty pes, ag gre gat ety pes, reference t ypes,a nd interface\nty pes.B asic typ es,thet opic oft hisc hapt er, include numbers,s tr ings, andb oole ans. Aggregate\ntypes—ar rays (§4.1) an ds tr ucts( §4.4)—fo rm morec omplic ated dat atypesb yc om biningv al-\nues ofs everal simpler ones. Reference typ es aread iverse gro upt hati ncludes point ers (§2.3.2),\nslices (§4.2), maps (§4.3), fun ctions (Chapter5 ), andc hannel s(C hapter8 ), but whatt he yhave\nin common ist hatt he yal lrefert op rogram variables ors tate in direc tly,s ot hatt he effec tof an\nop erat iona pp lie dto one reference iso bs erve dby all copies oft hatr eference.F inal ly, we’ll tal k\nab out int erface typ es in Chapt er7 .\n3.1. I nt egers\nGo’sn umer icdata typ es include several sizes o fi nt egers,ﬂ oating-p ointn umbers,a nd complex",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 69,
      "page_label": "51"
    }
  },
  {
    "page_content": "3.1. I nt egers\nGo’sn umer icdata typ es include several sizes o fi nt egers,ﬂ oating-p ointn umbers,a nd complex\nnumb ers.E achn umer ictype deter mines the size ands ig nedness ofi ts values. Let ’sb eg inwith\nintegers.\nGo p rovides b ot h sig ned a nd u nsig ned i nt egera rithmetic. Ther ea re f ourd istinc t sizes of\nsig ned i nt egers—8, 16, 32, an d6 4b its—re pres ente d by t he t yp es int8, int16, int32,a nd\nint64,a nd cor respondingu nsig ned versions uint8, uint16, uint32,a nd uint64.\n51\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 69,
      "page_label": "51"
    }
  },
  {
    "page_content": "ptg16105617\n52 CH\nAPTER BASIC DAT3. AT YPES\nTh\nerea re als otwot yp escalled just int an\nd uint that \naret he natural orm oste fﬁcients ize for\nsig ned a nd u nsig ned i nt egers o nap ar tic ularp latfor m; int is \nbyf ar t he mo st w idely u sed\nnumerict yp e.B ot hthes etypesh avet he sames ize,e it her 32 or6 4b its, but onem ustn ot make\nassump tions a bout w hich; dif ferent compi lersm ay maked if ferentc hoices e veno ni dentical\nhard ware.\n          Th\ne t\nyp e rune is a s\nynonym for int32 and c\nonvent ion ally i\nndic ates that a v\nalue is a U\nnico de\nco \nde point. Th et wo names may b eu sedi nt erc hange ably.S imi larly,t he typ ebyte is \nans yn-\nonym f or uint8,a nd \nemp hasizes t hatt he v alue i sap ie ce of r aw dat a rat her thanas mall\nnumericq uant ity.\nFinal ly, there isa nu nsig ned int egert yp euintptr,w hose \nwidth isn ot speciﬁed b ut iss ufﬁ-\ncientt oh olda ll t he b itso fap oint erv alue.T he uintptr type \nisu sedo nlyf or l ow-le vel\nprog ramming, sucha sa tt he bound ary ofaG op rogram wit haCl ibrar yor ano perat ings ys-\ntem. We’ll see examples oft hisw henw ed ealw it hthe unsafepackage\nin Chapt er1 3.\nRegardlesso ft heir size, int, uint,a nd uintptr ared if \nferentt yp esfrom their explicitlys ize d\nsiblings. Th us int is \nnot the samet yp e asint32,e veni\nft he natural size ofi nt egers is3 2b its,\nanda ne xplicitc onversioni sr equired tou se an int value \nwhere an int32 is \nneeded,a nd vice\nvers a.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 70,
      "page_label": "52"
    }
  },
  {
    "page_content": "ft he natural size ofi nt egers is3 2b its,\nanda ne xplicitc onversioni sr equired tou se an int value \nwhere an int32 is \nneeded,a nd vice\nvers a.\nSigned n umbers a re re pres ente d in 2’s-comp lementf or m,i nw hicht he h ig h-order b it i s\nreserved for the sig nof the numbera nd the range ofv alues ofa n n-bit numberi sf ro m−2n−1\nto \n2n−1−1. \nUnsig ned int egers use the full range ofb itsf or non-negat ive values andt hu shave\nther ange 0 t o2 n−1. \nFor i ns tance,t he r ange o f int8 is −128 \nto1 27, w here ast he r ange o f\nuint8is \n0 to2 55.\nGo’sb inar yop erator sfora rithmetic, logic, andc omparisona re liste dhere ino rder ofd ecre as-\ningp re cedence:\n&&>\n>< <%/* ^\n^|-+\n>= > <= < != ==\n&&\n||\nTh\nerea re onlyﬁ ve level sof precedence for binary operator s.O perator sat the samel evel as-\nso ciate to the lef t,so parenthes esmayb er equired for clarity,o rt om aket he operator sevaluate\nin the int ended order in an expressionl ike mask \n& (1 << 28).\nEach \noperator i nt he ﬁrs t twol ines o ft he t able ab ov e,f or i ns tance +,h as \na co rresponding\nassig nment operator li ke+=that m\nay beu sedt oa bbre viate ana ssig nments tatement.\nTh\ne a\nrithmetic o\nperator s +, -, *, and / may b\ne a\npp lie d t\no  in\nt eger, ﬂ\noating-p oint,  an\nd complex\nnumbers, b\nut the remainder operator % ap\nplies only t\no i\nnt egers. T\nhe beh avior of  % f\nor negat ive \nnumbers  var \nies ac\nross p\nrogramming l\nangu ages.  I\nn G\no,  t\nhe  s\nig n o\nf  t\nhe  r\nemainder  i\ns  always",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 70,
      "page_label": "52"
    }
  },
  {
    "page_content": "he beh avior of  % f\nor negat ive \nnumbers  var \nies ac\nross p\nrogramming l\nangu ages.  I\nn G\no,  t\nhe  s\nig n o\nf  t\nhe  r\nemainder  i\ns  always\nthe same a\ns t\nhe sig n o\nf the div idend, so -\n5%3 an\nd -\n5%-3 are both -2.  The behavious of / depe- \nnds on w\nhether its operands are int egers, s\no 5\n.0/4.0 is 1.\n25, but 5/4 is 1 because integer dev- \nision t\nrunc ates t\nhe result t\noward zer\no.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 70,
      "page_label": "52"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.1. INTEGERS 53\nIf the resulto f an arithmetico perat ion, whether signe dor unsig ned,h as moreb itst hanc an be\nrepres ente d in t he resultt yp e,i ti ss aid to ov erﬂow.T he h ig h-order b itst hatd on ot ﬁta re\nsi lentlyd is carde d.I ft he originaln umberi sas ig ned typ e,t he resultc ou ldb en egat ive ift he\nlef tmost bit is a 1, as in the int8exampleh ere:\nvar u uint8 = 255\nfmt.Println(u, u+1, u*u) // \"255 0 1\"\nvar i int8 = 127\nfmt.Println(i, i+1, i*i) // \"127 -128 1\"\nTw o integers o ft he s amet yp e mayb ec ompare d usingt he b inar y comp arisono perator s\nbelow; the typ e of a comparisone xpressioni sab oole an.\n== equalt o\n!= note qu alt o\n< lesst han\n<= lesst hano re qu alt o\n> greatert han\n>= greatert hano re qu alt o\nIn f ac t, al l values ofb asic typ e—boo le ans, numbers,a nd s tr ings—are comp arab le,m eaning\nthat two values oft he samet yp emayb ec ompare dusingt he == and != op erator s.F ur ther-\nmore ,integers,ﬂ oating-p ointn umbers,a nd str ingsa re ordere dby the comparisono perator s.\nThev alues ofm anyo ther typ es aren ot comparable,a nd no o ther typ es areo rdered.A sw e\nencountere acht yp e,w e’ll present the rules gov erningt he comp arab ility of itsv alues.\nTherea re als ounar y addition and subtrac tiono perator s:\n+ unar ypositive (no effec t)\n- unar ynegat ion\nFo rintegers, +x is a sho rthand for 0+x and -x is a sho rthand for 0-x;f or ﬂoating-p ointa nd\ncomp \nlex numbers, +xis just xand -xis the negat iono f x.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 71,
      "page_label": "53"
    }
  },
  {
    "page_content": "comp \nlex numbers, +xis just xand -xis the negat iono f x.\nGo als oprov ides the fol low ing bit w ise binar yop erator s,t he ﬁrs tfour ofw hicht re att heir op-\nerands asb it patternsw it hno con cepto fa rithmeticc ar ryo rs ig n:\n& bit w ise AND\n| bit w ise OR\n^ bit w ise XOR\n&^ bit cle ar (AND NOT)\n<< lef tshif t\n>> rights hif t\nTheo perator ^ is bit w ise exc lusiveO R( XO R)w henu seda sab inar yop erator,b ut whenu sed\nas a unar y preﬁxo perator it isb it w ise negat iono rc omplement; thati s, itr etur nsav alue wit h\neach bit ini ts operandi nv erted.T he &^ op erator isb it cle ar (AND NOT): in t he expression\nz=x& ^y ,e achb it of z is 0 i ft he c or respondingb it of y is 1 ;o ther wis e it e qu als t he c or-\nresp ondingb it of x.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 71,
      "page_label": "53"
    }
  },
  {
    "page_content": "ptg16105617\n54 CHAPTER 3. BASIC DAT AT YPES\nThec odeb elow s hows h ow b it w ise o perat ions c an b eu sedt oi nt erpreta uint8 value as a\ncomp act and efﬁcients et of8i ndep endentb its. I tu ses Printf’s %b verb top rint a nu mb er’s\nbinary dig its;08mo diﬁes %b(an adverb!) top ad the resultw it hzeros toe xac tly 8 dig its.\nvar x uint8 = 1<<1 | 1<<5\nvar y uint8 = 1<<1 | 1<<2\nfmt.Printf(\"%08b\\n\", x) // \"00100010\", the set {1, 5}\nfmt.Printf(\"%08b\\n\", y) // \"00000110\", the set {1, 2}\nfmt.Printf(\"%08b\\n\", x&y) // \"00000010\", the intersection {1}\nfmt.Printf(\"%08b\\n\", x|y) // \"00100110\", the union {1, 2, 5}\nfmt.Printf(\"%08b\\n\", x^y) // \"00100100\", the symmetric difference {2, 5}\nfmt.Printf(\"%08b\\n\", x&^y) // \"00100000\", the difference {5}\nfor i := uint(0); i < 8; i++ {\nif x&(1<<i) != 0 { // membership test\nfmt.Println(i) // \"1\", \"5\"\n}\n}\nfmt.Printf(\"%08b\\n\", x<<1) // \"01000100\", the set {2, 6}\nfmt.Printf(\"%08b\\n\", x>>1) // \"00010001\", the set {0, 4}\n(S ection6 .5 shows an implementation of int egers ets thatc an bem uchb ig ger thanab yte.)\nIn the shif top erat ions x<<n and x>>n,t he n op erandd eter mines the numbero fb it position s\nto shif t andm ustb eu nsig ned;t he xop erandm ay beu nsig ned ors ig ned.A rithmetically, a lef t\nshif tx<<n is equivalentt om ultiplic ationb y2 n andar ig hts hif tx>>n is equivalentt ot he ﬂoor\nof div isionb y2 n.\nLeft s hif ts ﬁll the v ac ated b itsw it h zeros, as do rig h ts hif ts of u nsig ned n umbers,b ut r ig ht",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 72,
      "page_label": "54"
    }
  },
  {
    "page_content": "of div isionb y2 n.\nLeft s hif ts ﬁll the v ac ated b itsw it h zeros, as do rig h ts hif ts of u nsig ned n umbers,b ut r ig ht\nshif tsof sig ned numbers ﬁll t he vac ated bitsw it hcopies oft he sig nbit.F or thisr eason, iti s\nimportantt ou se unsig ned arithmeticw heny ou’re tre ating ani nt eger as a bit pattern.\nAlthough Gop rovides unsig ned numbers and arithmetic, wet endt ou se the sig ned int form\neven for quant ities thatc an’tb en egat ive ,such ast he lengt hof ana rray,t houg huint mig ht\nseem a moreo bv iou sch oice.I ndeed,t he bui lt-inlen func tionr etur nsas ig ned int,a si nt his\nlo opw hicha nnounces prize medals in r everse order :\nmedals := []string{\"gold\", \"silver\", \"bronze\"}\nfor i := len(medals) - 1; i >= 0; i-- {\nfmt.Println(medals[i]) // \"bronze\", \"silver\", \"gold\"\n}\nThea lt ernat ive wouldb ec al amitous.I f len returned anu nsig ned number, then i to owould\nbe a uint,a nd the con dit ioni> =0 woulda lways bet rueb yd eﬁnition.A fter the thirdi tera-\ntion,i nw hich i= =0,t he i-- st atement wou ldc ause i to becom enot −1, but the maximum\nuint value (for example, 264−1), andt he evaluation of medals[i] wouldf ai l at run time, or\npani c(§5.9), b ya tt emp tingt oa ccess an elemento utside the bound sof the slice.\nFo r this r eason, unsig ned n umbers te nd t ob eu sedo nlyw hent heir b it w ise o perator s or\npeculi ar ar ithmetico perator sarer equired,a sw heni mp lementing bit sets, parsingb inar y ﬁle\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 72,
      "page_label": "54"
    }
  },
  {
    "page_content": "peculi ar ar ithmetico perator sarer equired,a sw heni mp lementing bit sets, parsingb inar y ﬁle\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 72,
      "page_label": "54"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.1. INTEGERS 55\nformats, orf or hashinga nd crypt ography.T he yaret ypic ally not usedf or merelyn on-negat ive\nqu ant ities.\nIn general,a ne xplicitc onversioni sr equired toc onvert a value fro mon etype toa nother,a nd\nbinary operator sfora rithmetica nd log ic (excepts hif ts)mu sth aveo perands oft he samet yp e.\nAlthough t hiso cc asionallyr esults in lo ngere xpressions,i ta ls o eliminates a w hole c lass o f\nproblemsa nd makes programse asier tou nderst and.\nAs ane xamplef ami liar fro mot her cont exts, consider thiss equence:\nvar apples int32 = 1\nvar oranges int16 = 2\nvar compote int = apples + oranges // compile error\nAt tempt ing toc ompi let hese three declarat ions pro duces an erro rmess age:\ninvalid operation: apples + oranges (mismatched types int32 and int16)\nThist yp e mismatch can be ﬁxe d in several ways, mos td irec tly byc onvertinge verythingt oa\ncommon typ e:\nvar compote = int(apples) + int(oranges)\nAs des crib edi nS ec tion 2.5, for every typ eT,t he conversiono perat ionT(x)conv ertst he value\nx to typ eT if the conversioni sa llow ed. M anyi nt eger-to-integerc onversions don ot ent ail any\nch ange inv alue; the yju stt el lthec ompi ler how toi nt erpretav alue.B ut a conversiont hatn ar-\nrows a big in tegeri nt oas maller one,o rac onversionf ro mintegert oﬂ oating-p ointo rv ice\nvers a,m ay change the value orl os eprecision:\nf: =3 .141 // a float64\ni: =i nt(f)\nfmt.Println(f, i) // \"3.141 3\"\nf=1.99",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 73,
      "page_label": "55"
    }
  },
  {
    "page_content": "vers a,m ay change the value orl os eprecision:\nf: =3 .141 // a float64\ni: =i nt(f)\nfmt.Println(f, i) // \"3.141 3\"\nf=1.99\nfmt.Println(int(f)) // \"1\"\nFlo atto int egerc onversiond is cards any frac tionalp ar t,tr unc ating towardz ero. Y ou should\navoidc onversions inw hicht he operandi so ut of range for the targett yp e,b ecause the beh av-\niord ep ends ont he imp lementation:\nf: =1 e100 // af loat64\ni: =i nt(f) // result is implementation-dependent\nIntegerl it eralso fa ny size andt yp ecanb ew ritt ena so rdinar y de cimal numbers,o ra so ctal\nnumb ers ift he ybeginw it h0,a si n 0666,o ra sh exade cimal if the ybeginw it h0x or 0X,a si n\n0xdeadbeef.H ex dig itsm ay b eu pp ero rl ow erc as e.N owad ays octaln umbers s eemt ob e\nus edf or exac tly one pur pos e—ﬁle per missions onP OSIX systems—bu th exade cimal numbers\narew idely usedt oe mp hasize the bit pattern ofan umbero veri ts numer ic value.\nWh enp rint ing numbers usingt he fmt package, wec an cont rol the radix andf or mat wit hthe\n%d, %o,a nd %xverbs, as shown int hise xample:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 73,
      "page_label": "55"
    }
  },
  {
    "page_content": "ptg16105617\n56 CHAPTER 3. BASIC DAT AT YPES\no: =0 666\nfmt.Printf(\"%d %[1]o %#[1]o\\n\", o) // \"438 666 0666\"\nx: =i nt64(0xdeadbeef)\nfmt.Printf(\"%d %[1]x %#[1]x %#[1]X\\n\", x)\n// Output:\n// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF\nNo tet he use oft wo fmt tr icks. U su allya Printf format str ing containingm ultiple % verbs\nwouldr equiret he samen umbero fe xt raop erands,b ut the [1] ‘‘adverbs’’af ter%te ll Printf to\nus etheﬁ rs top erando vera nd overa gain. S econ d,t he #adverb for %oor %xor %Xte lls Printf\nto emita 0or 0xor 0Xpreﬁxr espectively.\nRune lit eralsa re writt ena sac harac ter wit hin singleq uotes. Th es impleste xamplei sa nA SCII\nch arac ter like 'a',b ut it’sp ossiblet ow rite a ny Unico de co depointe it her dir ec tly o rw it h\nnumerice scap es, as wew ill see shortly.\nRunesa re print edw it h%c,o rw it h%qif quoting isd esired:\nascii := 'a'\nunicode := 'D'\nnewline := '\\n'\nfmt.Printf(\"%d %[1]c %[1]q\\n\", ascii) // \"97 a 'a'\"\nfmt.Printf(\"%d %[1]c %[1]q\\n\", unicode) // \"22269D 'D'\"\nfmt.Printf(\"%d %[1]q\\n\", newline) // \"10 '\\n'\"\n3.2. Floating-Poin tN umbers\nGo p rovides t wo s izes of ﬂoating -p ointn umbers, float32 and float64.T heir ar it hmetic\nprop erties areg ov erned byt he IEEE 754 stand ard imp lemente dby all moder n CPUs.\nValues oft hese numer ictypesr ange fro mtiny toh uge. T he limits of ﬂoating-p ointv alues can\nbe found int he math package. T he con stant math.MaxFloat32,t he largest float32,i sa bout",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 74,
      "page_label": "56"
    }
  },
  {
    "page_content": "be found int he math package. T he con stant math.MaxFloat32,t he largest float32,i sa bout\n3.4e38,a nd math.MaxFloat64 is a bout 1.8e308.T he s mallestp ositive v alues ar en ear\n1.4e-45and 4.9e-324,r espectively.\nA float32 prov ides ap proximatelys ix decimal dig itso fp re cision, w here asa float64\nprov ides ab out1 5d ig its; float64 shouldb ep referred f or m ostp ur pos esbecaus e float32\ncomp utation sacc umulatee rror rapid lyu nlesso ne isq uite c aref ul, and the s mallestp ositive\nintegert hatc annot bee xac tly represent ed as a float32is not large:\nvar f float32 = 16777216 // 1 << 24\nfmt.Println(f == f+1) // \"true\"!\nFlo at ing-p ointn umbers can bew ritt enl it eral lyu singd ecimals, like this:\nconst e = 2.71828 // (approximately)\nDig its may beo mitt edb eforet he d ecimal p oint ( .707)o ra fter i t( 1.). Ver y smal l or v er y\nlarge numbers are betterw ritt eni ns cientiﬁcn ot ation,w it hthel etter eor Eprecedingt he dec-\nimal expon ent:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 74,
      "page_label": "56"
    }
  },
  {
    "page_content": "ptg16105617\nF\nLSECTION 3.2. OATING-POINT NUMBERS 57\nconst Avogadro = 6.02214129e23\nconst Planck =6 .62606957e-34\nFlo \nat ing-p ointv alues arec onvenientlyp rint edw it hPrintf’s %g verb,w hichc ho \nosest he most\ncomp act represent ation thath as adequ ate pre cision, but for t ables ofd at a,the %e (exp \nonent)\nor %f (noe xp \nonent)f or msm ay b em orea ppro priate. A ll t hree verbs allow ﬁel dw idth a nd\nnumericp re cisiont ob ec ontrol led.\nfor x := 0; x < 8; x++ {\nfmt.Printf(\"x = %d eA =% 8.3f\\n\", x, math.Exp(float64(x)))\n}\nThec odea bove \nprintst he p ow ers of e with th re e de cimal digitso fp re cision, alig ne d in an\neig ht-charac ter ﬁeld:\nx=0 e A 1= .000\nx=1 e A 2= .718\nx=2 e A 7= .389\nx=3 e A 2 =0.086\nx=4 e A 5 =4.598\nx=5 e A 1 =48.413\nx=6 e A =4 03.429\nx=7 e A =1 096.633\nIn \naddition toal arge c ol lec tion of t he u su alm at hemat ical functions,t he math packageh as\nfunc \ntions for cre ating and detec ting the speci al values deﬁne dby IEEE 754: t he positive and\nnegat ive inﬁnities, whichr epresent numb ers ofe xcessive mag nitude andt he resulto fd iv ision\nby zero; andN aN (‘‘notan umber’’), the resulto fs uchm at hemat ical lyd ubious operat ions as\n0/0or Sqrt(-1).\nvar z float64\n\"0 -0 +Inf -Inf NaN\"fmt.Println(z, -z, 1/z, -1/z, z/z) //\nThef unctio\nn math.IsNaN testsw hether \nits argumenti san ot-a-numberv alue,a nd math.NaN\nr\neturns s\nuch a v\nalue. I\nt’s t\nempt ing  t\no u\nse NaN as a sentinel  v\nalue in a numer ic co\nmp utation, \nb",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 75,
      "page_label": "57"
    }
  },
  {
    "page_content": "r\neturns s\nuch a v\nalue. I\nt’s t\nempt ing  t\no u\nse NaN as a sentinel  v\nalue in a numer ic co\nmp utation, \nb\nut testing whether a speciﬁc computation al result is equ al to NaN is fraug ht wit h peril because\nany co\nmparison w\nit h N\naN a\nlways y\nields f\nalse (except !=, which is always the negation of ==):\nnan := math.NaN()\nfmt.Println(nan == nan, nan < nan, nan > nan) // \"false false false\"\nIf \na functiont hatr etur nsaﬂoating -p ointr esultm ig htf ai l,i t’sb ettert or ep ort the fai lures ep a-\nrately, liket his:\nfunc compute() (value float64, ok bool) {\n// ...\nif failed {\nreturn 0, false\n}\nreturn result, true\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 75,
      "page_label": "57"
    }
  },
  {
    "page_content": "ptg16105617\n58 CHAPTER 3. BASIC DAT AT YPES\nThen ext program illustrates ﬂoating -p ointg raphics comp utation.I tp lots a fun ctiono ft wo\nvar iables z=f (x, y)as a wir em esh3 -D sur face,u singS calableV ec tor G raphics (SVG), a\nst and ard XML not ation for l ined raw ings. Figure3 .1 shows an exam pleo fi ts out put for the\nfunc tion sin(r)/r,w here ris sqrt(x*x+y*y).\nFigure 3.1. As ur faceplot oft he function sin(r)/r.\ngopl.io/ch3/surface\n// Surface computes an SVG rendering of a 3-D surface function.\npackage main\nimport (\n\"fmt\"\n\"math\"\n)\nconst (\nwidth, height = 600, 320 // canvas size in pixels\ncells = 100 // number of grid cells\nxyrange = 30.0 // axis ranges (-xyrange..+xyrange)\nxyscale = width / 2 / xyrange // pixels per x or y unit\nzscale = height * 0.4 // pixels per z unit\nangle = math.Pi / 6 // angle of x, y axes (=30°)\n)\nvar sin30, cos30 = math.Sin(angle), math.Cos(angle) // sin(30°), cos(30°)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 76,
      "page_label": "58"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.2. FL OATING-POINT NUMBERS 59\nfunc main() {\nfmt.Printf(\"<svg xmlns='http://www.w3.org/2000/svg' \"+\n\"style='stroke: grey; fill: white; stroke-width: 0.7' \"+\n\"width='%d' height='%d'>\", width, height)\nfor i := 0; i < cells; i++ {\nfor j := 0; j < cells; j++ {\nax, ay := corner(i+1, j)\nbx, by := corner(i, j)\ncx, cy := corner(i, j+1)\ndx, dy := corner(i+1, j+1)\nfmt.Printf(\"<polygon points='%g,%g %g,%g %g,%g %g,%g'/>\\n\",\nax, ay, bx, by, cx, cy, dx, dy)\n}\n}\nfmt.Println(\"</svg>\")\n}\nfunc corner(i, j int) (float64, float64) {\n// Find point (x,y) at corner of cell (i,j).\nx: =x yrange * (float64(i)/cells - 0.5)\ny: =x yrange * (float64(j)/cells - 0.5)\n// Compute surface height z.\nz: =f(x, y)\n// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).\nsx := width/2 + (x-y)*cos30*xyscale\nsy := height/2 + (x+y)*sin30*xyscale - z*zscale\nreturn sx, sy\n}\nfunc f(x, y float64) float64 {\nr: =m ath.Hypot(x, y) // distance from (0,0)\nreturn math.Sin(r) / r\n}\nNo tice thatt he function cornerreturnst wo values, the coordinates oft he cor ner oft he cel l.\nThee xplanation of h ow the program wor ksr equires onlyb asic geometr y,b ut it’sﬁ ne tos kip\nov eri t, since the point ist oi llustrate ﬂoating-p ointc omputation.T he ess enceo ft he program\nis mappingb et weent hree dif ferentc oordinates ystems,s hown inF igure3 .2. The ﬁrs t is a 2-D\ngr ido f1 00&100 cellsi dentiﬁed b yi nt egerc oordinates (i, j), startinga t( 0, 0) in t he far back",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 77,
      "page_label": "59"
    }
  },
  {
    "page_content": "gr ido f1 00&100 cellsi dentiﬁed b yi nt egerc oordinates (i, j), startinga t( 0, 0) in t he far back\ncorner.W ep lotf ro mtheb ackt ot he fro nts ot hatb ackg round polygons may beo bs cured by\nforeground ones.\nThes econ dco ordinates ystemi sam esho f3 -D ﬂoating -p ointc oordinates (x, y, z), where x\nand y arel inearf unctions of i and j,t ransl ate dso thatt he origini si nt he center, and scale dby\nthec on stant xyrange.T he heig htz is the value oft he sur facefunc tion f (x, y).\nThet hirdc oordinates ystemi st he 2-D imagec anvas, wit h(0, 0) in t he top lef t corner.P oints\nin thi sp lane a re d enot ed( sx, sy). W eu se a ni sometr icp ro jec tion t om ap eac h3 -D p oint\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 77,
      "page_label": "59"
    }
  },
  {
    "page_content": "ptg16105617\n60 CHAPTER 3. BASIC DAT AT YPES\nFigure 3.2. Three dif ferentc oordinates ystems.\n(x, y, z)o nt othe2 -D canvas. A pointa pp earsf ar thert ot he rig hto nt he canvas the gre ateri ts\nx value ort he sm all er its y value.A nd a point app earsf ar therd ow nthec anvas the gre ateri ts x\nvalue or y value,a nd the smaller its z value.T he ver tic al andh or izont als cale factors for x and\ny ared er ive dfrom the sinea nd cosineo fa3 0° an gle. T he scale factorf or z,0 .4, isa na rbit rar y\nparameter.\nFo reach cel lin the 2-D grid, the main functionc omputest he coordinates ont he image canvas\nof the fourc or nerso ft he polygon AB CD,where B correspond sto (i, j)a nd A, C,a nd D arei ts\nneig hbors,t henp rints an SVG ins tructiont od raw it.\nExercis e 3.1: If the f unction f returnsan on-ﬁnite float64 value,t he SVG ﬁle w ill c ontain\ninvalid <polygon> elements (although manyS VG renderersh andlet hisg racef ully). M odif y\nthep rogram tos kipi nvalid polygons.\nExercis e 3.2:Experiment wit hvisu alizat ions ofo ther functions fro mthe math package. C an\nyoup ro duce an eggb ox,m ogu ls, oras add le?\nExercis e 3.3: Colore achp olygonb as edo ni ts heig ht, s ot hatt he p eaks ar ec olored red\n(#ff0000)a nd the val leys blue( #0000ff).\nExercis e 3.4:Fo llowing the appro ach oft he Lissajous examplei nS ec tion 1.7, cons truct a web\nserver thatc omputess ur faces andw ritesS VG dat a to the client. Th es er ver musts et the Con-\ntent-Typehe ader like this:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 78,
      "page_label": "60"
    }
  },
  {
    "page_content": "server thatc omputess ur faces andw ritesS VG dat a to the client. Th es er ver musts et the Con-\ntent-Typehe ader like this:\nw.Header().Set(\"Content-Type\", \"image/svg+xml\")\n(Thiss tepw as n ot r equired i nt he L issajous e xampleb ecause t he s er ver usess tand ard\nheur ist ics tor ecog nize common for mats like PNG fro mtheﬁ rs t512 bytes oft he respons eand\ngenerates the pro per header.) A llow the clientt os pecif y values like heig ht, width,a nd color as\nHT TPre questp arameters.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 78,
      "page_label": "60"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.3. COMPLEX NUMBERS 61\n3.3. Comple xN umbers\nGo provides two sizes ofc omplex numbers, complex64 and complex128,w hose components\nare float32and float64resp ectively. T he bui lt-in function complexcreatesac omplex num-\nberf ro mitsr eala nd imaginary components, andt he bui lt-inreal and imag func tions ext ract\nthos e comp onents:\nvar x complex128 = complex(1, 2) // 1+2i\nvar y complex128 = complex(3, 4) // 3+4i\nfmt.Println(x*y) // \"(-5+10i)\"\nfmt.Println(real(x*y)) // \"-5\"\nfmt.Println(imag(x*y)) // \"10\"\nIf a ﬂoating-p ointl it eral o rd ecimal in tegerl it eral i si mmediate lyf ol low edb y i,s ucha s\n3.141592i or 2i,i tb ecom esa n im aginary lit era l,d enot ing a complex numberw it haz eror eal\ncomp onent:\nfmt.Println(1i * 1i) // \"(-1+0i)\", i$ =- 1\nUn der the rules for con stant arithmetic, comp lex cons tants can b ea dde dto other cons tants\n(integero rﬂ oating point,r ealo ri maginary), allowing ust ow rite complex numbers natural ly,\nli ke1+2i,o re quivalently, 2i+1.T he declarat ions of xand yab ove can bes impliﬁed:\nx: =1+2 i\ny: =3+4 i\nComp lex numbers may bec ompare dfore qu ality with == and !=.T wo complex numbers are\nequal if their realp ar ts aree qu ala nd their imag inar ypartsa re equ al.\nThe math/cmplx packagep rovides librar yfunc tions for wor kingw it hcomp lex numbers,s uch\nas the complex squ are root and exp onent iat ionf unctions.\nfmt.Println(cmplx.Sqrt(-1)) // \"(0+1i)\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 79,
      "page_label": "61"
    }
  },
  {
    "page_content": "as the complex squ are root and exp onent iat ionf unctions.\nfmt.Println(cmplx.Sqrt(-1)) // \"(0+1i)\"\nThef ol low ing program uses complex128ar ithmetict og enerateaM andelbro tset.\ngopl.io/ch3/mandelbrot\n// Mandelbrot emits a PNG image of the Mandelbrot fractal.\npackage main\nimport (\n\"image\"\n\"image/color\"\n\"image/png\"\n\"math/cmplx\"\n\"os\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 79,
      "page_label": "61"
    }
  },
  {
    "page_content": "ptg16105617\n62 CHAPTER 3. BASIC DAT AT YPES\nfunc main() {\nconst (\nxmin, ymin, xmax, ymax = -2, -2, +2, +2\nwidth, height =1 024, 1024\n)\nimg := image.NewRGBA(image.Rect(0, 0, width, height))\nfor py := 0; py < height; py++ {\ny: =f loat64(py)/height*(ymax-ymin) + ymin\nfor px := 0; px < width; px++ {\nx: =f loat64(px)/width*(xmax-xmin) + xmin\nz: =c omplex(x, y)\n// Image point (px, py) represents complex value z.\nimg.Set(px, py, mandelbrot(z))\n}\n}\npng.Encode(os.Stdout, img) // NOTE: ignoring errors\n}\nfunc mandelbrot(z complex128) color.Color {\nconst iterations = 200\nconst contrast = 15\nvar v complex128\nfor n := uint8(0); n < iterations; n++ {\nv=v *v + z\nif cmplx.Abs(v) > 2 {\nreturn color.Gray{255 - contrast*n}\n}\n}\nreturn color.Black\n}\nThet wo neste dlo ops iterateo vere achp oint ina1 024&1024 grays cale rasteri mage represent-\ningt he −2t o+ 2p or tiono ft he complex plane.T he program tests w hether rep eatedlys qu ar-\ninga nd addingt he numbert hatp oint representse vent ual ly‘‘es cap es’’thec ircleo fr adius 2.I f\nso,t he point iss hade dby the numbero fi terat ions itt ookt oe scap e.I fn ot,t he value belon gs\nto the Mandelbro tset, andt he point remainsb lack.F inal ly, the program writest oi ts stand ard\noutput the PNG-enco dedi mage oft he iconic frac tal,s hown inF igure3 .3.\nExercis e 3.5: Implementaf ull-colorM andelbro tsetu singt he function image.NewRGBA and\nthet yp ecolor.RGBAor color.YCbCr.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 80,
      "page_label": "62"
    }
  },
  {
    "page_content": "Exercis e 3.5: Implementaf ull-colorM andelbro tsetu singt he function image.NewRGBA and\nthet yp ecolor.RGBAor color.YCbCr.\nExercis e 3.6:Su persamp lingi sat echnique tor educe the effec tof pixe lat ionb yc omputing the\ncolorv alue at several pointsw it hin eachp ixel and tak ingt he average. T he simplestm et hod is\nto div ide eachp ixel int ofour ‘‘su bpixe ls.’’Implementi t.\nExercis e 3.7: Anot her sim plef rac tal usesN ewton’sm et hod t oﬁ nd c omplex s olut ion sto a\nfunc tions ucha s z4−1=0 .S hade eachs tartingp oint byt he numbero fi terat ions required to\ngetc los eto one oft he fourr oots. C olor eachp oint byt he rooti ta ppro ach es.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 80,
      "page_label": "62"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.4. BOOLEANS 63\nFigure 3.3. TheM andelbro tset.\nExercis e 3.8: Render ingf rac talsa th ig h zo oml evel s demands g re ata rithmeticp re cision.\nImplementt he samef rac tal usingf ourd if ferentr epresent ation s of numbers: complex64, com-\nplex128, big.Float,a nd big.Rat.( Thel attert wo typ es aref ound int he math/big package.\nFloat us esa rbit rar y butb ounded-pre cision ﬂoating -p oint; Rat us esu nb ounde d-pre cision\nrat ionaln umbers.) H ow dot he ycomp are inp er for mance andm emor yus age?A tw hatz oom\nle vel sdo render inga rtifac tsbecome visible?\nExercis e 3.9:Wr ite a w eb ser ver thatr endersf rac talsa nd writest he image dat ato the client.\nAl low the clientt os pecif ythe x, y,a nd zoomv alues as parameterst ot he HTTPr equest.\n3.4. Booleans\nAv alue oft yp ebool,o r boolean,h as onlyt wo possiblev alues, true and false.T he con di-\ntion sin if and for st atementsa re boole ans, andc omparisono perator sli ke== and < produce\nab oole anresu lt. Th eu nary operator ! is log ical negat ion, so!true is false,o r, one mig ht\nsay, (!true==false)==true,a lt hough a sam attero fs ty le, w ea lways sim plif y re dundant\nboole an expressions like x==trueto x.\nBooleanv alues can bec om bine dwith the &&(AND) and ||(OR) operator s,w hichh ave sh ort-\ncircuit behavior :if the answeri sa lready deter mined byt he value oft he lef top erand, the rig ht\nop erandi sn ot evaluate d,making its afet ow rite expressions liket hi s:\ns! =\" \"& &s [0] == 'x'",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 81,
      "page_label": "63"
    }
  },
  {
    "page_content": "op erandi sn ot evaluate d,making its afet ow rite expressions liket hi s:\ns! =\" \"& &s [0] == 'x'\nwhere s[0]wouldp anic if applie dto ane mp tys tr ing .\nSince && hash ig her pre cedence t han || (mnemonic: && is b oole an mu ltiplic ation, || is\nboole an addition), nop arenthes es arer equired for con dit ion s of thisf or m:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 81,
      "page_label": "63"
    }
  },
  {
    "page_content": "ptg16105617\n64 CHAPTER 3. BASIC DAT AT YPES\nif 'a' <= c && c <= 'z' ||\n'A' <= c && c <= 'Z' ||\n'0' <= c && c <= '9' {\n// ...ASCII letter or digit...\n}\nTherei sn oi mp licitc onversionf ro mab oole an value toa n umer ic value like 0 o r1 ,o rv ice\nvers a.I t’sn ecessary tou se ane xplicit if, as in\ni: =0\nif b {\ni=1\n}\nIt mig htb ew or thw riting a conversionf unction if thiso perat ionw eren eeded often:\n// btoi returns 1 if b is true and 0 if false.\nfunc btoi(b bool) int {\nif b {\nreturn 1\n}\nreturn 0\n}\nThei nv ers eop erat ioni ss os implet hati td oesn’tw ar rantaf unction, but for symmetr yhere it\nis:\n// itob reports whether i is non-zero.\nfunc itob(i int) bool { return i != 0 }\n3.5. Strings\nAs tr ing i sa ni mmut ables equence o fb ytes. S tr ingsm ay co nt ain arb it rar y data,i ncluding\nbytesw it hvalue 0, but usu allyt he ycont ain human-readablet ext. Text s tr ingsa re convent ion-\nal lyi nt erprete d as UTF-8-enco deds equences o fU nico de co de points (runes), whic hw e’ll\nexplore ind et ailv er yso on.\nTheb ui lt-inlen func tionr etur nst he numbero fb ytes (not runes) in a s tr ing ,andt he in dex\nop erat ions[i]retr ieves the i-t hbyte ofs tr ing s,w here 0 ≤ i< len(s).\ns: =\" hello, world\"\nfmt.Println(len(s)) // \"12\"\nfmt.Println(s[0], s[7]) // \"104 119\" ('h' and 'w')\nAt tempt ing toa ccessab yteo utside thisr ange results in a panic:\nc: =s [len(s)] // panic: index out of range",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 82,
      "page_label": "64"
    }
  },
  {
    "page_content": "At tempt ing toa ccessab yteo utside thisr ange results in a panic:\nc: =s [len(s)] // panic: index out of range\nThe i-t h byte ofas tr ing isn ot necessarily t he i-t h ch ara cter of a s tr ing ,becaus e theU TF-8\nenco dingo fan on-ASCII code p oint requires two orm oreb ytes. W or kingw it hch arac tersi s\ndiscusseds hortly.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 82,
      "page_label": "64"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.5. STRINGS 65\nThe substr ing op erat ions[i:j]yields a new str ing con sisting oft he bytes oft he originals tr ing\nst artinga ti ndex i andc ontinuingu pt o, but not including, t he byte at ind ex j.T he result\ncont ains j-ibytes.\nfmt.Println(s[0:5]) // \"hello\"\nAgain, a panic results if either index iso ut of bound sor if jis lesst han i.\nEither orb ot hof the i and j op erands mayb eo mitt ed, inw hichc as ethed efau ltv alues of 0\n(t hes tart oft he str ing)a nd len(s)(its end) area ssume d,r espectively.\nfmt.Println(s[:5]) // \"hello\"\nfmt.Println(s[7:]) // \"world\"\nfmt.Println(s[:]) // \"hello, world\"\nThe +op erator makes a new str ing byc on catenat ingt wo str ings:\nfmt.Println(\"goodbye\" + s[5:]) // \"goodbye, world\"\nSt rings may b ec ompare dwith comparisono perator sli ke== and <;t he comparisoni sd on e\nbyte byb yte, sot he resulti st he natural lexicographic order ing.\nSt ringv alues ar ei mmut able: t he b ytes equence co nt ained i nas tr ing v alue can n ever be\nch ange d,t houg h of c ours e we c an assig n an ew v alue t oas tr ing variab le.T oa pp end one\nst ringt oa nother,f or ins tance,w ec an write\ns: =\" left foot\"\nt: =s\ns+ =\" ,right foot\"\nThisd oesn ot m odif y thes tr ing t hat s or iginallyh eldb ut c auses s to h oldt he ne ws tr ing\nformed byt he +=st atement;m eanw hile, tst i l lcont ainst he old str ing .\nfmt.Println(s) // \"left foot, right foot\"\nfmt.Println(t) // \"left foot\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 83,
      "page_label": "65"
    }
  },
  {
    "page_content": "formed byt he +=st atement;m eanw hile, tst i l lcont ainst he old str ing .\nfmt.Println(s) // \"left foot, right foot\"\nfmt.Println(t) // \"left foot\"\nSinces tr ingsa re immut able, con str uctions thatt ry t om odif yas tr ing’sd at a in place aren ot\nal lowe d:\ns[0] = 'L' // compile error: cannot assign to s[0]\nImmu tabilit y me ans t hati ti ss afef or t wo c opies o fas tr ing t os hare t he s ameu nderly ing\nmemory,m ak ingi tc he apt oc opys tr ingso fa ny lengt h. Simi larly,as tr ing s andas ubst ring\nli kes[7:] mays afelys hare the samed at a,so the subst ringo perat ioni sa ls och eap.N on ew\nmemory isa llocated ine it her cas e.F igure3 .4 illustrates the arrangement ofas tr ing and two\nof itss ubst rings sharing the sameu nderly ing bytea rray.\n3.5.1. String Literals\nAs tr ing value can bew ritt en as a st ring litera l,as equence ofb ytes enclos ed in dou ble quotes:\n\"Hello, BF\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 83,
      "page_label": "65"
    }
  },
  {
    "page_content": "ptg16105617\n66 CHAPTER 3. BASIC DAT AT YPES\nFigure 3.4. Thes tr ing \"hello, world\"andt wo subst rings.\nBecaus eGo source ﬁles ar ea lways enco dedi nU TF-8 andG ot ext str ingsa re convent ion ally\ninterprete das UTF-8, wec an include Unico de co depoints in str ing lit erals.\nWi thin a do uble-quote dst ringl it eral, es cap esequ ences that beg in with a backs lash \\ canb e\nus edt oi ns ert arbit rar ybyte values into the str ing . Ones et ofe scap eshand les ASCII cont rol\nco des li ken ewline, car r iager etur n, andt ab:\n\\a ‘‘aler t’’or bel l\n\\b backsp ace\n\\f form feed\n\\n ne wline\n\\r carriager etur n\n\\t tab\n\\v vertic altab\n\\' singleq uote (on ly in the runel it eral '\\'')\n\\\" double quote (on lyw it hin \"...\"literals)\n\\\\ backsl ash\nArbit rar y bytesc an also b ei nclude d in literal str ingsu singh exade cimal oro ctal escapes. A\nhexadecimale scap eis writt en \\xhh,w it hexac tly two hexade cimal digits h (in upp ero rl ow er\ncase). An oc tal e scap e is w ritt en \\ooo with e xac tly t hree o ctal dig its o (0 thr ough 7 )n ot\nexce e ding\\377.B ot h denot eas ingleb ytew it h thes peciﬁed v alue.L ater,w e’ll see h ow to\nenco deUnico de co depoints numer ical ly in str ing lit erals.\nA raws tr ing litera lis writt en `...`,u singb ackquotesi ns teado fd ou ble quotes. W it hin a raw\nst ringl it eral,n oe scap e sequences ar ep ro cessed; t he c ontentsa re t aken li teral ly, including",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 84,
      "page_label": "66"
    }
  },
  {
    "page_content": "st ringl it eral,n oe scap e sequences ar ep ro cessed; t he c ontentsa re t aken li teral ly, including\nbacksl ashesand newlines, soar aw str ing lit eral may spreado vers everal lines in t he program\nsour\nce.T he onlyp ro cessingi st hatc ar r iager etur nsa re deleted sot hatt he value oft he str ing\nis the sameo na ll platfor ms, includingt hose thatc onvent ion allyp ut car r iager etur nsi nt ext\nﬁles.\nRaws tr ing lit eralsa re a convenientw ay tow rite regu lar expressions,w hicht endt oh avel otso f\nbacksl ashes. They are als o us efulf or HTMLt empl ates, JSONl it erals, commandu sage mes-\nsages, andt he like, whicho ften extendo verm ultiplel ines.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 84,
      "page_label": "66"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.5. STRINGS 67\nconst GoUsage = `Go is a tool for managing Go source code.\nUsage:\ngo command [arguments]\n...`\n3.5.2. Unicode\nLong ago,l ifew as simplea nd there was, at leasti nap arochi alview,o nlyo ne charac ter set to\nde alwith:A SCII, the AmericanS tand ard Codef or Infor mat ionI nt erc hange . ASCII, orm ore\nprecis ely US-ASCII, uses7b itst or epresent 128 ‘‘ch arac ters’’:t he upp er- and low er-case letters\nof Eng lish, digits, andav ar ietyo fp unctuation and device-cont rol charac ters. For mucho ft he\nearlyd ays o fc omputing , this w as ade qu ate, b ut it l ef t av er y large f rac tiono ft he w or ld’s\npopu lat ionu nablet ou se t heir o wn wr it ing s ystems i nc omputers.W it h theg rowt h of t he\nInternet, dat a in myr iadl angu ages has becom emuch morec ommon. H ow can thisr ichv ar i-\net ybe dealt wit hat alla nd, if possible, efﬁciently?\nThea nsweri sU nico de (unicode.org), whichc ol lec tsa ll oft he charac tersi na ll oft he wor ld’s\nwr iting systems,p lu saccents ando ther diacr iticalm arks, cont rol codes like tab andc ar r iage\nreturn,a nd plenty ofe soterica,a nd assig nse acho ne a stand ard numberc al le d aUn ico d e co d e\npoint or, in Go ter minolog y,aru ne.\nUnico deversion8d eﬁnesc odep ointsf or over1 20,000 charac tersi nw el lov er1 00 langu ages\nands cr ipts. H ow a re t hese r epresent edi nc omputerp rogramsa nd d at a? Th en atural dat a",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 85,
      "page_label": "67"
    }
  },
  {
    "page_content": "ands cr ipts. H ow a re t hese r epresent edi nc omputerp rogramsa nd d at a? Th en atural dat a\ntype t oh oldas ingler unei s int32,a nd t hat’sw hatG ou ses; i th as t he s ynonym rune for\nprecis ely thisp ur pos e.\nWe cou ldr epresent a sequence ofr unes as a sequence of int32 values. I nt hisr epresent ation,\nwhichi sc al le d UTF-32 orU CS-4, the encodingo fe achU nico de co depointh as the sames ize,\n32 bits. Thi si ss implea nd unifor m,b ut it u sesm uchm ores pace thann ecessary since most\ncomp uter-re adablet ext isi nA SCII, whichr equires only8b itso r1b ytep er charac ter.A ll the\nch arac tersi nw idespreadu se still numberf ewer than6 5,536, whichw ou ldﬁ ti n1 6b its. Can\nwe dob etter?\n3.5.3. UTF-8\nUTF-8 isav ar iable-lengt h enco dingo fU nico de co depoints as bytes. UTF-8 was in vent edb y\nKenT hompsona nd Rob Pike, two oft he cre ators ofG o, and isn ow a U nico dest and ard . It\nus esb et ween1a nd 4 b ytes tor epresent eachr une, but only 1 b ytef or ASCII charac ters, and\non ly2o r3b ytes for mostr unes in comm on use.T he hig h-order bitso ft he ﬁrs tbyte oft he\nenco dingf or a r unei ndic ateh ow manyb ytes fol low.A hig h-order 0 indic ates 7-bit ASCII,\nwheree achr unet akes only1b yte, soi ti si denticalt oc onvent ion alA SCII. A hig h-order 110\nindic ates thatt he runet akes 2 bytes; the secon dbyte beg insw it h10.L argerr unes havea nalo-\ngous encodings.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 85,
      "page_label": "67"
    }
  },
  {
    "page_content": "gous encodings.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 85,
      "page_label": "67"
    }
  },
  {
    "page_content": "ptg16105617\n68 CH\nAPTER BASIC DAT3. AT YPES\n0x\nxxxxxx runes0 − (A\nSCII)127\n1\n10xxxxx 10xxxxxx 128− (val2047 ues <128 un us \ned)\n1\n110xxxx 10xxxxxx 10xxxxxx 2048− (val65535 ues <2048 un us \ned)\n1\n1110xxx 10xxxxxx 10xxxxxx 10xxxxxx 65536− (o0x10f \nf f f ther values unus ed)\nAv ar iable-lengt h enco dingp re cludes direc tindexingt oa ccesst he n-t hch arac ter ofas tr ing ,\nbutU TF-8 has manyd esirable pro per ties toc ompens ate. T he encodingi sc ompact,c ompati-\nblew it h ASCII, an ds elf-sy nchro nizing: it’sp ossiblet oﬁ nd the b eg inningo fac harac ter by\nback ing upn om oret hant hree bytes. It ’sa ls oap reﬁxc ode, soi tc an bed ecoded fro mlef tto\nrightw it houta ny ambiguity orl ookahead. N or une’se ncodingi sas ubst ringo fa ny other,o r\neven o fa s equence o fo thers, s oy ou c an s earc h forar uneb yj usts earc hingf or it sb ytes,\nwithoutw or rying about the pre cedingc ontext. Th el exicog raphic byteo rder equ als the Uni-\nco de co depointo rder,s os or tingU TF-8 wor ksn atural ly. T here are noe mb edde d NUL (zero)\nbytes, whichi sc onvenientf or prog rammingl angu ages thatu se NUL tot er minates tr ings.\nGo so urce ﬁles ar ea lways enco dedi nU TF-8, andU TF-8 ist he preferred e ncodingf or text\nst rings manipu lated byG op rograms. The unicode packagep rovides \nfunctions for wor king\nwith indiv idu alr unes (sucha sd istinguishingl etters fro mnumb ers,o rc onvertinga nu pp er-\ncase lettert oal ow er-case one), andt he unicode/utf8 packagep rovides",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 86,
      "page_label": "68"
    }
  },
  {
    "page_content": "case lettert oal ow er-case one), andt he unicode/utf8 packagep rovides \nfunctions for encod-\ninga nd decodingr unes as bytes usingU TF-8.\nMany Unico dech arac tersa re hardt ot yp eon a key board ort od istinguish visuallyf ro msim-\nilar-lo oking ones; s om earee veni nv isible. U nico de es cap es in Gos tr ing lit eralsa llow ust o\nsp ecif y them b yt heir numer ic co de pointv alue.T here are t wo f or ms, \\uhhhh fora1 6-bit\nvalue \nand \\Uhhhhhhhh fora3 2-bit \nvalue,w here each h is a hexade cimal digit;t he need for the\n32-bit for m ar isesv er y inf requently. E achd enot est he UTF-8 enco dingo ft he speciﬁed code\npoint. Th us,f or example, the fol low ing str ing lit eralsa ll represent the sames ix-bytes tr ing:\n\"BF\"\n\"\\xe4\\xb8\\x96\\xe7\\x95\\x8c\"\n\"\\u4e16\\u754c\"\n\"\\U00004e16\\U0000754c\"\nThet hree \nescap esequences abov eprov ide alternat ive not ation sfort he ﬁrs tst ring, but the val-\nues the ydenot earei dentical.\nUnico de es cap esmaya ls obe used in runel it erals. Thes e thre eliteralsa re equivalent:\n'B ' '\\u4e16 ' '\\U00004e16'\nAr unew hose \nvalue isl esst han2 56 may bew ritt enw it has ingleh exade cimal escape,s ucha s\n'\\x41' for 'A',b ut \nfor h ig her values, a \\u or \\U es \ncap e mu stb eu sed. C on sequently,\n'\\xe4\\xb8\\x96' is \nnot a l egal runel it eral,e vent houg hthos ethre ebytesa re a v alid UTF-8\nenco dingo fas inglec odep oint.\nThan ksto the nice pro per ties ofU TF-8, manys tr ing operat ions don’tr equired ecoding. W e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 86,
      "page_label": "68"
    }
  },
  {
    "page_content": "enco dingo fas inglec odep oint.\nThan ksto the nice pro per ties ofU TF-8, manys tr ing operat ions don’tr equired ecoding. W e\ncant estw hether one str ing containsa nother as a preﬁx:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 86,
      "page_label": "68"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.5. STRINGS 69\nfunc HasPrefix(s, prefix string) bool {\nreturn len(s) >= len(prefix) && s[:len(prefix)] == prefix\n}\nor asas ufﬁx:\nfunc HasSuffix(s, suffix string) bool {\nreturn len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix\n}\nor asas ubst ring:\nfunc Contains(s, substr string) bool {\nfor i := 0; i < len(s); i++ {\nif HasPrefix(s[i:], substr) {\nreturn true\n}\n}\nreturn false\n}\nusingt he s amel og ic forU TF-8-enco dedt ext as f or r aw bytes. Thi si sn ot t ruef or o ther\nenco dings. (Thef unctions above are draw nfrom the strings package, thoug hitsi mp lemen-\ntation of Containsus esah ashingt echnique tos earc hmore efﬁciently.)\nOn the other hand, ifw er eallyc area bout the indiv idu alU nico dech arac ters, weh avet ou se\not her mechanisms. C on sider the str ing fro mourv er y ﬁrs texample, whichi ncludes two East\nAsianc harac ters. Figure3 .5 illustrates its rep resent ation inm emor y.T he str ing contains1 3\nbytes, but int erprete das UTF-8, ite ncodes onlyn inec odep ointso rr unes:\nimport \"unicode/utf8\"\ns: =\" Hello, BF\"\nfmt.Println(len(s)) // \"13\"\nfmt.Println(utf8.RuneCountInString(s)) // \"9\"\nTo pro cesst hose charac ters, wen eed a U TF-8 deco der.T he unicode/utf8 packagep rovides\non ethat wec an use liket his:\nfor i := 0; i < len(s); {\nr, size := utf8.DecodeRuneInString(s[i:])\nfmt.Printf(\"%d\\t%c\\n\", i, r)\ni+ =size\n}\nEach cal l to DecodeRuneInString returns r,t he r unei ts elf,a nd size,t he numbero fb ytes",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 87,
      "page_label": "69"
    }
  },
  {
    "page_content": "fmt.Printf(\"%d\\t%c\\n\", i, r)\ni+ =size\n}\nEach cal l to DecodeRuneInString returns r,t he r unei ts elf,a nd size,t he numbero fb ytes\noccupied byt he UTF-8 enco dingo f r.T he size isu sedt ou pdatet he bytei ndex i of the next\nrune int he str ing . Butt hisi sc lumsy, and wen eed loops oft hisk inda ll the time. F or tunately,\nGo’s rangelo op, whena pp lie dto a str ing ,perfor msU TF-8 deco dingi mp licitly. T he out put of\nthel oopb elow isa ls o shown i nF igure3 .5; not ice how the index jumps b ym oret han1f or\neach non-ASCII rune.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 87,
      "page_label": "69"
    }
  },
  {
    "page_content": "ptg16105617\n70 CHAPTER 3. BASIC DAT AT YPES\nFigure 3.5. A rangelo opd ecodes a UTF-8-enco deds tr ing .\nfor i, r := range \"Hello, BF\"{\nfmt.Printf(\"%d\\t%q\\t%d\\n\", i, r, r)\n}\nWe cou ldu se a simple rangelo opt oc ount the numbero fr unes in a str ing ,li ket his:\nn: =0\nfor _, _ = range s {\nn++\n}\nAs wit htheo ther for mso f rangelo op, wec an omitt he var iables wed on’tn eed:\nn: =0\nfor range s {\nn++\n}\nOr wec an justc al lutf8.RuneCountInString(s).\nWe mention ede arlier thati ti sm ostlyam attero fc onvent ion inG ot hatt ext str ingsa re int er-\npreted a sU TF-8-enco deds equences o fU nico de co de points, b ut for cor rec t us e of range\nlo ops ons tr ings, it’sm oret hanac onvent ion,i t’san ecessity.W hath appens ifw er ange overa\nst ringc ontaininga rbit rar ybinary dat aor,f or thatm atter, UTF-8 dat a cont aininge rror s?\nEach t imeaU TF-8 deco der,w hether explici ti nac al l to utf8.DecodeRuneInString or\nimpliciti na range lo op, con sumes an unexp ected inp utb yte, itg enerates a s peci alUnico de\nre placement chara cter, '\\uFFFD',w hichi su su allyp rint eda saw hite question marki nside a\nbl ack h exagon alo rd iamond-li kes hape (.W henap rogram encounters t hisr unev alue,i t’s\nof ten a sig nt hats om e upst reamp ar t of t he s ystemt hatg enerated t he str ing d at a hasb een\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 88,
      "page_label": "70"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.5. STRINGS 71\ncare lessi ni ts tre atmento ft ext enco dings.\nUTF-8 ise xception allyc onvenient as an int erc hange for mat but wit hin a program runes may\nbe morec onvenientb ecause the yareo fu nifor msize anda re thu seasi lyi ndexed ina rrays and\nslices.\nA []rune conv ersiona pp lie d to a U TF-8-enco deds tr ing r etur nst he s equence o fU nico de\nco depoints thatt he str ing encodes:\n// \"program\" in Japanese katakana\ns: =\" >+=@?\"\nfmt.Printf(\"% x\\n\", s) // \"e3 83 97 e3 83 ad e3 82 b0 e3 83 a9 e3 83 a0\"\nr: =[]rune(s)\nfmt.Printf(\"%x\\n\", r) // \"[30d7 30ed 30b0 30e9 30e0]\"\n(Thev erb %x in the ﬁrs tPrintfinsertsas pace bet weene achp air ofh ex digits.)\nIf a slice ofr unes isc onverted toas tr ing ,it produces the con catenat iono ft he UTF-8 enco d-\nings ofe achr une:\nfmt.Println(string(r)) // \">+=@?\"\nConv ertinga ni nt egerv alue toas tr ing int erprets the int egera sar unev alue,a nd yieldst he\nUTF-8 represent ation of thatr une:\nfmt.Println(string(65)) // \"A\", not \"65\"\nfmt.Println(string(0x4eac)) // \"C\"\nIf the runei si nvalid,t he replacementc harac ter iss ubst itute d:\nfmt.Println(string(1234567)) // \"(\"\n3.5.4. Strings and Byt eS lices\nFo urs tand ard packages arep ar tic ularlyi mp ortantf or manipu lat ings tr ings: bytes, strings,\nstrconv,a nd unicode.T he strings packagep rovides manyf unctions for searc hing, replac-\ning, comparing ,tr imming, split ting, and joinings tr ings.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 89,
      "page_label": "71"
    }
  },
  {
    "page_content": "ing, comparing ,tr imming, split ting, and joinings tr ings.\nThe bytes packageh as simi larf unctions f or m anipu lat ings lices o fb ytes, o ft yp e []byte,\nwhichs hare som e prop erties wit hst rings. B ecause str ingsa re immut able, bui ldingu ps tr ings\nincrementallyc an invo l veal ot ofa llocat iona nd copying . In suchc as es,it’sm oree fﬁcientt o\nus ethe bytes.Buffertype,w hichw e’ll show in a mom ent.\nThe strconv packagep rovides fun ctions for convertingb oole an, integer, and ﬂoating-p oint\nvalues t oa nd f ro m their s tr ing r epresent ation s,a nd f unctions f or q uoting a nd unquo ting\nst rings.\nThe unicode packagep rovides functions like IsDigit, IsLetter, IsUpper,a nd IsLower for\ncl assif yingr unes. Eac hf unctiont akes a singler unea rgumenta nd retur nsab oole an. Conv er-\nsionf unctions like ToUpper and ToLower conv ert a rune int otheg iven cas e if iti sal etter. A ll\nthes efunc tions use the Unico dest and ard categor ies for letters,d ig its, ands oo n. The strings\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 89,
      "page_label": "71"
    }
  },
  {
    "page_content": "ptg16105617\n72 CHAPTER 3. BASIC DAT AT YPES\npackageh as similarf unctions,a ls ocalled ToUpper and ToLower,t hatr etur nan ew str ing wit h\nthes peciﬁed transfor mat iona pp lie dto eachc harac ter oft he originals tr ing .\nThe basename func tionb elow was inspired byt he Unix shel lut i lit y of the samen ame. I no ur\nversion, basename(s) removesa ny preﬁxo f s that lo oksl ikeaﬁle sys temp at h with c om-\nponentss ep arated bys lashes, andi tr emov esa ny sufﬁxt hatl ooks like a ﬁle typ e:\nfmt.Println(basename(\"a/b/c.go\")) // \"c\"\nfmt.Println(basename(\"c.d.go\")) // \"c.d\"\nfmt.Println(basename(\"abc\")) // \"abc\"\nThe ﬁrs tversiono f basenamedo es al lthew or kwithoutt he helpo fl ibrar ies:\ngopl.io/ch3/basename1\n// basename removes directory components and a .suffix.\n// e.g., a => a, a.go => a, a/b/c.go => c, a/b.c.go => b.c\nfunc basename(s string) string {\n// Discard last '/' and everything before.\nfor i := len(s) - 1; i >= 0; i-- {\nif s[i] == '/' {\ns=s [i+1:]\nbreak\n}\n}\n// Preserve everything before last '.'.\nfor i := len(s) - 1; i >= 0; i-- {\nif s[i] == '.' {\ns=s [:i]\nbreak\n}\n}\nreturn s\n}\nAs impler versionu sest he strings.LastIndexlibrar yfunc tion:\ngopl.io/ch3/basename2\nfunc basename(s string) string {\nslash := strings.LastIndex(s, \"/\") // -1 if \"/\" not found\ns=s[slash+1:]\nif dot := strings.LastIndex(s, \".\"); dot >= 0 {\ns=s [:dot]\n}\nreturn s\n}\nThe path and path/filepath packages provide a m oreg eneral set o ff unctions for manip-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 90,
      "page_label": "72"
    }
  },
  {
    "page_content": "s=s [:dot]\n}\nreturn s\n}\nThe path and path/filepath packages provide a m oreg eneral set o ff unctions for manip-\nulat ingh ierarchic alnames. The path packagew or ksw it hsl ash-delimite dpathso na ny plat-\nform.I ts houldn’tb eu sedf or ﬁle names, but it isa ppro priatef or other domains, like the pat h\ncomp onent ofaU RL. B yc ontrast, path/filepath manipu lates ﬁle names usin gt he rules for\ntheh ostp latfor m,s ucha s /foo/barforP OSIX or c:\\foo\\baron Micros oft Windows.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 90,
      "page_label": "72"
    }
  },
  {
    "page_content": "ptg16105617\nS\nTRINGSSECTION 3.5. 73\nL\net’s c\nontinue w\nit h an\not her subst ring e\nxample.  T\nhe task i\ns t\no t\nake a s\ntr ing represent ation of an \nin\nteger,  s\nuch a\ns \"\n12345\", a\nnd ins ert commas e\nvery three places, as in \"\n12,345\". T\nhis v\nersion \no\nn ly w\nor ks f\nor int egers; h\nandling ﬂ\noating-p oint n\numbers is l\nef t as\n an exercise.\ngopl.io/ch3/comma\n// comma inserts commas in a non-negative decimal integer string.\nfunc comma(s string) string {\nn: =l en(s)\nif n <= 3 {\nreturn s\n}\nreturn comma(s[:n-3]) + \",\" + s[n-3:]\n}\nThea rgum\nentt o comma is \na str ing . If its lengt his lesst hano re qu alt o3 ,n oc omma is neces-\nsary.O ther wis e, comma callsi ts \nelf r ec ursivelyw it h as ubst ringc on sisting o fa ll b ut t he l ast\nthre ech arac ters, anda pp end sac omma and the lastt hree charac terst ot he resulto ft he rec ur-\nsive cal l.\nAs tr ing containsa na rray ofb ytes that, oncec re ate d,is immut able. B yc ontrast, the elements\nof a bytes lice can bef re ely modiﬁed.\nSt rings can bec onverted tob ytes lices andb acka gain:\ns:\n=\" abc\"\nb: =[ ]byte(s)\ns2 := string(b)\nConceptu \nally, the []byte(s) conv \nersiona llocates a new bytea rray holdingac opyo ft he bytes\nof s,a nd \nyieldsas lice thatr eferences the ent irety oft hata rray.A no pt imizingc ompi ler may\nbe ablet oa void the allocat iona nd copying ins om ecases, but ing eneral copy ing isr equired to\nensure thatt he bytes of sremain \nunch ange deven if those of bares ubsequentlym odiﬁed.T he\nconv",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 91,
      "page_label": "73"
    }
  },
  {
    "page_content": "ensure thatt he bytes of sremain \nunch ange deven if those of bares ubsequentlym odiﬁed.T he\nconv \nersionf ro m byte s lice bac kt os tr ing w it h string(b) also \nmakes a co py,t oe ns ure\nimmut abi lit y of the resulting str ing s2.\nTo \navoid conv ersions and unnecessary memor yal location,m anyo ft he utilit yfunc tions int he\nbytes packaged irec \ntly paral lelt heir counterpar ts in the strings package. \nFor example, here\nareh alf a dozen functions fro mstrings:\nfunc Contains(s, substr string) bool\nfunc Count(s, sep string) int\nfunc Fields(s string) []string\nfunc HasPrefix(s, prefix string) bool\nfunc Index(s, sep string) int\nfunc Join(a []string, sep string) string\nandt he \ncor respondingo nesf ro mbytes:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 91,
      "page_label": "73"
    }
  },
  {
    "page_content": "ptg16105617\n74 CH\nAPTER BASIC DAT3. AT YPES\nfunc Contains(b, subslice []byte) bool\nfunc Count(s, sep []byte) int\nfunc Fields(s []byte) [][]byte\nfunc HasPrefix(s, prefix []byte) bool\nfunc Index(s, sep []byte) int\nfunc Join(s [][]byte, sep []byte) []byte\nTheo nlyd if \nference ist hats tr ingsh aveb eenr eplace dby byte slices.\nThe bytes packagep rovides \nthe Buffer type \nfor e fﬁcientm anipu lat iono fb ytes lices. A\nBuffer st \nartso ut emp tyb ut grows as dat a of typ es li kestring, byte,a nd []byte arew ritt \nen\nto it. A st he exampleb elow shows, a bytes.Buffer var \niable requires noi nitializat ionb ecause\nitsz erov alue isu sable:\ngopl.io/ch3/printints\n// intsToString is like fmt.Sprint(values) but adds commas. \nf\nunc intsToString(values []int) string {\nvar buf bytes.Buffer\nbuf.WriteByte('[')\nfor i, v := range values {\nif i > 0 {\nbuf.WriteString(\", \")\n}\nfmt.Fprintf(&buf, \"%d\", v)\n}\nbuf.WriteByte(']')\nreturn buf.String()\n}\nfunc main() {\nfmt.Println(intsToString([]int{1, 2, 3})) // \"[1, 2, 3]\"\n}\nWh \nena pp endingt he UTF-8 enco dingo fa na rbit rar yrune toa bytes.Buffer,i t’sb estt\nou se\nbytes.Buffer’s WriteRune method,b ut WriteByte is ﬁne \nfor ASCII charac terss ucha s '['\nan\nd ']'.\nTh\ne bytes.Buffer type \nise xt remelyv ersatile, and whenw ed is cussi nt erfaces in C hapt er7 ,\nwe’ll see h ow itm ay beu seda sar eplacementf or a ﬁle w hene ver an I/O fun ctionr equires a\nsin kforb ytes (io.Writer)a s Fprintfdo \nes ab ove ,or a sourceo fb ytes (io.Reader).\nExercis",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 92,
      "page_label": "74"
    }
  },
  {
    "page_content": "sin kforb ytes (io.Writer)a s Fprintfdo \nes ab ove ,or a sourceo fb ytes (io.Reader).\nExercis \ne 3.10: Wr ite a n on-rec ursivev ersiono f comma,u sin\ng bytes.Buffer insteado\nfs tr ing\nconc atenation.\nExercis e 3.11: En hance comma so \nthati td eals c or rec tly w it hﬂoating-p ointn umbers and a n\nopt ion als ig n.\nExercis e 3.12:Wr ite a f unctiont hatr ep ortsw hether two str ingsa re anagramso fe acho ther,\nthat is, the ycont ain the samel etters inad if ferento rder.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 92,
      "page_label": "74"
    }
  },
  {
    "page_content": "ptg16105617\nSE\nCTION 3.6. CONSTANT 7S 5\n3.5.\n5. Con versions between Strings and Numbers\nIn a ddition t oc onversions b et weens tr ings, runes, an db ytes, it’so ften n ecessary t oc onvert\nbetweenn umer ic values andt heir str ing represent ation s.T hisi sd on ewith func tions fro mthe\nstrconvpackage.\nTo convert \nani nt egert oas tr ing ,on eopt ion ist ou se fmt.Sprintf;a nother ist\nou se the func-\ntion strconv.Itoa(‘‘integert oA SCII’’):\nx: =1 23\ny:\n=f mt.Sprintf(\"%d\", x)\nfmt.Println(y, strconv.Itoa(x)) // \"123 123\"\nFormatIntand FormatUintcanb eu sedt\nof or mat numbers inad if ferentb as e:\nfmt.Println(strconv.FormatInt(int64(x), 2)) // \"1111011\"\nThe fmt.Printf verbs %b, ,%d %o, an\nd %x areo ften morec onvenientt han Format func tions,\nespeci \nally ifw ew antt oi nclude addition ali nfor mat ionb esides the number:\ns: =f mt.Sprintf(\"x=%b\", x) // \"x=1111011\"\nTo parse \na s tr ing r epresent ing a ni nt eger, use t he strconv func tions Atoi or ParseInt,o r\nParseUintforu nsig ned \nint egers:\nx, err := strconv.Atoi(\"123\") // x is an int\ny, err := strconv.ParseInt(\"123\", 10, 64) // base 10, up to 64 bits\nThet hirda rgumento f ParseInt givest he size \noft he int egert yp ethat the resultm ustﬁ ti nt o;\nfore xample, 16i mp lies int16,a nd t\nhe speci al value of0i mp lies int.I na ny cas \ne,t he typ eof\nther esult yis always int64,w hichy ou can thenc onvert \ntoas maller typ e.\nSometimes fmt.Scanf is usef \nulf or parsingi np utt hatc on sists ofo rderly mixtures ofs tr ings",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 93,
      "page_label": "75"
    }
  },
  {
    "page_content": "toas maller typ e.\nSometimes fmt.Scanf is usef \nulf or parsingi np utt hatc on sists ofo rderly mixtures ofs tr ings\nandn umbers all onas inglel ine, but it can bei nﬂexible, esp eci ally whenh andlingi ncomplete\nor irregu lar input.\n3.6.\n Constants\nCons tan\nts aree xpressions whose value isk nown tot he compi ler andw hose evaluation isg uar-\nante e d to occ ur at comp ile time, not atr un time. T he underly ing typ eof every con stant isa\nbasic typ e:boole an,st ring, orn umber.\nA const de clarat \niond eﬁnesn amed v alues t hatl ooks yntactic ally l ikev ar iables but w hose\nvalue isc on stant,w hichp re vents accidental( or nefar ious)c hangesd ur ingp rogram exec ution.\nFo rinst ance, a c on stant ism orea ppro priatet hanav ar iable for a m at hemat ical cons tantl ike\npi,s ince i\nts value won’tc hange:\nconst pi = 3.14159 // approximately; math.Pi is a better approximation\nAs wit \nh var iables, a s equence o fc on stantsc an ap pear in o ne d eclarat ion; thisw ou ldb e\nappropriatef or a gro upo fr el ate dvalues:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 93,
      "page_label": "75"
    }
  },
  {
    "page_content": "ptg16105617\n76 CH\nAPTER BASIC DAT3. AT YPES\nconst (\ne= 2.71828182845904523536028747135266249775724709369995957496696763\npi = 3.14159265358979323846264338327950288419716939937510582097494459\n)\nMany \ncomputation s on con stantsc an bec ompletelye valuate dat comp ile time, reducingt he\nwork ne cessary a tr un tim ea nd e nablingo ther co mp iler o pt imizat ions.E rror s ordinar ily\ndetec ted atr un timec an ber ep orted atc ompi let imew hent heir operands are con stants, such\nas integerd iv isionb yz ero, str ing i ndexingo ut of b ound s,a nd a ny ﬂoating-p ointo perat ion\nthat wou ldr esult in a non-ﬁnite value.\nTher esults ofa ll arithmetic, logic al,a nd comparisono perat ions app lie dto con stant operands\naret hems elves cons tants, as ar et he results ofc onversions and cal lst oc er tain bui lt-in func-\ntion ssuch as len, cap, real, imag, complex,a nd unsafe.Sizeof(§13.1).\nSincet heir \nvalues arek nown tot he compi ler,c on stant expressions may appear in typ es,sp ecif-\nic ally ast he lengt hof ana rray typ e:\nconst IPv4Len = 4\n// parseIPv4 parses an IPv4 address (d.d.d.d).\nfunc parseIPv4(s string) IP {\nvar p [IPv4Len]byte\n// ...\n}\nAc on \nstant declarat ionm ay specif yat yp e as wel las a value,b ut int he abs ence ofa ne xplicit\ntype,t he t yp e is i nfer red f ro m thee xpressiono nt he r ig ht-hands ide.I nt he f ol low ing ,\ntime.Duration is \na name dtype whose underly ing typ eis int64,a nd time.Minute is \na con-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 94,
      "page_label": "76"
    }
  },
  {
    "page_content": "time.Duration is \na name dtype whose underly ing typ eis int64,a nd time.Minute is \na con-\nst ant oft hatt yp e.B ot hof the con stantsd eclare dbelowt hu shave the typ etime.Duration as\nwe \nll, asr eveale dby %T:\nconst noDelay time.Duration = 0\nconst timeout = 5 * time.Minute\n// \"time.Duration 0\"fmt.Printf(\"%T %[1]v\\n\", noDelay)\nf\nmt.Printf(\"%T %[1]v\\n\", timeout) /\n/ \"time.Duration 5m0s \"\nf\nmt.Printf(\"%T %[1]v\\n\", time.Minute) // \"time.Duration 1m0s\"\nWh \nenas equence ofc on stantsi sd eclare das a g ro up, the rig ht-hands ide expressionm ay be\nomit ted for all but the ﬁrs t of the g ro up, imp l yingt hatt he pre vious expressiona nd its typ e\nshouldb eu seda gain. F or example:\nconst (\na=1\nb\nc=2\nd\n)\nfmt.Println(a, b, c, d) // \"1 1 2 2\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 94,
      "page_label": "76"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.6. CONSTANTS7 7\nThisi sn ot ver yus efuli ft he imp licitlyc opie dright-hands ide expressiona lways evaluatest o\nthes amet hing. B ut what if it cou ldv ar y? Thisb ringsu st o iota.\n3.6.1. The Constan tG enerator iota\nA const de clarat ionm ay use the constant generat o riota,w hichi su sedt oc re ate a s equence\nof rel ate dvalues wit houts pellingo ut eacho ne explicitly. I na const de clarat ion, the value of\niotabegins atz eroa nd incrementsb yo ne for eachi tem in the sequence.\nHere’sa ne xamplef ro mthe time package, whichd eﬁnesn amed con stantso ft yp eWeekday for\nthed ays oft he week, startingw it hzerof or Sunday.T yp esof thisk inda re often cal le denu-\nmerati ons,o r enums fors hort.\ntype Weekday int\nconst (\nSunday Weekday = iota\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n)\nThisd eclares Sundayto be0 , Mondayto be 1, and soo n.\nWe can use iota in morec omplex expressions too,a si nt hise xamplef ro mthe net package\nwheree acho ft he low est 5 b itso fa nu nsig ned int egeri sg iven a di st inc tname and b oole an\ninterpretation:\ntype Flags uint\nconst (\nFlagUp Flags = 1 << iota // is up\nFlagBroadcast // supports broadcast access capability\nFlagLoopback // is a loopback interface\nFlagPointToPoint // belongs to a point-to-point link\nFlagMulticast // supports multicast access capability\n)\nAs iota increments, eachc on stant isa ssig ned the value of 1< <iota,w hiche valuatest os uc-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 95,
      "page_label": "77"
    }
  },
  {
    "page_content": ")\nAs iota increments, eachc on stant isa ssig ned the value of 1< <iota,w hiche valuatest os uc-\ncessive pow ers oft wo,e achc or respondingt oas ingleb it.W ec an use these con stantsw it hin\nfunc tions thatt est, set, orc le aron e or moreo ft hese bits:\ngopl.io/ch3/netflag\nfunc IsUp(v Flags) bool {r eturn v&FlagUp == FlagUp }\nfunc TurnDown(v *Flags) {* v& ^= FlagUp }\nfunc SetBroadcast(v *Flags) { *v |= FlagBroadcast }\nfunc IsCast(v Flags) bool{r eturn v&(FlagBroadcast|FlagMulticast) != 0 }\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 95,
      "page_label": "77"
    }
  },
  {
    "page_content": "ptg16105617\n78 CHAPTER 3. BASIC DAT AT YPES\nfunc main() {\nvar v Flags = FlagMulticast | FlagUp\nfmt.Printf(\"%b %t\\n\", v, IsUp(v)) // \"10001 true\"\nTurnDown(&v)\nfmt.Printf(\"%b %t\\n\", v, IsUp(v)) // \"10000 false\"\nSetBroadcast(&v)\nfmt.Printf(\"%b %t\\n\", v, IsUp(v)) // \"10010 false\"\nfmt.Printf(\"%b %t\\n\", v, IsCast(v)) // \"10010 true\"\n}\nAs a morec omplex exampleo f iota,t hisd eclarat ionn ames the pow ers of1 024:\nconst (\n_=1< <( 10 * iota)\nKiB // 1024\nMiB // 1048576\nGiB // 1073741824\nTiB // 1099511627776(exceeds 1 << 32)\nPiB // 1125899906842624\nEiB // 1152921504606846976\nZiB // 1180591620717411303424 (exceeds 1 << 64)\nYiB // 1208925819614629174706176\n)\nThe iota me chanism has its limits. F or example, it’sn ot possiblet og eneratet he more fami l-\niarp ow ers of1 000 (KB,M B, and soo n) because there isn oe xp onent iat iono perator.\nExercis e 3.13:Wr ite constde clarat ions for KB, MB, upt hrough YB as compactly asy ou can.\n3.6.2. U ntyped Constants\nCons tants in G oa re a b it unu sual. A lt hough a c on stant can havea ny oft he basic dat a types\nli ke int or float64,i ncludingn amed ba sic typ es li ke time.Duration,m anyc on stantsa re\nnotc ommitt edt oap ar tic ulart yp e.T he c ompi ler rep resentst hese u ncommitt edc on stants\nwith m uchg re atern umer ic precisiont hanv alues ofb asic typ es, anda rithmetico nt hemi s\nmore pre cis ethan machinea rithmetic; you may assume atl east 256 bitso fp re cision. There",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 96,
      "page_label": "78"
    }
  },
  {
    "page_content": "more pre cis ethan machinea rithmetic; you may assume atl east 256 bitso fp re cision. There\nares ix ﬂav or s of t hese u ncommitt edc on stants, cal le d unty ped boole an, untypedi nt eger,\nuntypedr une, unt ypedﬂ oating-p oint, untypedc omplex, andu nt ypeds tr ing .\nBy defer r ingt hisc ommitment, untypedc on stantsn ot onlyr et aintheir higherp re cisionu nt i l\nlater, but t he y canp ar ticipate i nm anym oree xpressions t hanc ommitt edc on stantsw it hout\nre quir ingc onversions.F or example, the values ZiB and YiB in the examplea bove a re too big\nto store ina ny int egerv ar iable,b ut the yarel eg itimate con stantst hatm ay beu sedi ne xpres-\nsions liket hiso ne:\nfmt.Println(YiB/ZiB) // \"1024\"\nAs another example, the ﬂoating-p ointc on stant math.Pi mayb eu sedw here ver any ﬂoating-\npointo rc omplex value isn eeded:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 96,
      "page_label": "78"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 3.6. CONSTANTS7 9\nvar x float32 = math.Pi\nvar y float64 = math.Pi\nvar z complex128 = math.Pi\nIf math.Pi hadb eenc ommitt edt oas peciﬁct yp esuch as float64,t he resultw ou ldn ot bea s\nprecis e,a nd t yp e conv ersions wo uldb er equired t ou se i tw hena float32 or complex128\nvalue isw ante d:\nconst Pi64 float64 = math.Pi\nvar x float32 = float32(Pi64)\nvar y float64 = Pi64\nvar z complex128 = complex128(Pi64)\nFo rliterals, sy nt axd eter mines ﬂavor.T he l it erals 0, 0.0, 0i,a nd '\\u0000' al l denot econ-\nst antso ft he samev alue but dif ferent ﬂavor s:u nt ypedi nt eger, unt ypedﬂ oating-p oint, untyped\ncomp lex, andu nt ypedr une, respectively. S imi larly, trueand falseareu nt ypedb oole ansa nd\nst ringl it eralsa re unt ypeds tr ings.\nRe call t hat / mayr epresent int egero rﬂ oating-p ointd iv isiond ep endingo ni ts o perands.\nCons equently, the choice ofl it eral may affe ctt he resulto fac on stant div isione xpression:\nvar f float64 = 212\nfmt.Println((f - 32) * 5 / 9) // \"100\"; (f - 32) * 5 is a float64\nfmt.Println(5 / 9 * (f - 32)) // \"0\"; 5/9 is an untyped integer, 0\nfmt.Println(5.0 / 9.0 * (f - 32)) // \"100\"; 5.0/9.0 is an untyped float\nOn lyc on stantsc an beu nt yped. W hen an unt ypedc on stant isa ssig ned toav ar iable, as in the\nﬁrs t st atement b elow,o ra pp earso nt he r ig ht-hands ide o fav ar iable decl arat ionw it h an\nexplicitt yp e, as in the other three statements, the con stant isi mp licitlyc onverted tot he typ e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 97,
      "page_label": "79"
    }
  },
  {
    "page_content": "explicitt yp e, as in the other three statements, the con stant isi mp licitlyc onverted tot he typ e\nof thatv ar iable if possible.\nvar f float64 = 3 + 0i // untyped complex -> float64\nf=2 // untyped integer -> float64\nf=1 e123 // untyped floating-point -> float64\nf='a' // untyped rune -> float64\nThes tatementsa bove are thu sequivalentt ot hese:\nvar f float64 = float64(3 + 0i)\nf=float64(2)\nf=f loat64(1e123)\nf=f loat64('a')\nWh ether implicito re xplicit, conv ertingac on stant fro mon etype toa nother requires thatt he\ntargett yp ecanr epresent the originalv alue.R oundingi sa llow edf or reala nd c omplex ﬂoat-\ning-p ointn umbers:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 97,
      "page_label": "79"
    }
  },
  {
    "page_content": "ptg16105617\n80 CHAPTER 3. BASIC DAT AT YPES\nconst (\ndeadbeef = 0xdeadbeef // untyped int with value 3735928559\na=u int32(deadbeef) // uint32 with value 3735928559\nb=f loat32(deadbeef) // float32 with value 3735928576 (rounded up)\nc=f loat64(deadbeef) // float64 with value 3735928559 (exact)\nd=i nt32(deadbeef) // compile error: constant overflows int32\ne=f loat64(1e309) // compile error: constant overflows float64\nf=u int(-1) // compile error: constant underflows uint\n)\nIn a v ar iable decl arat ionw it hout an explici tt yp e (includings hort var iable decl arat ions), the\nﬂavor of the unt ypedc on stant imp licitlyd eter mines the defau ltt yp eof the var iable,a si nt hese\nexamples:\ni: =0 / /u ntyped integer; implicit int(0)\nr: =' \\ 0 0 0 '/ /  u n t y p e d  r u n e ;implicit rune('\\000')\nf: =0 .0 // untyped floating-point; implicit float64(0.0)\nc: =0 i/ /u ntyped complex; implicit complex128(0i)\nNo tet he asy mmet ry: unt ypedi nt egers are converted to int,w hose size isn ot guarante e d,but\nuntypedﬂ oating-p ointa nd c omplex num bers a re c onverted t ot he e xplicitlys ize d types\nfloat64 and complex128.T he langu ageh as nou nsize dfloat and complex typesa nalogou s\nto u nsize d int,b ecause i ti sv er y difﬁcult t ow rite c or rec t numericala lgor it hms w it hout\nknow ing the size ofo ne’sﬂ oating-p ointd at atypes.\nTo givet he var iable a different typ e,w em uste xplicitlyc onvert t he unt ypedc on stant tot he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 98,
      "page_label": "80"
    }
  },
  {
    "page_content": "To givet he var iable a different typ e,w em uste xplicitlyc onvert t he unt ypedc on stant tot he\ndesired typ eor state the desired typ e in the var iable decl arat ion, as in these examples:\nvar i = int8(0)\nvar i int8 = 0\nThes e defau lts arep ar tic ularlyi mp ortantw henc onvertinga nu nt ypedc on stant toa ni nt erface\nvalue (see Chapter 7) since the ydeter minei ts dynamic typ e.\nfmt.Printf(\"%T\\n\", 0) // \"int\"\nfmt.Printf(\"%T\\n\", 0.0) // \"float64\"\nfmt.Printf(\"%T\\n\", 0i) // \"complex128\"\nfmt.Printf(\"%T\\n\", '\\000')/ /\" int32\" (rune)\nWe’ve now cov ere dtheb asic dat atypeso fG o. T he next stepi st os howh ow the ycanb ec om-\nbine dinto largerg ro upingsl ikea rrays ands tr ucts, andt heni nt odata str uctures for solv ing\nre alp rogrammingp ro blems; thati st he topic ofC hapt er4 .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 98,
      "page_label": "80"
    }
  },
  {
    "page_content": "ptg16105617\n4\nCompositeT ypes\nIn Chapt er3 w ed is cussedt he basic typ esthat ser vea sb ui ldingb lo cks for dat ast ruc tures in a\nGo program; the yaret he atoms ofo ur univers e. In thisc hapt er, we’ll takeal ooka t comp osite\ntypes, the mole cules create dby com biningt he basic typ es in various ways. We ’ll t al k ab out\nfour sucht yp es—ar rays, slices, maps, an ds tr ucts—an da tt he end o ft he chapt er, we’ll show\nhows tr uctured dat ausingt hese typ escanb ee ncoded asa nd parsedf ro mJSONd at a andu sed\nto generateH TMLf ro mtemp lates.\nAr rays ands tr uctsa re ag gre gat etypes; their values arec on catenat ions ofo ther values in mem-\nor y.A rrays ar eh om ogene ous—th eir elements al lh avet he s amet yp e—wh ereass tr uctsa re\nheterogene ous.B ot h ar rays ands tr uctsa re ﬁxe d size.I nc ontrast, slices an dm aps are\ndy namic dat ast ruc tures thatg row as values area dde d.\n4.1. Arrays\nAn array isaﬁxe d -lengt hsequence ofz eroo rm oree lements ofap ar tic ulart yp e.B ecause of\ntheir ﬁxe dlengt h, ar rays arer arelyu sedd irec tly inG o. S lices, whichc an growa nd shrink,a re\nmuch morev ersatile, but tou nderst and slices wem ustu nderst and arrays ﬁrs t.\nIn div idu ala rray elements ar ea ccessedw it h thec onvent ion als ubscript not ation,w here\nsu bscriptsr un fro mzerot oo ne lesst hant he array lengt h. Th eb ui lt-in function len returns\nthen umbero fe lements in the array.\nvar a [3]int // array of 3 integers",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 99,
      "page_label": "81"
    }
  },
  {
    "page_content": "then umbero fe lements in the array.\nvar a [3]int // array of 3 integers\nfmt.Println(a[0]) // print the first element\nfmt.Println(a[len(a)-1]) // print the last element, a[2]\n81\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 99,
      "page_label": "81"
    }
  },
  {
    "page_content": "ptg16105617\n82 CHAPTER 4. COMPOSITE TYPES\n// Print the indices and elements.\nfor i, v := range a {\nfmt.Printf(\"%d %d\\n\", i, v)\n}\n// Print the elements only.\nfor _, v := range a {\nfmt.Printf(\"%d\\n\", v)\n}\nBy defau lt, the elements ofan ew array variablea re initial lys et tot he zerov alue for the ele-\nment typ e,w hichi s 0 forn umbers.W ec an use an ar ray lit era lto initialize an array wit hal ist\nof values:\nvar q [3]int = [3]int{1, 2, 3}\nvar r [3]int = [3]int{1, 2}\nfmt.Println(r[2]) // \"0\"\nIn ana rray literal,i fa ne llipsis ‘‘...’’appearsi np lace oft he lengt h,thea rray lengt his deter-\nmined byt he numbero fi nitializers. Th ed eﬁnition of qcanb es impliﬁed to\nq: =[ ...]int{1, 2, 3}\nfmt.Printf(\"%T\\n\", q) // \"[3]int\"\nThes ize of an arr ay i sp ar t of itst yp e,s o [3]int and [4]int ared if ferentt yp es. Th es ize\nmu stb eac on stant e xpression, t hati s, an exp ressionw hose v alue can b ec ompute d as t he\nprog ramis beingc ompi led.\nq: =[ 3]int{1, 2, 3}\nq=[ 4]int{1, 2, 3, 4} // compile error: cannot assign [4]int to [3]int\nAs we’ll see,t he lit eral synt axi ss imi lar for arrays, slices, maps, ands tr ucts. Th es peciﬁcf or m\nab ove isal isto fv alues in order,b ut it isa ls opossible tos pecif yal isto fi ndex andv alue pairs,\nli ket his:\ntype Currency int\nconst (\nUSD Currency = iota\nEUR\nGBP\nRMB\n)\nsymbol := [...]string{USD: \"$\", EUR: \"9\", GBP: \"!\", RMB: \"\"\"}\nfmt.Println(RMB, symbol[RMB]) // \"3 \"\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 100,
      "page_label": "82"
    }
  },
  {
    "page_content": "const (\nUSD Currency = iota\nEUR\nGBP\nRMB\n)\nsymbol := [...]string{USD: \"$\", EUR: \"9\", GBP: \"!\", RMB: \"\"\"}\nfmt.Println(RMB, symbol[RMB]) // \"3 \"\"\nIn thisf or m,i ndices can appear in anyo rder ands om emayb eo mitt ed; as before, uns peciﬁed\nvalues takeo nt he zerov alue for the elementt yp e.F or ins tance,\nr: =[ ...]int{99: -1}\ndeﬁnes an array rwith 100 elements, allz eroe xceptf or the last, whichh as value −1.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 100,
      "page_label": "82"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.1. ARRAY S8 3\nIf a na rray’se lementt yp e is comp arab le then t he a rray typ e is c omparable t oo,s ow em ay\ndirec tly compare two arrays oft hatt yp eusingt he == op erator,w hichr ep ortsw hether allc or-\nresp ondinge lements aree qu al. T he !=op erator isi ts negat ion.\na: =[ 2]int{1, 2}\nb: =[ ...]int{1, 2}\nc: =[ 2]int{1, 3}\nfmt.Println(a == b, a == c, b == c) // \"true false false\"\nd: =[ 3]int{1, 2}\nfmt.Println(a == d) // compile error: cannot compare [2]int == [3]int\nAs a m orep lausible example, the function Sum256 in t he crypto/sha256 packagep ro duces\ntheS HA256 cryptographic hasho r di gest of a m essage store din an arb it rar y byte slice.T he\ndigesth as 256 b its, soi ts typ e is [32]byte.I ft wo digests aret he same, iti se xt remelyl ikely\nthat the two messagesa re the same; if t he digests differ, the two messagesa re dif ferent. This\nprog rampr intsa nd comparest he SHA256 digests of \"x\"and \"X\":\ngopl.io/ch4/sha256\nimport \"crypto/sha256\"\nfunc main() {\nc1 := sha256.Sum256([]byte(\"x\"))\nc2 := sha256.Sum256([]byte(\"X\"))\nfmt.Printf(\"%x\\n%x\\n%t\\n%T\\n\", c1, c2, c1 == c2, c1)\n// Output:\n// 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881\n// 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015\n// false\n// [32]uint8\n}\nThet wo inp uts differb yo nlyas ingleb it,b ut approximatelyh alf the bitsa re dif ferenti nt he\ndigests. N ot ice the Printf verbs: %x to print all the elements ofa na rray ors lice ofb ytes in",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 101,
      "page_label": "83"
    }
  },
  {
    "page_content": "digests. N ot ice the Printf verbs: %x to print all the elements ofa na rray ors lice ofb ytes in\nhexade cimal,%tto showab oole an, and%Tto displ ayt he typ eof a value.\nWh enaf unctioni sc al le d,ac opyo fe acha rgumentv alue i sa ssig ned t ot he c or responding\nparameter variable, sot he functionr eceivesac opy, not the original. P assingl arge arrays in\nthis way can b ei nefﬁcient, anda ny changest hatt he functionm akes toa rray elements af fe ct\non lyt he copy, not the original. I nt hisr egard, Got re ats arrays li ke any other typ e,b ut this\nbehavior isd if ferentf ro mlanguagest hati mp licitlyp assa rrays by reference.\nOf course,w ec an explicitlyp assap oint ert oa na rray sot hata ny modiﬁcation sthef unction\nmakest oa rray elements w ill b ev isible t ot he c al ler.T hisf unctionz eroest he c ontentso fa\n[32]bytear ray:\nfunc zero(ptr *[32]byte) {\nfor i := range ptr {\nptr[i] = 0\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 101,
      "page_label": "83"
    }
  },
  {
    "page_content": "ptg16105617\n84 CH\nAPTER COMPOSITE TYPES4.\nThea rray \nliteral [32]byte{} yields \nana rray of3 2b ytes. Eac he lemento ft he array has t he\nzerov alue for byte,w hichi\nsz ero. Wec an use thatf ac tto write a dif ferentv ersiono f zero:\nfunc zero(ptr *[32]byte) {\n*ptr = [32]byte{}\n}\nUsingap oint \nert oa na rray i se fﬁcienta nd a llowst he c al le dfunc tiont om ut ate t he c al ler’s\nvar iable,b ut arrays ares till inherentlyi nﬂexibleb ecause oft heir ﬁxe dsize.T he zerofunc \ntion\nwi l lnota cceptap oint ert oa [16]byte var \niable,f or example, nor ist here any way toa dd or\nr\nemove  a\nrray  e\nlements.  F\nor  t\nhese  r\neasons, o\nther  t\nhan s\npeci al c\nases l\nike S\nHA256’s ﬁx\ne d-size \nh\nash, ar\nrays are s\neldom u\nsed as f\nunction p\narameters or results; instead, we u\nse slices.\nExercis e 4\n.1: W\nr ite a function t\nhat c\nounts t\nhe number o\nf b\nits t\nhat a\nre dif ferent i\nn t\nwo SHA256\nhashes. \n(See PopCountfrom \nSec tion 2.6.2.)\nExercis e 4.2:Wr ite a program thatp rintst he SHA256 hasho fi ts stand ard inp utb yd efau ltb ut\nsupp ortsac ommand-line ﬂag top rint the SHA384 orS HA512 hashi ns tead.\n4.\n2. Slices\nSlices \nrepresent var iable-lengt hsequences whose elements allh avet he samet yp e.A slice typ e\nis writt en []T,w here \nthe elements havet yp eT;i\ntl ooks like ana rray typ ewithoutas ize.\nAr rays ands lices arei nt imate lyc onne cte d. As lice isal ig htweig htd at ast ruc turet hatg ives",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 102,
      "page_label": "84"
    }
  },
  {
    "page_content": "tl ooks like ana rray typ ewithoutas ize.\nAr rays ands lices arei nt imate lyc onne cte d. As lice isal ig htweig htd at ast ruc turet hatg ives\naccesst oas ubsequence (orp erhaps all) o ft he elements ofa na rray,w hichi sk nown a st he\nslice’s un derly ing array.A slice has three components: a point er, a lengt h, andac ap acity.T he\npointerp ointst ot he ﬁrs telemento ft he array thati sr each ablet hrough the slice,w hichi sn ot\nne cessarily the array’sﬁ rs telement. Th el engt his the numbero fs lice elements; itc an’te xceed\nthec ap acity,w hichi su su allyt he numbero fe lements bet weent he start oft he slice andt he end\nof the underly ing array.T he bui lt-in functions lenan\nd capreturn \nthos e values.\nMu ltiples lices can share the sameu nderly ing array andm ay refer too verl appingp ar tsof that\nar ray.F igure4 .1 shows an array o fs tr ingsf or the mont hso ft he year, and t wo overl apping\nslices ofi t. Th ea rray isd eclare das\nmonths := [...]string{1: \"January\", /* ... */, 12: \"December\"}\nso \nJanuary is months[1]andD ecemberi s months[12].O rdinar \nily,t he array elementa ti ndex\n0w ou ldc ontain the ﬁrs tvalue,b ut because monthsa re always numbere dfrom 1,w ec an leave\nit out of the declarat iona nd itw ill bei nitialize dto ane mp tys tr ing .\nThe sli ceo perator s[i:j],w here \n0 ≤ i≤ j≤ cap(s),c re \natesan ew slice thatr eferst oe lements\ni thro \nugh j-1 of \nthe s equence s,w hichm ay \nbea na rray var iable, a p oint ert o an arr ay,o r",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 102,
      "page_label": "84"
    }
  },
  {
    "page_content": "atesan ew slice thatr eferst oe lements\ni thro \nugh j-1 of \nthe s equence s,w hichm ay \nbea na rray var iable, a p oint ert o an arr ay,o r\nanot her slice.T he resulting slice has j-ielem\nents. If iis \nomitt ed, it’s0 ,a nd if jis \nomitt ed, it’s\nlen(s).T hu \ns thes lice months[1:13] refers \nto the whole range ofv alid months, as does t he\nslice months[1:];t he \nslice months[:] refers \nto the whole array.L et’sd eﬁne overl appings lices\nfort he secon dqu arter andt he northern summer :\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 102,
      "page_label": "84"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.2. SLICES 85\nFigure 4.1. Tw oov erl appings lices ofa na rray ofm onths.\nQ2 := months[4:7]\nsummer := months[6:9]\nfmt.Println(Q2) // [\"April\" \"May\" \"June\"]\nfmt.Println(summer) // [\"June\" \"July\" \"August\"]\nJune isi nclude d in eacha nd ist he soleo ut put of this( inefﬁcient) testf or commone lements:\nfor _, s := range summer {\nfor _, q := range Q2 {\nif s == q {\nfmt.Printf(\"%s appears in both\\n\", s)\n}\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 103,
      "page_label": "85"
    }
  },
  {
    "page_content": "ptg16105617\n86 CHAPTER 4. COMPOSITE TYPES\nSlicingb eyon d cap(s) caus esap anic, b ut s licingb eyon d len(s) extends t he sl ice,s ot he\nresu ltm ay bel on g ert hant he original:\nfmt.Println(summer[:20]) // panic: out of range\nendlessSummer := summer[:5] // extend a slice (within capacity)\nfmt.Println(endlessSummer) // \"[June July August September October]\"\nAs ana side,n ot ethes imi lar ity oft he subst ringo perat iono ns tr ingst ot he slice operator on\n[]byte slices. B ot harew ritt en x[m:n],a nd bot hreturn a s ubsequence oft he originalb ytes,\nsh aring the underly ing represent ation sot hatb ot h op erat ions takec on stant time. T he expres-\nsion x[m:n]yields a str ing if xis a str ing ,or a []byteif xis a []byte.\nSinceas lice cont ainsap oint ert oa ne lemento fa na rray,p assingas lice toaf unctionp er mits\nthef unctiont om odif ytheu nderly ing array elements. I no ther words,c opying a slice creates\nan alias (§2.3.2) f or the underly ing array.T he function reverse re versest he elements ofa n\n[]intslice in place,a nd itm ay bea pp lie dto slices ofa ny lengt h.\ngopl.io/ch4/rev\n// reverse reverses a slice of ints in place.\nfunc reverse(s []int) {\nfor i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\ns[i], s[j] = s[j], s[i]\n}\n}\nHere wer everse the whole array a:\na: =[ ...]int{0, 1, 2, 3, 4, 5}\nreverse(a[:])\nfmt.Println(a) // \"[5 4 3 2 1 0]\"\nAs implew ay to ro tat eas lice leftb y n elements ist oa pp l ythe reverse func tiont hree times,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 104,
      "page_label": "86"
    }
  },
  {
    "page_content": "reverse(a[:])\nfmt.Println(a) // \"[5 4 3 2 1 0]\"\nAs implew ay to ro tat eas lice leftb y n elements ist oa pp l ythe reverse func tiont hree times,\nﬁrs t to the leading n elements, thent ot he remaininge lements, and ﬁna llyt ot he whole slice.\n(Tor ot ate to the rig ht, maket he thirdc al l ﬁrs t.)\ns: =[ ]int{0, 1, 2, 3, 4, 5}\n// Rotate s left by two positions.\nreverse(s[:2])\nreverse(s[2:])\nreverse(s)\nfmt.Println(s) // \"[2 3 4 5 0 1]\"\nNo tice how the expressiont hati nitializes the slice s dif fersf ro mthat for the array a.A sli ce\nlitera llo oks like ana rray literal,as equence ofv alues sep arated byc ommasa nd sur rounded by\nbraces, but the size isn ot given. Thi si mp licitlyc re atesa na rray variableo ft he rig hts ize and\nyields a s lice t hatp ointst oi t. A sw it h ar ray literals, slice li teralsm ay s pecif y thev alues in\norder,o rg ivet heir indices explicitly, oru se a mix oft he two sty les.\nUn likea rrays, slices aren ot comparable,s ow ec annot use ==to test whether two slices cont ain\nthes amee lements. Th es tand ard librar yprov ides the hig hly opt imize dbytes.Equalfunc tion\nforc omparing two s lices o fb ytes ( []byte), b ut for o ther typ es of s lice,w em ustd ot he\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 104,
      "page_label": "86"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.2. SLICES 87\ncomp arisono urselves:\nfunc equal(x, y []string) bool {\nif len(x) != len(y) {\nreturn false\n}\nfor i := range x {\nif x[i] != y[i] {\nreturn false\n}\n}\nreturn true\n}\nGi venh ow natural this ‘‘de ep’’equality testi s, andt hati ti sn om orec ostlya tr un timet hant he\n== op erator for a rrays ofs tr ings, itm ay bep uzzlingt hats lice comp arisons don ot als owork\nthis way.T here are two reasons why deepe quivalence isp ro blemat ic. First,u nlikea rray ele-\nments, t he el ements o fas lice ar ei ndirec t,m ak ingi tp ossiblef or a s lice t oc ontain its elf.\nAlthough t here are ways t od ealw it h such c as es, none i ss imple, e fﬁcient, an dm ost\nimportantly, obv iou s.\nSecond,b ecause slice elements arei ndirec t,aﬁxe d slice value may co nt ain different elements\nat different times as t he contentso ft he underly ing array arem odiﬁed.B ecause a h asht able\nsuch asG o’sm ap typ e makeso nlys hallow copies ofi ts keys, itr equires thate qu ality for each\nke yremain the samet hroughoutt he lifet imeo ft he hasht able.D eepe quivalence wou ldt hu s\nmake slices unsuit ablef or use asm ap keys. F or reference typ es li kep oint ers and channel s,t he\n==op erator tests reference ident ity,t hati s, whether the two ent ities refer tot he samet hing. A n\nanalogou s ‘‘sh allow’’equality t estf or s lices co uldb eu seful, a nd i tw ou lds olvet he p ro blem",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 105,
      "page_label": "87"
    }
  },
  {
    "page_content": "analogou s ‘‘sh allow’’equality t estf or s lices co uldb eu seful, a nd i tw ou lds olvet he p ro blem\nwith m aps, b ut t he incon sistent tre atmento fs lices an da rrays byt he == op erator wou ldb e\nconf using. T he safestc hoice ist od is allow s lice comp arisons alt ogether.\nTheo nlyl egal slice comp arisoni sa gainst nil, as in\nif summer == nil { /* ... */ }\nThez erov alue ofas lice typ e is nil.A ni l slice has n ou nderly ing a rray.T he n il s lice has\nlengt h andc ap acity zero, but there are als o non-ni lslices ofl engt h andc ap acity zero, sucha s\n[]int{} or make([]int, 3)[3:].A sw it hanyt yp ethat can haven il values, the nil value ofa\npartic ulars lice typ ecanb ew ritt enu singac onversione xpressions ucha s []int(nil).\nvar s []int // len(s) == 0, s == nil\ns=nil // len(s) == 0, s == nil\ns=[ ]int(nil) // len(s) == 0, s == nil\ns=[ ]int{} // len(s) == 0, s != nil\nSo,i fy ou need t ot estw hether a slice i se mp ty, use len(s) == 0,n ot s= =nil.O ther t han\ncomp aring equ alt o nil,an il slice beh avesl ikea ny other zero-lengt h slice; reverse(nil) is\nperfec tly safe, for example. U nlessc le arly documente d to the contrar y,G of unctions should\ntreata ll zero-lengt hslices the samew ay,w hether nilo rn on-ni l.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 105,
      "page_label": "87"
    }
  },
  {
    "page_content": "ptg16105617\n88 CHAPTER 4. COMPOSITE TYPES\nTheb ui lt-in function makecreatesas lice ofas peciﬁed elementt yp e,l engt h, andc ap acity.T he\ncapacity argumentm ay beo mitt ed, inw hichc as ethec ap acity equ als the lengt h.\nmake([]T, len)\nmake([]T, len, cap) // same as make([]T, cap)[:len]\nUn der the hood, make createsa nu nnamed array variablea nd retur nsas lice ofi t; the array is\naccessibleo nlyt hrough t he retur ned slice.I nt he ﬁrs t form,t he slice isav ie w of the ent ire\nar ray.I nt he secon d,t he slice isav ie wof only the array’sﬁ rs tlen elements, but itsc ap acity\nincludes the ent ire array.T he addition ale lements ares et aside for fut ure growt h.\n4.2.1. The appendFunction\nTheb ui lt-inappendfunc tiona pp end sit ems tos lices:\nvar runes []rune\nfor _, r := range \"Hello,BF\"{\nrunes = append(runes, r)\n}\nfmt.Printf(\"%q\\n\", runes) // \"['H'' e'' l'' l'' o'' ,'''' B'' F']\"\nThel oopu ses append to bui ldthes lice ofn iner unes enco dedb yt he str ing lit eral,a lt hough\nthis s peciﬁcp ro blem i sm orec onvenientlys olved b yu singt he b ui lt-in co nv ersion\n[]rune(\"Hello, BF\").\nThe appendfunc tioni sc ruci alto underst andingh ow slices wor k,s ol et’st akeal ooka tw hati s\ngoingo n. Here ’sav ersionc al le dappendIntthat iss peci alizedf or []intslices:\ngopl.io/ch4/append\nfunc appendInt(x []int, y int) []int {\nvar z []int\nzlen := len(x) + 1\nif zlen <= cap(x) {\n// There is room to grow. Extend the slice.\nz=x[:zlen]\n}e lse {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 106,
      "page_label": "88"
    }
  },
  {
    "page_content": "var z []int\nzlen := len(x) + 1\nif zlen <= cap(x) {\n// There is room to grow. Extend the slice.\nz=x[:zlen]\n}e lse {\n// There is insufficient space. Allocate a new array.\n// Grow by doubling, for amortized linear complexity.\nzcap := zlen\nif zcap < 2*len(x) {\nzcap = 2 * len(x)\n}\nz=m ake([]int, zlen, zcap)\ncopy(z, x) // a built-in function; see text\n}\nz[len(x)] = y\nreturn z\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 106,
      "page_label": "88"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.2. SLICES 89\nEach cal lto appendInt mu stc he ckw hether the slice has sufﬁcien tc ap acity toh oldt he new\nelements in t he exist ing array.I fs o, ite xtends the slice byd eﬁningal argers lice (still wit hin\ntheo riginala rray), copies the element y into the news pace,a nd retur nst he slice.T he inp ut x\nandt he result zsh are the sameu nderly ing array.\nIf there isi ns ufﬁcients pace for growt h,appendInt mu sta llocatean ew array big en ough to\nhold the result, copy the values fro mx into it, thena pp end the ne we lement y.T he result z\nnowr eferst oad if ferentu nderly ing array thant he array that xrefers to.\nIt wou ldb es traig htfor wardt oc opyt he elements wit hexplicitl oops, but it’se asier tou se the\nbuilt-in function copy,w hichc opies elements fro mon eslice toa nother oft he samet yp e.I ts\nﬁrs targumenti st he destination and its secon dis the source, res emblingt he order ofo perands\nin an assig nmentl ike dst = src.T he slices may refer tot he sameu nderly ing array ;they may\neven overl ap. A lt hough w ed on’tu se i th ere, copy returnst he numbero fe lements actu ally\ncopied,w hichi st he smaller oft he two slice lengt hs, sot here isn od angero fr unningo ff the\nendo ro verwriting som ethingo ut of range .\nFo refﬁciency,t he newa rray isu su allys om ewhat largert hant he minimum needed toh old x\nand y.E xp andingt he array byd ou blingi ts size at eache xp ansiona voidsa ne xces si ve number",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 107,
      "page_label": "89"
    }
  },
  {
    "page_content": "and y.E xp andingt he array byd ou blingi ts size at eache xp ansiona voidsa ne xces si ve number\nof a llocat ions a nd e ns urest hata pp endingas inglee lementt akes co ns tantt imeo na verage.\nThisp rogram demon strates the effec t:\nfunc main() {\nvar x, y []int\nfor i := 0; i < 10; i++ {\ny=a ppendInt(x, i)\nfmt.Printf(\"%d cap=%d\\t%v\\n\", i, cap(y), y)\nx=y\n}\n}\nEach change inc ap acity indic ates an allo cat iona nd a copy:\n0c ap=1 [0]\n1c ap=2 [0 1]\n2c ap=4 [0 12 ]\n3c ap=4 [0 123 ]\n4c ap=8 [0 1234 ]\n5c ap=8 [0 12345 ]\n6c ap=8 [0 123456 ]\n7c ap=8 [0 1234567 ]\n8c ap=16 [0 12345678 ]\n9c ap=16 [0 123456789 ]\nLet’st akeac los er lo oka tt he i=3it erat ion. Thes lice xcont ainst he three elements [0 1 2]but\nhasc ap acity 4,s ot here isas inglee lemento fs lack att he end,a nd appendInt of the element 3\nmayp ro ceed wit houtr eallocat ing. T he resulting slice y hasl engt h andc ap acity 4,a nd has the\nsame underly ing array as the originals lice x, as Figure4 .2 shows.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 107,
      "page_label": "89"
    }
  },
  {
    "page_content": "ptg16105617\n90 CHAPTER 4. COMPOSITE TYPES\nFigure 4.2. Ap pendingw it hro omt og row.\nOn the next iterat ion,i=4,t here isn os lack ata ll,s o appendIntal locatesan ew array ofs ize 8,\ncopies the foure lements [0 1 2 3]of x,a nd app end s4,t he value of i.T he resulting slice y\nhasal engt hof 5 but a c ap acity of8 ;t he slacko f3w ill savet he next three iterat ions fro mthe\nne e dto reallocate. T he slices y and x arev ie wsof dif ferenta rrays. Thi so perat ioni sd epic ted\nin Figure4 .3.\nFigure 4.3. Ap pendingw it houtr oomt og row.\nTheb ui lt-inappend func tionm ay use a mores op histicate dgrowth strateg ythan appendInt’s\nsimplistico ne.U su allyw ed on’tk noww hether a given cal lto appendwi l l caus ear eallocat ion,\nso wec an’ta ssume thatt he originals lice referst ot he samea rray as the resulting slice,n or that\nit referst oad if ferento ne.S imi larly,w em ustn ot assume thato perat ions one lements oft he\nolds lice will (or will not)b er eﬂec ted int he news lice.A sar esult, it’su su alt oa ssig nther esult\nof a cal lto appendto the sames lice variablew hose value wep assedt o append:\nrunes = append(runes, r)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 108,
      "page_label": "90"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.2. SLICES 91\nUp dat ingt he slice variablei sr equired not justw henc al lingappend,b ut for any functiont hat\nmayc hange the lengt hor cap acity ofas lice orm akei tr efer toad if ferentu nderly ing array.T o\nus eslices correc tly,i t’si mp ortantt ob eari nm indt hata lt hough the elements oft he underly ing\nar ray arei ndirec t,t he slice’sp oint er, lengt h, andc ap acity are not.T ou pdatet hemr equires an\nassig nmentl iket he one above . In thisr espect,s lices aren ot ‘‘pure’’referencet yp esbutr es em-\nble an aggregatet yp esuch ast hiss tr uct:\ntype IntSlice struct {\nptr *int\nlen, cap int\n}\nOur appendInt func tiona ddsas inglee lementt oas lice,b ut the bui lt-inappend lets usa dd\nmore thano ne newe lement, ore venaw hole slice oft hem.\nvar x []int\nx=append(x, 1)\nx=a ppend(x, 2, 3)\nx=a ppend(x, 4, 5, 6)\nx=a ppend(x, x...) // append the slice x\nfmt.Println(x) // \"[1 2 3 4 5 6 1 2 3 4 5 6]\"\nWi tht he small modiﬁcation shown below,w ec an match the beh avior of the bui lt-inappend.\nThee llipsis ‘‘...’’in the declarat iono f appendInt makest he function variadic:i ta ccepts any\nnumb ero fﬁ nala rguments. Th ec or respondinge llipsisi nt he cal l ab ove to append shows how\nto s up ply a l isto fa rguments f ro m as lice.W e’ll e xplain thi sm echanism in detai l in\nSection5 .7.\nfunc appendInt(x []int, y ...int) []int {\nvar z []int\nzlen := len(x) + len(y)\n// ...expand z to at least zlen...\ncopy(z[len(x):], y)\nreturn z\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 109,
      "page_label": "91"
    }
  },
  {
    "page_content": "func appendInt(x []int, y ...int) []int {\nvar z []int\nzlen := len(x) + len(y)\n// ...expand z to at least zlen...\ncopy(z[len(x):], y)\nreturn z\n}\nThel og icto exp andz’su nderly ing array remainsu nchange dandi sn ot shown.\n4.2.2. In-Plac eS liceT echniques\nLet’ss ee moree xamples off unctions that, like rotate and reverse,m odif ythee lements ofa\nslice in place.G iven a list o fs tr ings, the nonemptyfunc tionr etur nst he non-empt yon es:\ngopl.io/ch4/nonempty\n// Nonempty is an example of an in-place slice algorithm.\npackage main\nimport \"fmt\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 109,
      "page_label": "91"
    }
  },
  {
    "page_content": "ptg16105617\n92 CHAPTER 4. COMPOSITE TYPES\n// nonempty returns a slice holding only the non-empty strings.\n// The underlying array is modified during the call.\nfunc nonempty(strings []string) []string {\ni: =0\nfor _, s := range strings {\nif s != \"\" {\nstrings[i] = s\ni++\n}\n}\nreturn strings[:i]\n}\nThes ubtlep ar t is tha tt he i np uts lice an dt he out put slice s hare t he s ameu nderly ing array.\nThisa voidst he need toa llocatea nother array,t houg hof cours ethec ontentso f dataarep ar tly\nov erwritt en, as evidence dby the secon d pr int statement:\ndata := []string{\"one\", \"\", \"three\"}\nfmt.Printf(\"%q\\n\", nonempty(data)) //`[\"one\" \"three\"]`\nfmt.Printf(\"%q\\n\", data) // `[\"one\" \"three\" \"three\"]`\nThus wew ou ldu su allyw rite: data = nonempty(data).\nThe nonemptyfunc tionc an also bew ritt enu sing append:\nfunc nonempty2(strings []string) []string {\nout := strings[:0] // zero-length slice of original\nfor _, s := range strings {\nif s != \"\" {\nout = append(out, s)\n}\n}\nreturn out\n}\nWhiche ver variant weu se,r eusinga na rray in thisw ay requires thata tm osto ne out put value\nis pro duce dfore achi np utv alue,w hichi st rueo fm anya lgor it hms thatﬁ lt ero ut elements ofa\nsequence orc om bine adj acento nes. Suc hi nt ric ates lice usage ist he exception,n ot the rule,\nbuti tc an bec le ar,e fﬁcient, andu sefulo no cc asion.\nAs lice can beu sedt oi mp lementas tack.G iven an initial lye mp tys lice stack,w ec an pusha\nne wvalue ont othee nd oft he slice wit happend:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 110,
      "page_label": "92"
    }
  },
  {
    "page_content": "As lice can beu sedt oi mp lementas tack.G iven an initial lye mp tys lice stack,w ec an pusha\nne wvalue ont othee nd oft he slice wit happend:\nstack = append(stack, v) // push v\nThet op oft he stack ist he laste lement:\ntop := stack[len(stack)-1] // top of stack\nands hr inking the stack byp oppingt hate lementi s\nstack = stack[:len(stack)-1] // pop\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 110,
      "page_label": "92"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.3. MAPS 93\nTo remov ean elementf ro mthem idd leof a s lice,p reservingt he order oft he remaininge le-\nments, use copyto slide the hig her-numbere delements down byo ne toﬁ ll the gap:\nfunc remove(slice []int, i int) []int {\ncopy(slice[i:], slice[i+1:])\nreturn slice[:len(slice)-1]\n}\nfunc main() {\ns: =[ ]int{5, 6, 7, 8, 9}\nfmt.Println(remove(s, 2)) // \"[5 6 8 9]\"\n}\nAnd if we don’tn eed top reservet he order,w ec an justm ov ethel aste lementi nt otheg ap:\nfunc remove(slice []int, i int) []int {\nslice[i] = slice[len(slice)-1]\nreturn slice[:len(slice)-1]\n}\nfunc main() {\ns: =[ ]int{5, 6, 7, 8, 9}\nfmt.Println(remove(s, 2)) // \"[5 6 9 8]\n}\nExercis e 4.3:Re writ ereverseto use ana rray point eri ns teado fas lice.\nExercis e 4.4:Wr ite a versiono f rotatethat operates in a singlep ass.\nExercis e 4.5:Wr ite ani n-place functiont oe liminatea dj acentd up lic ates in a[]stringslice.\nExercis e 4.6: Wr ite a ni n-place fun ctiont hats qu ashese achr un ofa dj acentU nico de sp aces\n(s eeunicode.IsSpace) in a UTF-8-enco ded[]byteslice into a singleA SCII space.\nExercis e 4.7: Mo dif y reverse to r everse t he c harac terso fa []byte slice t hatr epresentsa\nUTF-8-enco deds tr ing ,in place.C an you doi tw it houta llocat ingn ew memor y?\n4.3. Maps\nTheh asht able i so ne o ft he mo st i ngenious a nd v ersatileo fa ll d at a st ruc tures. I ti sa n\nunordered col lec tion of key/value pairsi nw hicha ll the keysa re distinc t,a nd the value asso ci-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 111,
      "page_label": "93"
    }
  },
  {
    "page_content": "unordered col lec tion of key/value pairsi nw hicha ll the keysa re distinc t,a nd the value asso ci-\nated wit hag iven key can ber et rie ved,u pdated,o rr emov edu singac on stant numb ero fk ey\ncomp arisons ont he average, nom atterh ow large the hasht able.\nIn Go, a map is a reference toah asht able,a nd a map typ eis writt en map[K]V,w here K and V\naret he typ esof itsk eysa nd values. A ll oft he keys in a given map areo ft he samet yp e,a nd all\nof the values areo ft he samet yp e,b ut the keysn eed not beo ft he samet yp e as the values. The\nke ytype K mu stb ec omparable using ==,s ot hatt he map can testw hether a given key ise qu al\nto o ne a lready w it hin it. Th ough ﬂoating-p ointn umbers a re c omparable,i t’sab ad ide at o\ncomp are ﬂoats for equ ality and,a sw em ention edi nC hapt er3 ,e sp eci ally bad if NaN isap os-\nsiblev alue.T here are nor estr ictions ont he value typ eV.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 111,
      "page_label": "93"
    }
  },
  {
    "page_content": "ptg16105617\n94 CHAPTER 4. COMPOSITE TYPES\nTheb ui lt-in function makecanb eu sedt oc re ate a map:\nages := make(map[string]int) // mapping from strings to ints\nWe can also use a mapl it era lto cre ate a new map popu lated wit hsome initial key/value pairs:\nages := map[string]int{\n\"alice\": 31,\n\"charlie\": 34,\n}\nThisi se quivalentt o\nages := make(map[string]int)\nages[\"alice\"] = 31\nages[\"charlie\"] = 34\nso ana lt ernat ive expressionf or a new emp tym ap is map[string]int{}.\nMape lements area ccessedt hrough the usu als ubscript not ation:\nages[\"alice\"] = 32\nfmt.Println(ages[\"alice\"]) // \"32\"\nandr emov edw it htheb ui lt-in function delete:\ndelete(ages, \"alice\") // remove element ages[\"alice\"]\nAl lof these operat ions are safee veni ft he elementi sn’ti nt he map; a map lo okup usingak ey\nthat isn’tp resent retur nst he zerov alue for itst yp e,s o, for ins tance,t he fol low ing workse ven\nwhen \"bob\"is not yet a key int he map because the value of ages[\"bob\"]wi l lbe 0.\nages[\"bob\"] = ages[\"bob\"] + 1 // happy birthday!\nThes horthand assig nmentf or ms x+ =y and x++ also wor kform ap elements, s ow ec an re-\nwr ite the statement above as\nages[\"bob\"] += 1\nor evenm orec on cis ely as\nages[\"bob\"]++\nButam ap elementi sn ot a var iable,a nd wec annot takei ts address:\n_=& ages[\"bob\"] // compile error: cannot take address of map element\nOner easont hatw ec an’tt aket he addresso fam ap elementi st hatg rowing a map might cause",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 112,
      "page_label": "94"
    }
  },
  {
    "page_content": "Oner easont hatw ec an’tt aket he addresso fam ap elementi st hatg rowing a map might cause\nre hashingo fe xist ing e lements in to n ew s toragel ocat ions,t hu s potent ial lyi nvalid atingt he\naddress.\nTo enumeratea ll t he key/value pairsi nt he map,w eu se a range-b ased for lo ops imi lar to\nthos ewe saw for slices. Successi ve iterat ions oft he loopc ause the name and age var iables to\nbe set tot he next key/value pair :\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 112,
      "page_label": "94"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.3. MAPS 95\nfor name, age := range ages {\nfmt.Printf(\"%s\\t%d\\n\", name, age)\n}\nTheo rder ofm ap iterat ioni su ns peciﬁed,a nd dif ferenti mp lementation smig htu se a dif ferent\nhash function, leadingt oad if ferento rder ing. I np rac tice,t he order isr andom, varying fro m\non eexec ution tot he next. Thi si si nt ent ion al; mak ingt he sequence varyh elps force programs\nto ber obusta crossi mp lementation s.T oe numeratet he key/value pairsi no rder,w em usts or t\nthek eyse xplicitly, for ins tance,u singt he Strings func tionf ro mthe sort package if the keys\nares tr ings. Thi si sac ommonp attern:\nimport \"sort\"\nvar names []string\nfor name := range ages {\nnames = append(names, name)\n}\nsort.Strings(names)\nfor _, name := range names {\nfmt.Printf(\"%s\\t%d\\n\", name, ages[name])\n}\nSincew ek nowt he ﬁnals ize of namesfrom the outset, iti sm oree fﬁcientt oa llocatea na rray of\nther equired size upf ro nt. Th es tatement below cre atesas lice thati si nitial lye mp tyb ut has\nsufﬁcientc ap acity toh olda ll the keyso ft he agesmap:\nnames := make([]string, 0, len(ages))\nIn the ﬁrs trangelo opa bove , we requireo nlyt he keyso ft he agesmap, sow eo mitt he secon d\nlo opv ar iable.I nt he secon dlo op, wer equireo nlyt he elements oft he names slice,s ow eu se\ntheb lank identiﬁer _to ignoret he ﬁrs tvar iable,t he index.\nThez erov alue for a map typ eis nil,t hati s, a reference ton oh asht able at all.\nvar ages map[string]int\nfmt.Println(ages == nil) // \"true\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 113,
      "page_label": "95"
    }
  },
  {
    "page_content": "Thez erov alue for a map typ eis nil,t hati s, a reference ton oh asht able at all.\nvar ages map[string]int\nfmt.Println(ages == nil) // \"true\"\nfmt.Println(len(ages) == 0) // \"true\"\nMost operat ions onm aps, includingl ooku p, delete, len,a nd range lo ops, ares afet op er-\nform o nan il m ap reference,s ince itb eh avesl ikea ne mp tym ap.B ut storing toan il m ap\ncaus esap anic:\nages[\"carol\"] = 21 // panic: assignment to entry in nil map\nYo umu sta llocatet he map beforey ou can store int oit.\nAccessingam ap elementb ys ubscript ing a lways yield sav alue.I ft he k ey i sp resent int he\nmap, you get the cor respondingv alue; if not,y ou get the zerov alue for the elementt yp e,a sw e\nsaww it h ages[\"bob\"].F or m anyp ur pos esthat’sﬁ ne,b ut som etimesy ou n eed t ok now\nwhet her the elementw as reallyt here orn ot.F or example, ift he elementt yp eis numer ic,you\nmig hth avet od istinguish bet weenan on existente lementa nd ane lementt hath appens toh ave\nthev alue zero, usingat estl iket his:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 113,
      "page_label": "95"
    }
  },
  {
    "page_content": "ptg16105617\n96 CHAPTER 4. COMPOSITE TYPES\nage, ok := ages[\"bob\"]\nif !ok { /* \"bob\" is not a key in this map; age == 0. */ }\nYo u’ll often see these two statementsc om bine d,l iket his:\nif age, ok := ages[\"bob\"]; !ok { /* ... */ }\nSu bscript ing a m ap in thi sc ontext yield st wo v alues; t he s econ d is a b oole an that rep orts\nwhet her the el ementw as p resent.T he b oole an var iable iso ften cal le dok,e sp eci ally i fi ti s\nimmediate lyu sed in an ifcondit ion.\nAs wit hslices, maps cannot bec ompare dto eacho ther ;theo nlyl egal comp arisoni sw it hnil.\nTo testw hether t wo m aps co nt ain t he s amek eysa nd the s amea ss oci ated v alues, w em ust\nwr ite a loop:\nfunc equal(x, y map[string]int) bool {\nif len(x) != len(y) {\nreturn false\n}\nfor k, xv := range x {\nif yv, ok := y[k]; !ok || yv != xv {\nreturn false\n}\n}\nreturn true\n}\nObserveh ow weu se !ok to distinguish the ‘‘missing’’and ‘‘pres entb ut zero’’cases. Had we\nnaïvelyw ritt en xv != y[k],t he cal lbeloww ou ldi ncor rec tly rep ort its arguments as equ al:\n// True if equal is written incorrectly.\nequal(map[string]int{\"A\": 0}, map[string]int{\"B\": 42})\nGo doesn ot provide a set type,b ut since the keyso fam ap ared istinc t,am ap can ser vet his\npurpos e.T oi llustrate, the program dedup re ads a s equence ofl ines andp rintso nlyt he ﬁrs t\noccurrence o fe achd istinc t line. ( It’sav ar ianto ft he dup prog ram that w es howe d in",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 114,
      "page_label": "96"
    }
  },
  {
    "page_content": "occurrence o fe achd istinc t line. ( It’sav ar ianto ft he dup prog ram that w es howe d in\nSection1 .3.) The dedup prog ramus esam ap whose keysr epresent the set ofl ines thath ave\nalready app eared toe ns ure thats ubsequento cc urrences aren ot print ed.\ngopl.io/ch4/dedup\nfunc main() {\nseen := make(map[string]bool) // a set of strings\ninput := bufio.NewScanner(os.Stdin)\nfor input.Scan() {\nline := input.Text()\nif !seen[line] {\nseen[line] = true\nfmt.Println(line)\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 114,
      "page_label": "96"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.3. MAPS 97\nif err := input.Err(); err != nil {\nfmt.Fprintf(os.Stderr, \"dedup: %v\\n\", err)\nos.Exit(1)\n}\n}\nGo programmerso ften descr ibe a map usedi nt hisf ashiona sa‘‘seto fs tr ings’’withoutf ur ther\nado,b ut beware, not all map[string]boolvalues ares imples ets; som emayc ontain bot htrue\nand falsevalues.\nSometimesw en eed a map ors et whose keysa re slices, but because a map’sk eysm ustb ec om-\nparable,t hisc annot b ee xpress edd irec tly.H ow ever, itc an b ed on e in t wo s teps. Fir st w e\ndeﬁne a helperf unction k that maps eachk ey toas tr ing ,with thep ro per tyt hat k(x) == k(y)\nif ando nlyi fw ec on sider x and y equivalent. Then w ec re ate a m ap whose keysa re str ings,\napply ing the helperf unctiont oe achk ey beforew ea ccesst he map.\nThee xampleb elow usesam ap tor ecordt he numbero ft imes Addhasb eenc al le dwith a given\nlist ofs tr ings. I tu ses fmt.Sprintf to convert a s lice ofs tr ingsi nt oas ingles tr ing thati sa\nsuit ablem ap key,q uoting eachs lice elementw it h%qto records tr ing bound aries faithfully:\nvar m = make(map[string]int)\nfunc k(list []string) string { return fmt.Sprintf(\"%q\", list) }\nfunc Add(list []string){m [k(list)]++ }\nfunc Count(list []string) int { return m[k(list)] }\nThes amea ppro ach c an b eu sedf or a ny non-comp arable k ey t yp e,n ot justs lices. It ’se ven\nus efulf or comparable key typ eswhen you wantad eﬁnition of equ ality other than ==,s ucha s",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 115,
      "page_label": "97"
    }
  },
  {
    "page_content": "us efulf or comparable key typ eswhen you wantad eﬁnition of equ ality other than ==,s ucha s\ncase-insensit ive comparisons for str ings. A nd the t yp eof k(x) ne e dn’tb eas tr ing;a ny com-\nparable typ ewith thed esired equivalence pro per tyw ill do, such as int egers,a rrays, ors tr ucts.\nHere’sa nother exam pleo fm aps in action,ap rogram thatc ountst he occ urrences ofe achd is-\ntinc tUnico de co depoint in its in put. Since t here are a lar ge numbero fp ossiblec harac ters,\non lyas mall frac tiono fw hichw ou lda pp ear in an yp ar tic ulard ocument, a map i san atural\nway tok eept racko fj ustt he onest hath aveb eens eena nd their correspondingc ounts.\ngopl.io/ch4/charcount\n// Charcount computes counts of Unicode characters.\npackage main\nimport (\n\"bufio\"\n\"fmt\"\n\"io\"\n\"os\"\n\"unicode\"\n\"unicode/utf8\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 115,
      "page_label": "97"
    }
  },
  {
    "page_content": "ptg16105617\n98 CHAPTER 4. COMPOSITE TYPES\nfunc main() {\ncounts := make(map[rune]int) // counts of Unicode characters\nvar utflen [utf8.UTFMax + 1]int // count of lengths of UTF-8 encodings\ninvalid := 0// count of invalid UTF-8 characters\nin := bufio.NewReader(os.Stdin)\nfor {\nr, n, err := in.ReadRune() // returns rune, nbytes, error\nif err == io.EOF {\nbreak\n}\nif err != nil {\nfmt.Fprintf(os.Stderr, \"charcount: %v\\n\", err)\nos.Exit(1)\n}\nif r == unicode.ReplacementChar && n == 1 {\ninvalid++\ncontinue\n}\ncounts[r]++\nutflen[n]++\n}\nfmt.Printf(\"rune\\tcount\\n\")\nfor c, n := range counts {\nfmt.Printf(\"%q\\t%d\\n\", c, n)\n}\nfmt.Print(\"\\nlen\\tcount\\n\")\nfor i, n := range utflen {\nif i > 0 {\nfmt.Printf(\"%d\\t%d\\n\", i, n)\n}\n}\nif invalid > 0 {\nfmt.Printf(\"\\n%d invalid UTF-8 characters\\n\", invalid)\n}\n}\nThe ReadRune method perfor msU TF-8 deco dinga nd retur nst hree values: the decoded rune,\nthel engt h in bytes ofi ts UTF-8 enco ding, and ane rror value.T he onlye rror wee xp ect ise nd-\nof-ﬁle.I ft he i np utw as n ot a l egal UTF-8 enco dingo far une, t he r etur ned r unei s uni-\ncode.ReplacementCharandt he lengt his 1.\nThe charcount prog ram also p rintsac ount o ft he l engt hso ft he U TF-8 enco dings oft he\nrunest hata pp eared int he inp ut. A mapi sn ot the bestd at ast ruc turef or that; since enco ding\nlengt hsr ange onlyf ro m1t o utf8.UTFMax(w hichh as the value 4), an array ism orec ompact.\nAs ane xp eriment, wer an charcount on thisb ooki ts elf at one point.A lt hough it’sm ostlyi n",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 116,
      "page_label": "98"
    }
  },
  {
    "page_content": "As ane xp eriment, wer an charcount on thisb ooki ts elf at one point.A lt hough it’sm ostlyi n\nEnglish, ofc ours e,it doesh aveaf air numbero fn on-ASCII charac ters. Herea re the top ten:\n°2 7 B 15 F 14 é 13 A 10 < 5 & 5 D 4 ( 4 + 3\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 116,
      "page_label": "98"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.4. STRUCT S9 9\nandh erei st he distr ibution of the lengt hso fa ll the UTF-8 enco dings:\nlen count\n17 65391\n26 0\n37 0\n40\nThev alue typ eof a map can its elf beac omposite typ e,s ucha sam ap ors lice.I nt he fol low ing\nco de,t he key typ eof graph is string andt he value typ eis map[string]bool,r epresent ing a\nseto fs tr ings. C on ceptu ally, graph maps a str ing toas et ofr el ate dst rings, its successors ina\ndirec ted graph.\ngopl.io/ch4/graph\nvar graph = make(map[string]map[string]bool)\nfunc addEdge(from, to string) {\nedges := graph[from]\nif edges == nil {\nedges = make(map[string]bool)\ngraph[from] = edges\n}\nedges[to] = true\n}\nfunc hasEdge(from, to string) bool {\nreturn graph[from][to]\n}\nThe addEdge func tions hows the idiomaticw ay top opu lateam ap lazi ly, thati s, toi nitialize\neach v alue as its k ey a pp earsf or t he ﬁrs t time.T he hasEdge func tions hows h ow t he z ero\nvalue o fam issingm ap en tr y is o ften p ut t ow or k:e veni fn either from nor to is p resent,\ngraph[from][to]wi l lalways giveam eaningf ulresu lt.\nExercis e 4.8:Mo dif ycharcount to count letters,d ig its, ands oo ni nt heir Unico decategories,\nusingf unctions like unicode.IsLetter.\nExercis e 4.9:Wr ite a program wordfreq to rep ort the fre quency ofe achw ord in an inp utt ext\nﬁle.C al linput.Split(bufio.ScanWords) before the ﬁrs tcall to Scanto bre akt he inp uti nt o\nword sinsteado fl ines.\n4.4. Structs",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 117,
      "page_label": "99"
    }
  },
  {
    "page_content": "ﬁle.C al linput.Split(bufio.ScanWords) before the ﬁrs tcall to Scanto bre akt he inp uti nt o\nword sinsteado fl ines.\n4.4. Structs\nA st ruc tis ana ggregated at atype thatg ro ups toget her zeroo rm oren amed values ofa rbit rar y\ntypesa sa s inglee nt ity.E achv alue isc al le d aﬁel d.T he classic exampleo fas tr uct fro mdata\nprocessingi st he emp loy eer ecord, whose ﬁelds are a unique ID,t he emp loy ee’sn ame, address,\ndate ofb ir th, position,s al ary, manager,a nd the like. A ll oft hese ﬁelds are col lec ted int oas in-\nglee nt ity t hatc an b ec opie d as a unit, pas sedt of unctions and retur ned byt hem, store din\nar rays, ands oo n.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 117,
      "page_label": "99"
    }
  },
  {
    "page_content": "ptg16105617\n100 CHAPTER 4. COMPOSITE TYPES\nThes etwos tatementsd eclare a str uct typ ecalled Employee andav ar iable cal le ddilbert that\nis ani ns tance ofa n Employee:\ntype Employee struct {\nID int\nName string\nAddress string\nDoB time.Time\nPosition string\nSalary int\nManagerID int\n}\nvar dilbert Employee\nThei ndiv idu alﬁ elds o f dilbert area ccessedu singd ot not ation l ike dilbert.Name and\ndilbert.DoB.B ecause dilbert is a var iable,i ts ﬁelds are var iables too,s ow em ay assig nto a\nﬁeld:\ndilbert.Salary -= 5000 // demoted, for writing too few lines of code\nor takei ts addressa nd accessi tt hrough a point er:\nposition := &dilbert.Position\n*position = \"Senior \" + *position // promoted, for outsourcing to Elbonia\nThed ot not ation als oworksw it hap oint ert oas tr uct:\nvar employeeOfTheMonth *Employee = &dilbert\nemployeeOfTheMonth.Position += \" (proactive team player)\"\nThel asts tatement ise quivalentt o\n(*employeeOfTheMonth).Position += \" (proactive team player)\"\nGi vena ne mp loy ee’su nique ID,t he function EmployeeByID returnsap oint ert oa n Employee\nst ruc t. We can use the dot not ation toa ccessi ts ﬁelds:\nfunc EmployeeByID(id int) *Employee { /* ... */ }\nfmt.Println(EmployeeByID(dilbert.ManagerID).Position) // \"Pointy-haired boss\"\nid := dilbert.ID\nEmployeeByID(id).Salary = 0 // fired for... no real reason\nThel asts tatement updates the Employee st ruc tthat isp oint edt ob yt he resulto ft he cal lto",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 118,
      "page_label": "100"
    }
  },
  {
    "page_content": "Thel asts tatement updates the Employee st ruc tthat isp oint edt ob yt he resulto ft he cal lto\nEmployeeByID.I ft he r esultt yp e of EmployeeByID were c hange d to Employee insteado f\n*Employee,t he a ssig nments tatement wou ldn ot c ompi les ince its left-han ds ide w ou ldn ot\nidentify a var iable.\nFieldsa re usu allyw ritt eno ne per line, wit htheﬁ eld’sn amep re cedingi ts typ e,b ut con sec utive\nﬁelds oft he samet yp emayb ec om bine d, as wit hNameand Addresshere:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 118,
      "page_label": "100"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.4. STRUCT S1 01\ntype Employee struct {\nID int\nName, Address string\nDoB time.Time\nPosition string\nSalary int\nManagerID int\n}\nField order iss ig niﬁcant tot yp e identity.H ad wea ls ocombined the declarat iono ft he Posi-\ntion ﬁeld( also a str ing), ori nt erc hange dName and Address,w ew ou ldb ed eﬁningad if ferent\nst ruc ttype.T ypic ally weo nlyc om bine the declarat ions ofr el ate dﬁelds.\nThen ameo fas tr uct ﬁeldi se xp orted ifi tb eg insw it hac apit all etter; thisi sG o’sm ain access\ncont rol mechanism. A st ruc ttype may cont ain a mixtureo fe xp orted and unexp orted ﬁelds.\nSt ruc ttypest endt ob ev erb oseb ecause the yof ten invo l veal inef or each ﬁeld. A lt hough we\ncouldw rite o ut t he who le typ e each t imei ti sn eeded,t he r ep etit ion wou ldg et tires ome.\nIn ste ad, str uct typ esusuallya pp ear wit hin the declarat iono fan amed typ e li keEmployee.\nAn amed str uct typ eS can’td eclare a ﬁeldo ft he samet yp eS:a na ggregatev alue cannot con-\ntain its elf.( An analog ou s rest ric tiona pp lies t oa rrays.) B ut S mayd eclare a ﬁeldo ft he\npointert yp e*S,w hichl ets usc re ate rec ursived at ast ruc tures like lin ked lists andt re es. Thi si s\nillustrated int he codeb elow,w hichu sesab inar ytree toi mp lement an ins ertions or t:\ngopl.io/ch4/treesort\ntype tree struct {\nvalue int\nleft, right *tree\n}\n// Sort sorts values in place.\nfunc Sort(values []int) {\nvar root *tree\nfor _, v := range values {\nroot = add(root, v)\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 119,
      "page_label": "101"
    }
  },
  {
    "page_content": "left, right *tree\n}\n// Sort sorts values in place.\nfunc Sort(values []int) {\nvar root *tree\nfor _, v := range values {\nroot = add(root, v)\n}\nappendValues(values[:0], root)\n}\n// appendValues appends the elements of t to values in order\n// and returns the resulting slice.\nfunc appendValues(values []int, t *tree) []int {\nif t != nil {\nvalues = appendValues(values, t.left)\nvalues = append(values, t.value)\nvalues = appendValues(values, t.right)\n}\nreturn values\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 119,
      "page_label": "101"
    }
  },
  {
    "page_content": "ptg16105617\n102 CHAPTER 4. COMPOSITE TYPES\nfunc add(t *tree, value int) *tree {\nif t == nil {\n// Equivalent to return &tree{value: value}.\nt=n ew(tree)\nt.value = value\nreturn t\n}\nif value < t.value {\nt.left = add(t.left, value)\n}e lse {\nt.right = add(t.right, value)\n}\nreturn t\n}\nThez erov alue for a s tr uct i sc omposedo ft he zerov alues ofe acho fi ts ﬁel ds.I ti su su ally\ndesirable thatt he zerov alue bean atural ors ensibled efau lt. For example, in bytes.Buffer,\nthei nitial value oft he str uct isar eady-to-use emp tyb uf fer,a nd the zerov alue of sync.Mutex,\nwhichw e’ll see inC hapt er9 ,i sar eady-to-use unlocke dmu tex. S om etimest hiss ensiblei nitial\nbehavior happens for fre e,b ut som etimest he typ e desig ner has tow or kat it.\nThes tr uct typ ewith noﬁ elds is cal le dthe emptys tr uct,w ritt en struct{}.I th as size zeroa nd\ncarries noi nfor mat ionb ut may beu sefuln on etheless. S om eGo programmersu se iti ns tead\nof boolas the value typ eof a map thatr epresentsas et, toe mp hasize thato nlyt he keysa re sig-\nniﬁcant,b ut the space sav ingi sm arginala nd the s yntaxm orec umbers ome,s ow eg eneral ly\navoidi t.\nseen := make(map[string]struct{}) // set of strings\n// ...\nif _, ok := seen[s]; !ok {\nseen[s] = struct{}{}\n// ...first time seeing s...\n}\n4.4.1. Struct Literals\nAv alue ofas tr uct typ ecanb ew ritt enu singast r uc tlitera lthat speciﬁes values for itsﬁ elds.\ntype Point struct{ X, Y int }\np: =P oint{1, 2}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 120,
      "page_label": "102"
    }
  },
  {
    "page_content": "Av alue ofas tr uct typ ecanb ew ritt enu singast r uc tlitera lthat speciﬁes values for itsﬁ elds.\ntype Point struct{ X, Y int }\np: =P oint{1, 2}\nTherea re t wo for mso fs tr uct l it eral.T he ﬁrs t form,s hown a bove ,re quires t hatav alue be\nsp eciﬁed for ever yﬁeld, int he rig hto rder.I tb urdenst he writer( andr eader) wit hrememb er-\ninge xac tly whatt he ﬁelds are ,andi tm akes the codef rag i leshouldt he set of ﬁelds later grow\nor ber eordered.A ccordingly, thisf or mtend sto beu sedo nlyw it hin the packaget hatd eﬁnes\nthes tr uct typ e,o rw it hsmal lerst ruc ttypesf or whicht here is an o bv iou sﬁeldo rder ingc on-\nvent ion,l ike image.Point{x, y}or color.RGBA{red, green, blue, alpha}.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 120,
      "page_label": "102"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.4. STRUCT S1 03\nMo reo ften, the secon dform isu sed, inw hichas tr uct value isi nitialize dby listing som e or all\nof t he ﬁeldn ames an dt heir co rrespondingv alues, as in thi ss tatement f ro m theL issajous\nprog ramof Sec tion 1.4:\nanim := gif.GIF{LoopCount: nframes}\nIf a ﬁeldi so mitt edi nt hisk indo fl it eral,i ti ss et tot he zerov alue for itst yp e.B ecause names\narep rovide d,t he order of ﬁelds doesn’tm atter.\nThet wo for msc annot bem ixed int he samel it eral.N or can you use the (order-b ased)ﬁ rs t\nform o fl it eral t os ne aka ro und the r ulet hatu nexp orted i dentiﬁersm ay n ot b er efer red t o\nfrom another package.\npackage p\ntype T struct{ a, b int } // a and b are not exported\npackage q\nimport \"p\"\nvar _ = p.T{a: 1, b: 2} // compile error: can'tr eference a, b\nvar _ = p.T{1, 2} // compile error: can' tr eference a, b\nAlthough the lastl inea bove doesn’tm ention the unexp orted ﬁeldi dentiﬁers, it’sr eallyu sing\nthem implicitly, soi t’sn ot allow ed.\nSt ruc t values can bep asseda sa rguments tof unctions and retur ned fro mthem. F or ins tance,\nthis functions cales a Pointby a speciﬁed fac tor :\nfunc Scale(p Point, factor int) Point {\nreturn Point{p.X * factor, p.Y * factor}\n}\nfmt.Println(Scale(Point{1, 2}, 5)) // \"{5 10}\"\nFo refﬁciency,l argers tr uct typ es areu su allyp assedt oo rr etur ned fro mfunc tions indirec tly\nusingap oint er,\nfunc Bonus(e *Employee, percent int) int {\nreturn e.Salary * percent / 100\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 121,
      "page_label": "103"
    }
  },
  {
    "page_content": "usingap oint er,\nfunc Bonus(e *Employee, percent int) int {\nreturn e.Salary * percent / 100\n}\nandt hisi sr equired ift he functionm ustm odif yitsa rgument, since in a cal l-by-value langu age\nli keG o, the cal le dfunc tionr eceiveso nlyac opyo fa na rgument, not a reference tot he original\nargument.\nfunc AwardAnnualRaise(e *Employee) {\ne.Salary = e.Salary * 105 / 100\n}\nBecaus e st ruc ts ares oc ommonlyd ealt wit h thro ugh p oint ers,i t’sp os si blet ou se t his\nshorthand notation toc re ate and initialize a structvar iable ando bt ain its address:\npp := &Point{1, 2}\nIt ise xac tly equivalentt o\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 121,
      "page_label": "103"
    }
  },
  {
    "page_content": "ptg16105617\n104 CHAPTER 4. COMPOSITE TYPES\npp := new(Point)\n*pp = Point{1, 2}\nbut &Point{1, 2}canb eu sedd irec tly wit hin an expression, such as a functionc al l.\n4.4.2. Comparing Structs\nIf all the ﬁelds ofa s tr uct are comparable,t he str uct its elf isc omparable,s ot wo expressions of\nthat typ e mayb ec ompare d using == or !=.T he == op erat ionc omparest he c or responding\nﬁelds oft he two str ucts in order,s ot he two print ede xpressions below are equivalent:\ntype Point struct{ X, Y int }\np: =P oint{1, 2}\nq: =P oint{2, 1}\nfmt.Println(p.X == q.X && p.Y == q.Y) // \"false\"\nfmt.Println(p == q) // \"false\"\nComp arable str uct typ es, li keo ther comp arable typ es,mayb eu sed as the key typ eof a map.\ntype address struct {\nhostname string\nport int\n}\nhits := make(map[address]int)\nhits[address{\"golang.org\", 443}]++\n4.4.3. Struct Embedding and Anonymous Fields\nIn thiss ec tion,w e’ll see how Go’su nu sual st ruc tembedding me chanism lets usu se one named\nst ruc t type a sa n an ony mou s ﬁel d of a nother s tr uct t yp e,p rovidingac onvenients yntactic\nshortcuts ot hatas impled ot expressionl ike x.fcans tand for a chain of ﬁelds like x.d.e.f.\nConsider a 2-D drawingp rogram thatp rovides a librar yof shapes, sucha sr ec tangles, ellipses,\nst ars,a nd whe els. Her ea re two oft he typ esit mig htd eﬁne:\ntype Circle struct {\nX, Y, Radius int\n}\ntype Wheel struct {\nX, Y, Radius, Spokes int\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 122,
      "page_label": "104"
    }
  },
  {
    "page_content": "type Circle struct {\nX, Y, Radius int\n}\ntype Wheel struct {\nX, Y, Radius, Spokes int\n}\nA Circlehasﬁ elds for the Xand Yco ordinates ofi ts center, and a Radius.A Wheelhasa ll the\nfe atureso fa Circle,p lu sSpokes,t he numbero fi ns cribedr adi alsp okes. Let ’sc re ate a whe el:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 122,
      "page_label": "104"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.4. STRUCT S1 05\nvar w Wheel\nw.X = 8\nw.Y = 8\nw.Radius = 5\nw.Spokes = 20\nAs the set ofs hapesg rows, we’re bound ton ot ice similarities andr ep etit ion among them, soi t\nmayb ec onvenientt of ac tor out their common par ts:\ntype Point struct {\nX, Y int\n}\ntype Circle struct {\nCenter Point\nRadius int\n}\ntype Wheel struct {\nCircle Circle\nSpokes int\n}\nThea pp lic ationm ay b ec le arer for it,b ut thisc hange makes accessingt he ﬁelds ofa Wheel\nmore verb ose:\nvar w Wheel\nw.Circle.Center.X = 8\nw.Circle.Center.Y = 8\nw.Circle.Radius = 5\nw.Spokes = 20\nGo lets usd eclare a ﬁeldw it hat yp ebutn on ame; such ﬁelds are cal le dan ony mou sﬁel ds.T he\ntype oft he ﬁeldm ustb ean amed typ eor a point ert oan amed typ e.B elow, Circleand Wheel\nhave o ne ano ny mou s ﬁelde ach. W es ay t hata Point is embedded within Circle,a nd a\nCircleis emb edde dwithin Wheel.\ntype Circle struct {\nPoint\nRadius int\n}\ntype Wheel struct {\nCircle\nSpokes int\n}\nThan ks to e mb edding, w ec an refer t ot he n ames at t he l eaveso ft he i mp licitt re e without\ngiving the int erveningn ames:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 123,
      "page_label": "105"
    }
  },
  {
    "page_content": "ptg16105617\n106 CHAPTER 4. COMPOSITE TYPES\nvar w Wheel\nw.X = 8 // equivalent to w.Circle.Point.X = 8\nw.Y = 8 // equivalent to w.Circle.Point.Y = 8\nw.Radius = 5 // equivalent to w.Circle.Radius = 5\nw.Spokes = 20\nThee xplicitf or mss hown i nt he c ommentsa bove a re s till v alid,h ow ever, s howing t hat\n‘‘anonymou s ﬁeld’’is s om ethingo fam isnomer. T he ﬁelds Circle and Point do have\nnames—th at oft he named t yp e—butt hose names areo pt ion ali nd ot expressions.W em ay\nomit any ora ll oft he anony mou sﬁelds whens elec ting their subﬁelds.\nUnfortunately, there’sn oc or respondings horthand for the str uct l it eral sy nt ax, s on either of\nthes ewi l lcomp ile:\nw=W heel{8, 8, 5, 20} // compile error: unknown fields\nw=W heel{X: 8, Y: 8, Radius: 5, Spokes: 20} // compile error: unknown fields\nThes tr uct lit eral mustf ol low the shap eof the typ e de clarat ion, sow em ustu se one oft he two\nformsb elow,w hicha re equivalentt oe acho ther :\ngopl.io/ch4/embed\nw=W heel{Circle{Point{8, 8}, 5}, 20}\nw=W heel{\nCircle: Circle{\nPoint: Point{X: 8, Y: 8},\nRadius: 5,\n},\nSpokes: 20, // NOTE: trailing comma necessary here (and at Radius)\n}\nfmt.Printf(\"%#v\\n\", w)\n// Output:\n// Wheel{Circle:Circle{Point:Point{X:8, Y:8}, Radius:5}, Spokes:20}\nw.X = 42\nfmt.Printf(\"%#v\\n\", w)\n// Output:\n// Wheel{Circle:Circle{Point:Point{X:42, Y:8}, Radius:5}, Spokes:20}\nNo tice how the #adverb causes Printf’s %vverb tod ispl ayv alues in a for msimi lar toG os yn-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 124,
      "page_label": "106"
    }
  },
  {
    "page_content": "No tice how the #adverb causes Printf’s %vverb tod ispl ayv alues in a for msimi lar toG os yn-\ntax. F or str uct values, thisf or mincludes the nameo fe ach ﬁeld.\nBecaus e‘‘anonymou s’’ﬁelds doh avei mp licitn ames, you can’th avet wo anony mou sﬁelds of\nthes amet yp e since their names wou ldc onﬂic t. Andb ecause the nameo ft he ﬁeldi si mp lic-\nit lyd eter mined byi ts typ e,s ot oo ist he visibilit y of the ﬁeld. I nt he examples abov e,t he Point\nand Circle anonymou sﬁelds are exp orted.H ad the ybeen unexp orted (point and circle),\nwe cou lds till use the shorthand for m\nw.X = 8 // equivalent to w.circle.point.X = 8\nbutt he explicitl on gform shown int he comment wou ldb ef orbidden outside t he declaring\npackageb ecause circleand pointwouldb ei naccessible.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 124,
      "page_label": "106"
    }
  },
  {
    "page_content": "ptg16105617\nJ\nSONSECTION 4.5. 107\nWh \natw e’ve seens of ar ofs tr uct emb eddingi sj ustas pr ink lingo fs yntactic sugar o nt he dot\nnotation usedt os elec tst ruc t ﬁelds.L ater,w e’ll see tha ta nony mou sﬁelds need not bes tr uct\ntypes; anyn amed typ eor point ert oan amed typ ewi l ldo.B ut why wou ldy ou wantt oe mb ed\nat yp ethat has nos ubﬁelds?\nThea nswerh as to do wit hmethods. Th es horthand notation usedf or selec ting the ﬁelds ofa n\nembedde dtype wor ksf or selec ting its met hodsa sw el l.I ne ffec t,t he out ers tr uct typ e gains\nnotj ustt he ﬁelds oft he emb edde dtype but itsm et hodst oo.T hism echanism ist he main way\nthat co mp lex o bj e ctb eh avior s arec omposedf ro m simpler o nes. Comp ositi on is c entral to\nobjec t-oriente dprog ramming in Go, and we’ll explore itf ur ther in Sec tion 6.3.\n4.\n5. JSON\nJavaS \ncrip tObjec tNo tat ion( JSON) isas tand ard not ation for sendinga nd receiving str uctured\ninfor mat ion. JSONi sn ot the onlys uchn ot ation.X ML (§7.14), A SN.1, andG oogle’sP ro tocol\nBufferss er ves imi lar pur pos es ande achh as its niche,b ut because ofi ts simplicity,r eadabi lit y,\nandu nivers als up por t,J SONi st he most widely used.\nGo has excellents up por tfore ncodinga nd decodingt hese for mats, provide dby the stand ard\nlibrar ypackages encoding/json, encoding/xml, encoding/asn1,a nd \nsoo n, andt hese pack-\nages allh aves imi lar APIs.T hiss ec tion gives a brief overvie wof the most imp ortantp ar tsof",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 125,
      "page_label": "107"
    }
  },
  {
    "page_content": "soo n, andt hese pack-\nages allh aves imi lar APIs.T hiss ec tion gives a brief overvie wof the most imp ortantp ar tsof\nthe encoding/jsonpackage.\nJSONi sa\nne ncodingo fJ avaS crip tvalues—st r ings, numbers,b oole ans, arrays, ando bj e cts—as\nUnico detext. It ’sa ne fﬁcienty et readabler epresent ation for the basic dat atypeso fC hapt er3\nandt he composite typ esof thisc hapt er—ar rays, slices, str ucts, andm aps.\nTheb asic JSO Nt yp es aren umbers ( in decimal o rs cientiﬁcn ot ation), b oole ans( true or\nfalse), \nands tr ings, whicha re sequences ofU nico de co depoints enclos edi nd ou ble quotes,\nw\nith backslash escap es u\nsing a s\nimi lar not ation to G\no, thoug h JSO\nN’s \\uh\nhhh n\numeric e\nscap es \nde\nnot e UTF\n-16 codes, not runes.\nThes e b\nasic typ es m\nay b\ne c\nom bine d r\ne cursive ly u\nsing J\nSON a\nrrays and o\nbj e cts.  A JSO\nN a\nrray \ni\ns an o\nrdered sequence of v\nalues, writt en a\ns a\n comma-s eparated list e\nnclos ed i\nn s\nqu are brack- \nets; \nJSON a\nrrays are u\nsed t\no e\nncode G\no a\nrrays and s\nlices.  A J\nSON o\nbj e ct i\ns a m\napping  f\nro m\nst \nrings tov alues, writt ena sas equence of name:value pairss ep \narated byc ommasa nd sur-\nro unded byb races; JSONo bj e cts areu sedt oe ncodeG om aps (wit hst ringk eys) ands tr ucts.\nFo rexample:\nboolean true\nnumber -273.15\nstring \"She\nsaid \\\"Hello, BF\\\"\"\narray [\"gold\",\n\"silver\", \"bronze\"]\nobject {\"year\": 1980,\n\"event\": \"archery\",\n\"medals\": [\"gold\", \"silver\", \"bronze\"]}\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 125,
      "page_label": "107"
    }
  },
  {
    "page_content": "array [\"gold\",\n\"silver\", \"bronze\"]\nobject {\"year\": 1980,\n\"event\": \"archery\",\n\"medals\": [\"gold\", \"silver\", \"bronze\"]}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 125,
      "page_label": "107"
    }
  },
  {
    "page_content": "ptg16105617\n108 CHAPTER 4. COMPOSITE TYPES\nConsider an ap plic ationt hatg at hersm ov ier evie ws ando ffersr ecommend ation s.I ts Movie\ndata typ e andat ypic al list ofv alues ared eclare dbelow. ( Thes tr ing lit eralsa fter the Year and\nColorﬁeldd eclarat ions are ﬁel dtags;w e’ll explain them in a mom ent.)\ngopl.io/ch4/movie\ntype Movie struct {\nTitle string\nYear int `json:\"released\"`\nColor bool `json:\"color,omitempty\"`\nActors []string\n}\nvar movies = []Movie{\n{Title: \"Casablanca\", Year: 1942, Color: false,\nActors: []string{\"Humphrey Bogart\", \"Ingrid Bergman\"}},\n{Title: \"Cool Hand Luke\", Year: 1967, Color: true,\nActors: []string{\"Paul Newman\"}},\n{Title: \"Bullitt\", Year: 1968, Color: true,\nActors: []string{\"Steve McQueen\", \"Jacqueline Bisset\"}},\n// ...\n}\nData s tr uctures li ke t hisa re a ne xcel lent ﬁtf or J SON, an di t’se asy t oc onvert i nb ot h\ndirec tion s.C onvertingaG od at a st ruc turel ike movies to JSONi sc al le dmarshaling.M ar-\nsh alingi sd on eby json.Marshal:\ndata, err := json.Marshal(movies)\nif err != nil {\nlog.Fatalf(\"JSON marshaling failed: %s\", err)\n}\nfmt.Printf(\"%s\\n\", data)\nMarshal produces a byt es lice cont ainingav er y long str ing wit hno ext raneous white space;\nwe’ve folde dthel ines soi t ﬁts:\n[{\"Title\":\"Casablanca\",\"released\":1942,\"Actors\":[\"Humphrey Bogart\",\"Ingr\nid Bergman\"]},{\"Title\":\"Cool Hand Luke\",\"released\":1967,\"color\":true,\"Ac\ntors\":[\"Paul Newman\"]},{\"Title\":\"Bullitt\",\"released\":1968,\"color\":true,\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 126,
      "page_label": "108"
    }
  },
  {
    "page_content": "id Bergman\"]},{\"Title\":\"Cool Hand Luke\",\"released\":1967,\"color\":true,\"Ac\ntors\":[\"Paul Newman\"]},{\"Title\":\"Bullitt\",\"released\":1968,\"color\":true,\"\nActors\":[\"Steve McQueen\",\"Jacqueline Bisset\"]}]\nThisc ompact r epresent ation containsa ll t he i nfor mat ionb ut it’sh ardt or ead. F or h uman\ncons ump tion, a var iant c al le djson.MarshalIndent produces neatl yi ndente d output.T wo\naddition ala rguments deﬁne a p reﬁxf or e achl ineo fo ut put and a s tr ing f or e achl evel o f\nindentation:\ndata, err := json.MarshalIndent(movies, \"\", \" \")\nif err != nil {\nlog.Fatalf(\"JSON marshaling failed: %s\", err)\n}\nfmt.Printf(\"%s\\n\", data)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 126,
      "page_label": "108"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.5. JSON 109\nThec odea bove prints\n[\n{\n\"Title\": \"Casablanca\",\n\"released\": 1942,\n\"Actors\": [\n\"Humphrey Bogart\",\n\"Ingrid Bergman\"\n]\n},\n{\n\"Title\": \"Cool Hand Luke\",\n\"released\": 1967,\n\"color\": true,\n\"Actors\": [\n\"Paul Newman\"\n]\n},\n{\n\"Title\": \"Bullitt\",\n\"released\": 1968,\n\"color\": true,\n\"Actors\": [\n\"Steve McQueen\",\n\"Jacqueline Bisset\"\n]\n}\n]\nMars halingu sest he Gos tr uct ﬁeldn ames as t he ﬁeldn ames for the JSONo bj e cts (through\nreﬂec tion,a sw e’ll see i nS ec tion 12.6). On ly exp orted ﬁelds are marsh ale d,w hichi sw hy we\nch ose capit alize dnamesf or all the Goﬁ eldn ames.\nYo umayh aven ot ice dthat the nameo ft he Year ﬁeldc hange dto released in the out put,a nd\nColor ch ange dto color.T hat’sb ecause oft he ﬁel d tags.A ﬁeldt ag isas tr ing ofm et adat a\nasso ciate dat comp ile timew it htheﬁ eldo fas tr uct:\nYear int `json:\"released\"`\nColor bool `json:\"color,omitempty\"`\nAﬁ eldt ag may b ea ny lit eral str ing ,buti ti sc onvent ion allyi nt erprete das a s pace-s eparated\nlist of key:\"value\" pairs; since t he y cont ain do uble quotation m arks, ﬁel dt ags ar eu su ally\nwr itt enw it h raw s tr ing l it erals. The json ke y cont rol s theb eh avior of t he encoding/json\npackage, and other encoding/... packages fol low thisc onvent ion.T he ﬁrs tpart oft he json\nﬁeldt ag s peciﬁes an al ternat ive J SONn amef or t he G oﬁ eld. F ield tags ar eo ften u sedt o\nsp ecif y an idiomaticJ SONn amel ike total_countforaG oﬁ eldn amed TotalCount.T he tag",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 127,
      "page_label": "109"
    }
  },
  {
    "page_content": "sp ecif y an idiomaticJ SONn amel ike total_countforaG oﬁ eldn amed TotalCount.T he tag\nfor Color has an addi tion alo pt ion, omitempty,w hichi ndic ates thatn oJ SONo ut put should\nbe p ro duce d if the ﬁeldh as t he z erov alue for itst yp e (false,h ere) ori so ther wis e empt y.\nSure e noug h,theJ SONo ut put forCasabl anca,ab lack-and-w hite mov ie, has no colorﬁeld.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 127,
      "page_label": "109"
    }
  },
  {
    "page_content": "ptg16105617\n110 CHAPTER 4. COMPOSITE TYPES\nThei nv ers eop erat iont om arsh aling, decodingJ SONa nd popu lat ingaG od at ast ruc ture, is\ncalled unmarshaling,a nd i ti sd on e by json.Unmarshal.T he c odeb elow u nmarsh als t he\nJSONm ov ied at a into a slice ofs tr uctsw hose onlyﬁ eldi s Title.B yd eﬁnings uitableG od at a\nst ruc tures in thisw ay,w ec an selec twhichp ar tsof the JSONi np utt od ecodea nd whicht od is-\ncard . Wh en Unmarshal returns, i th as ﬁlled i nt he sl ice w it h the Title infor mat ion; other\nnames in the JSONa re ignored.\nvar titles []struct{ Title string }\nif err := json.Unmarshal(data, &titles); err != nil {\nlog.Fatalf(\"JSON unmarshaling failed: %s\", err)\n}\nfmt.Println(titles) // \"[{Casablanca} {Cool Hand Luke} {Bullitt}]\"\nMany web ser vices provide a JSONi nt erface—ma ke a requestw it hHT TP andb ackc om est he\ndesired infor mat ioni nJ SONf or mat. T oi llustrate, let’sq uer ytheG itHu bissuet rackeru sing\nitsw eb-s ervice interface.F irst we’ll deﬁne the necessary typ es andc on stants:\ngopl.io/ch4/github\n// Package github provides a Go API for the GitHub issue tracker.\n// See https://developer.github.com/v3/search/#search-issues.\npackage github\nimport \"time\"\nconst IssuesURL = \"https://api.github.com/search/issues\"\ntype IssuesSearchResult struct {\nTotalCount int `json:\"total_count\"`\nItems []*Issue\n}\ntype Issue struct {\nNumber int\nHTMLURL string `json:\"html_url\"`\nTitle string\nState string\nUser *User\nCreatedAt time.Time`json:\"created_at\"`",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 128,
      "page_label": "110"
    }
  },
  {
    "page_content": "}\ntype Issue struct {\nNumber int\nHTMLURL string `json:\"html_url\"`\nTitle string\nState string\nUser *User\nCreatedAt time.Time`json:\"created_at\"`\nBody string // in Markdown format\n}\ntype User struct {\nLogin string\nHTMLURL string `json:\"html_url\"`\n}\nAs before, the names ofa ll the s tr uct ﬁelds mustb ec apit alize deven if t heir JSONn ames are\nnot. H ow ever, the matchingp ro cesst hata ss oci ates JSONn ames wit hGo str uct names dur ing\nunmarsh alingi sc as e-insensit ive ,so it’so nlyn ecessary tou se a ﬁeldt ag whent here’sa nu nder-\nscorei nt he JSONn ameb ut not int he Gon ame. A gain, wea re beings elec tive about which\nﬁelds tod ecode; the GitHu bsearch respons econt ainsc on siderably morei nfor mat iont hanw e\nshowh ere.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 128,
      "page_label": "110"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.5. JSON 111\nThe SearchIssues func tionm akes an HTTP r equesta nd decodes the resulta sJ SON. Since\ntheq uer y termsp resent edb yau serc ou ldc ontain charac tersl ike ? and & that haves peci al\nme aning in a URL, weu se url.QueryEscapeto ens ure thatt he yaret aken literal ly.\ngopl.io/ch4/github\npackage github\nimport (\n\"encoding/json\"\n\"fmt\"\n\"net/http\"\n\"net/url\"\n\"strings\"\n)\n// SearchIssues queries the GitHub issue tracker.\nfunc SearchIssues(terms []string) (*IssuesSearchResult, error) {\nq: =u rl.QueryEscape(strings.Join(terms, \" \"))\nresp, err := http.Get(IssuesURL + \"?q=\" + q)\nif err != nil {\nreturn nil, err\n}\n// We must close resp.Body on all execution paths.\n// (Chapter 5 presents 'defer',w hich makes this simpler.)\nif resp.StatusCode != http.StatusOK {\nresp.Body.Close()\nreturn nil, fmt.Errorf(\"search query failed: %s\", resp.Status)\n}\nvar result IssuesSearchResult\nif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\nresp.Body.Close()\nreturn nil, err\n}\nresp.Body.Close()\nreturn &result, nil\n}\nThee arlier examples used json.Unmarshal to decodet he ent ire contentso fab ytes lice as a\nsingleJ SONe nt ity.F or v ar iety, t hise xampleu sest he st reami n gde coder, json.Decoder,\nwhicha llowss everal JSONe nt ities tob ed ecoded ins equence fro mthes ames tream, although\nwe d on’tn eed tha tf eature h ere. A sy ou m ig hte xp ect,t here i sac or respondings treaming\nenco dercalled json.Encoder.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 129,
      "page_label": "111"
    }
  },
  {
    "page_content": "we d on’tn eed tha tf eature h ere. A sy ou m ig hte xp ect,t here i sac or respondings treaming\nenco dercalled json.Encoder.\nThec al lto Decode popu lates the var iableresult.T here are var ious ways wec an for mat its\nvalue nice ly.T he s implest, dem on strated b yt he issues commandb elow,i sa sat ext table\nwith ﬁxe d-w idth c olumns, b ut i nt he ne xt s ec tion w e’ll see a m ores op histicate d approach\nbasedo nt empl ates.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 129,
      "page_label": "111"
    }
  },
  {
    "page_content": "ptg16105617\n112 CH\nAPTER COMPOSITE TYPES4.\ngopl.io/ch4/issues\n// Issues prints a table of GitHub issues matching the search terms.\npackage main\nimport (\n\"fmt\"\n\"log\"\n\"os\"\n\"gopl.io/ch4/github\"\n)\nfunc main() {\nresult, err := github.SearchIssues(os.Args[1:])\nif err != nil {\nlog.Fatal(err)\n}\nfmt.Printf(\"%d issues:\\n\", result.TotalCount)\nfor _, item := range result.Items {\nfmt.Printf(\"#%-5d %9.9s %.55s\\n\",\nitem.Number, item.User.Login, item.Title)\n}\n}\nThec ommand-linea rguments \nspecif ythes earc hterms. Th ec ommand below quer iestheG o\nproj e ct’si ssuet rackerf or the listo fo penb ugs rel ate d to JSONd ecoding:\n$g\nob uild gopl.io/ch4/issues\n$. /issues repo:golang/go is:open json decoder\n13 issues:\n#5680 eaigner encoding/json: set key converter on en/decoder\n#6050 gopherbot encoding/json: provide tokenizer\n#8658 gopherbot encoding/json: use bufio\n#8462 kortschak encoding/json: UnmarshalText confuses json.Unmarshal\n#5901 rsc encoding/json: allow override type marshaling\n#9812 klauspost encoding/json: string tag not symmetric\n#7872 extempora encoding/json: Encoder internally buffers full output\n#9650 cespare encoding/json: Decoding gives errPhase when unmarshalin\n#6716 gopherbot encoding/json: include field name in unmarshal error me\n#6901 lukescott encoding/json, encoding/xml: option to treat unknown fi\n#6384 joeshaw encoding/json: encode precise floating point integers u\n#6647 btracey x/tools/cmd/godoc: display type kind of each named type",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 130,
      "page_label": "112"
    }
  },
  {
    "page_content": "#6384 joeshaw encoding/json: encode precise floating point integers u\n#6647 btracey x/tools/cmd/godoc: display type kind of each named type\n#4237 gjemiller encoding/base64: URLEncoding padding is optional\nTheG itHu \nb we b-s ervice interface at https://developer.github.com/v3/ hasm anym ore\nfe \naturest hanw eh aves pace for here.\nExercis e 4.10:Mo dif yissuesto \nrep ort the results in agec ategor ies, say lesst hanam onth old,\nles\ns t\nhan a y\near o\nld, an\nd more than a y\near o\nld.\nExercis e 4\n.11: B\nuild a t\nool t\nhat l\nets users cre ate, read, update, and close G\nitHu b i\nssues fro m \nt\nhe c\nommand line, inv oking their preferred text editor w\nhen s\nubst ant ial text input i\ns r\nequired.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 130,
      "page_label": "112"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.6. TEXT AND HTML TEMPLATES 113\nExercis e 4.12:Thep opu lar web comic xkcd hasaJ SONi nt erface.F or example, a r equestt o\nhttps://xkcd.com/571/info.0.json produces a detai le d des crip tiono fc omic 571, o ne of\nmany favor ites. D ow nlo ad each URL (once!) andb ui ld an ofﬂinei ndex. W rite a to ol xkcd\nthat, usingt hisi ndex, printst he URL andt ranscript ofe achc omic thatm atch esas earc hterm\nprov ide don the command line.\nExercis e 4.13: TheJ SON-b ased w eb s er vice oft he O penM ov ieD at abas e lets you s earc h\nhttps://omdbapi.com/ foram ov ieb yn amea nd d ow nlo ad itsp osteri mage . Wr ite a to ol\nposterthat down loads the posteri mage for the movien amed ont he command line.\n4.6. T exta nd HTML T emplates\nThep re vious exampled oeso nlyt he simplestp ossiblef or matting ,forw hich Printf is ent ire ly\nade quate. B ut som etimesf or matting mustb em oree laborate, and it’sd esirable tos ep aratet he\nformat f ro m thec odem orec ompletely. T hisc an b ed on e with th e text/template and\nhtml/template packages, whichp rovide a mechanism for subst ituting the values ofv ar iables\ninto a text orH TMLt empl ate.\nAt empl ate i sas tr ing o rﬁ le co nt ainingo ne o rm orep or tions e nclos edi nd ou ble braces,\n{{...}},c al le dac tions.M osto ft he s tr ing i sp rint edl it eral ly, but t he a ctions t rigger o ther\nbehavior s.E acha ctionc ontainsa ne xpressioni nt he templ ate langu age, a simpleb ut pow erful",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 131,
      "page_label": "113"
    }
  },
  {
    "page_content": "behavior s.E acha ctionc ontainsa ne xpressioni nt he templ ate langu age, a simpleb ut pow erful\nnotation for printing values, selec ting str uct ﬁelds,c al lin gf unctions and methods, expressing\ncont rol ﬂow sucha s if-else st atementsa nd range lo ops, andi ns tantiat ingo ther templ ates.\nAs implet empl ate str ing iss hown below :\ngopl.io/ch4/issuesreport\nconst templ = `{{.TotalCount}} issues:\n{{range .Items}}----------------------------------------\nNumber: {{.Number}}\nUser: {{.User.Login}}\nTitle: {{.Title|p rintf \"%.64s\"}}\nAge: {{.CreatedAt |d aysAgo}} days\n{{end}}`\nThist empl ate ﬁrs t pr intst he numbero fm atchingi ssues, thenp rintst he number, user, tit le,\nanda ge ind ays ofe acho ne.W it hin an action,t here isan ot ion of the cur rentv alue,r efer red\nto a s ‘‘dot’’andw ritt ena s ‘‘.’’,ap er iod. T he d ot initial lyr eferst ot he templ ate’sp arameter,\nwhichw ill bea github.IssuesSearchResult in thise xample. T he {{.TotalCount}} ac tion\nexp ands t ot he v alue o ft he TotalCount ﬁeld, p rint edi nt he u su alw ay.T he\n{{range .Items}}and {{end}} ac tions cre ate a l oop, sot he text bet weent hemi se xp ande d\nmu ltiplet imes, wit hdotb ound tos uccessive elements of Items.\nWi thin an ac tion,t he | notation makes the resulto fo ne operat iont he argumento fa nother,\nanalogou sto a Unix shel lpip eline. I nt he cas eof Title,t he secon dop erat ioni st he printf\nfunc tion, whichi sab ui lt-in synony mfor fmt.Sprintf in allt empl ates. F or Age,t he secon d",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 131,
      "page_label": "113"
    }
  },
  {
    "page_content": "func tion, whichi sab ui lt-in synony mfor fmt.Sprintf in allt empl ates. F or Age,t he secon d\nop erat ioni st he f ol low ing f unction, daysAgo,w hichc onvertst he CreatedAt ﬁeldi nt o an\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 131,
      "page_label": "113"
    }
  },
  {
    "page_content": "ptg16105617\n114 CHAPTER 4. COMPOSITE TYPES\nel aps edt ime, using time.Since:\nfunc daysAgo(t time.Time) int {\nreturn int(time.Since(t).Hours() / 24)\n}\nNo tice thatt he typ eof CreatedAtis time.Time,n ot string.I nt he samew ay thatat yp emay\ncont rol its str ing for matting (§2.5) b yd eﬁningc er tain met hods, a typ e maya ls odeﬁne meth-\nodst oc ontrol its JSONm arsh alinga nd unmarsh alingb eh avior.T he JSON-marsh ale d value\nof a time.Timeis a str ing inas tand ard for mat.\nProducingo ut put wit hat empl ate isat wo-stepp ro cess. Fir st wem ustp arse the templ ate int o\nas uitablei nt ernal represent ation,a nd thene xe cut e it on speciﬁci np uts. Parsin gn eed bed on e\non lyo nce. T he c odeb elow cre atesa nd p arsest he templ ate templ deﬁne d ab ove . No tet he\nch ainingo fm et hod cal ls:template.New createsa nd retur nsat empl ate; Funcs adds daysAgo\nto the set off unctions accessiblew it hin thist empl ate, thenr etur nst hatt empl ate;ﬁ nally, Parse\nis cal le don the result.\nreport, err := template.New(\"report\").\nFuncs(template.FuncMap{\"daysAgo\": daysAgo}).\nParse(templ)\nif err != nil {\nlog.Fatal(err)\n}\nBecaus etemp lates areu su allyﬁ xe dat comp ile time, fai luret op arse a templ ate indic ates a fatal\nbugi nt he program. The template.Must helperf unctionm akes er ro rhand lingm orec on-\nvenient: ita ccepts a templ ate and ane rror,c he cks thatt he error isn il (andp anics other wis e),",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 132,
      "page_label": "114"
    }
  },
  {
    "page_content": "venient: ita ccepts a templ ate and ane rror,c he cks thatt he error isn il (andp anics other wis e),\nandt henr etur nst he templ ate. W e’ll com eback to thisi de a in Sec tion 5.9.\nOnce the templ ate has beenc re ate d,aug mente dwith daysAgo,p arsed, and che cke d,w ec an\nexec ute itu singa github.IssuesSearchResult as the dat asource and os.Stdoutas the des-\ntination:\nvar report = template.Must(template.New(\"issuelist\").\nFuncs(template.FuncMap{\"daysAgo\": daysAgo}).\nParse(templ))\nfunc main() {\nresult, err := github.SearchIssues(os.Args[1:])\nif err != nil {\nlog.Fatal(err)\n}\nif err := report.Execute(os.Stdout, result); err != nil {\nlog.Fatal(err)\n}\n}\nThep rogram printsap lain text rep ort liket his:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 132,
      "page_label": "114"
    }
  },
  {
    "page_content": "ptg16105617\nT\nEXT AND HTML TEMPLATESSECTION 4.6. 115\n$g ob uild gopl.io/ch4/issuesreport\n$. /issuesreport repo:golang/go is:open json decoder\n13 issues:\n----------------------------------------\nNumber: 5680\nUser: \neaigner\nTitle: encoding/json: set key converter on en/decoder\nAge: 750 days\n----------------------------------------\nNumber: 6050\nUser: gopherbot\nTitle: encoding/json: provide tokenizer\nAge: 695 days\n----------------------------------------\n...\nNo \nw let’st ur nto the html/template package. \nItu sest he sameA PI and expressionl angu age\nas text/template buta ddsf eaturesf or \naut omat ic andc ontext-appropriatee scapingo fs tr ings\nappear ingw it hin HTML, JavaS crip t,C SS, orU RLs. Thes e fe aturesc an helpa void a perenni al\nsecurity p ro blem o fH TMLg enerat ion, an injectiona ttack, in which an adv ersary c raf ts a\nst ringv alue like the tit leo fa ni ssuet oi nclude malicious codet hat, wheni mp rop erlye scap ed\nby a templ ate, gives themc ontrol overt he page.\nThet empl ate below printst he listo fi ssues as an HTML table.N ot ethed if ferenti mp ort:\ngopl.io/ch4/issueshtml\nimport \"html/template\"\nv\nar issueList = template.Must(template.New(\"issuelist\").Parse(` \n<\nh1>{{.TotalCount}} issues</h1>\n<table>\n<tr style='text-align: left'>\n<th>#</th>\n<th>State</th>\n<th>User</th>\n<th>Title</th>\n</tr>\n{{range .Items}}\n<tr>\n<td><a href='{{.HTMLURL}}'>{{.Number}}</a></td>\n<td>{{.State}}</td>\n<td><a href='{{.User.HTMLURL}}'>{{.User.Login}}</a></td>",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 133,
      "page_label": "115"
    }
  },
  {
    "page_content": "{{range .Items}}\n<tr>\n<td><a href='{{.HTMLURL}}'>{{.Number}}</a></td>\n<td>{{.State}}</td>\n<td><a href='{{.User.HTMLURL}}'>{{.User.Login}}</a></td>\n<td><a href='{{.HTMLURL}}'>{{.Title}}</a></td>\n</tr>\n{{end}}\n</table>\n`))\nThec ommand \nbelow exe cut est he newt empl ate ont he results ofas lig htlyd if ferentq uer y:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 133,
      "page_label": "115"
    }
  },
  {
    "page_content": "ptg16105617\n116 CHAPTER 4. COMPOSITE TYPES\n$g ob uild gopl.io/ch4/issueshtml\n$. /issueshtml repo:golang/go commenter:gopherbot json encoder >issues.html\nFigure4 .4 s hows t he a pp earance o ft he t able in a w eb b rows er.T he l in ks connec t to t he\nappropriatew eb pages at GitHu b.\nFigure 4.4. An HTMLt able ofG op ro jec tissues rel ating toJ SONe ncoding.\nNo neo ft he issues in Figur e4 .4 pos e ac hallenge for HTML, but wec an see the effec tmore\nclearlyw it hissues whose tit les cont ain HTML met acharac tersl ike &and <.W e’ve selec ted two\nsuch issues for thise xample:\n$. /issueshtml repo:golang/go 3133 10535 >issues2.html\nFigure4 .5 shows the resulto ft hisq uer y.N ot ice thatt he html/template packagea ut omat i-\ncallyH TML-es cap edt he tit les sot hatt he yappear literal ly. H ad weu sedt he text/template\npackageb ym istake ,thef our-ch arac ter str ing \"&lt;\" wouldh aveb eenr endered asal ess-t han\nch arac ter '<',a nd the s tr ing \"<link>\" wouldh aveb ecom e a link element, c hang ing the\nst ruc tureo ft he HTMLd ocumenta nd perhaps comp romisingi ts sec urity.\nWe can s up presst hisa ut o-es capingb eh avior for ﬁelds tha tc ontain t rusted H TMLd at a by\nusingt he named str ing typ etemplate.HTML insteado f string.S imi lar named typ es exist for\ntr usted JavaS crip t,C SS, andU RLs. Th ep rogram below demon strates the princip leb yu sing\ntwoﬁ elds wit hthes amev alue but dif ferentt yp es:Ais a str ing and Bis a template.HTML.\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 134,
      "page_label": "116"
    }
  },
  {
    "page_content": "twoﬁ elds wit hthes amev alue but dif ferentt yp es:Ais a str ing and Bis a template.HTML.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 134,
      "page_label": "116"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 4.6. TEXT AND HTML TEMPLATES 117\nFigure 4.5. HTML met acharac ters in issuet it les arec or rec tly displ aye d.\ngopl.io/ch4/autoescape\nfunc main() {\nconst templ = `<p>A: {{.A}}</p><p>B: {{.B}}</p>`\nt: =t emplate.Must(template.New(\"escape\").Parse(templ))\nvar data struct {\nAs tring // untrusted plain text\nBt emplate.HTML // trusted HTML\n}\ndata.A = \"<b>Hello!</b>\"\ndata.B = \"<b>Hello!</b>\"\nif err := t.Execute(os.Stdout, data); err != nil {\nlog.Fatal(err)\n}\n}\nFigure4 .6 s hows t he t empl ate’so ut put asi ta pp earsi nab rows er.W ec an s ee t hat A was\nsu bjec tto escapingb ut Bwas not.\nFigure 4.6. St ringv alues areH TML-es cap edb ut template.HTMLvalues aren ot.\nWe haves pace heret os howo nlyt he most basic featureso ft he templ ate system. A sa lways, for\nmore infor mat ion, cons ult the packaged ocumentation:\n$g od oc text/template\n$g od oc html/template\nExercis e 4.14:Create a web ser ver thatq uer iesGitHub oncea nd thena llowsn av igationo ft he\nlist ofb ug rep orts, milestones, andu sers.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 135,
      "page_label": "117"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 136,
      "page_label": "118"
    }
  },
  {
    "page_content": "ptg16105617\n5\nFunctions\nAf unctionl ets usw rap upas equence ofs tatementsa sau nitt hatc an bec al le dfrom els e where\nin a p rogram, per haps m ultiplet imes. Fun ctions m akei tp ossiblet ob re akab ig j ob i nt o\nsmal lerpieces thatm ig htw el lbe writt enb yd if ferentp eoples ep arated byb ot htime and space.\nAf unctionh ides its implementation det ails fro mitsu sers.F or all oft hese reasons,f unctions\nareac riticalp ar tof any programmingl angu age.\nWe’ve seenm anyf unctions already.N ow let’st aket imef or a moret horo ugh dis cussion. The\nrunninge xampleo ft hisc hapt eri saw eb c raw ler,t hati s, t he c omponent o faw eb s earc h\nengine r esponsible f or f etchingw eb p ages, di scov ering t he l in ks within t hem, fet chingt he\npagesi dentiﬁed b yt hose l in ks, ands oo n. A we b craw ler givesu sa mp leo pp ortunity t o\nexplore re cursion, an onymou s func tions,e rror h andling, a nd a sp ectso ff unctions t hata re\nunique toG o.\n5.1. Function Declarations\nAf unctiond eclarat ionh as a name, a listo fp arameters, an opt ion all isto fr esults, andab ody:\nfunc name(parameter-list)( result-list){\nbody\n}\nThep arameter list speciﬁes t he names andt yp es of the function’s para meters,w hicha re the\nlo cal variables whose values or ar gum ents ares up plie dby the cal ler.T he resultl ists peciﬁes\nthet yp esof the values thatt he functionr etur ns. Ift he functionr etur nso ne unnamed result\nor",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 137,
      "page_label": "119"
    }
  },
  {
    "page_content": "thet yp esof the values thatt he functionr etur ns. Ift he functionr etur nso ne unnamed result\nor \nnor esults at al l, p arenthes es areo pt ion ala nd usu allyo mitt ed. L eaving off t he resultl ist\nentire lyd eclaresaf unctiont hatd oesn ot retur n anyv alue andi sc al le don lyf or itse ffec ts. In\nthe hypotfunc tion,\n119\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 137,
      "page_label": "119"
    }
  },
  {
    "page_content": "ptg16105617\n120 CHAPTER 5. FUNCTIONS\nfunc hypot(x, y float64) float64 {\nreturn math.Sqrt(x*x + y*y)\n}\nfmt.Println(hypot(3, 4)) // \"5\"\nx and y arep arametersi nt he declarat ion,3 and 4 area rguments oft he cal l,a nd the function\nreturnsa float64value.\nLike parameters, results may b en amed.I nt hatc as e,e achn amed eclaresal ocal variablei ni-\ntialize dto the zerov alue for itst yp e.\nAf unctiont hath as a res ultl istm uste nd w it h a return st atement unlesse xe cut ion cle arly\ncannot reach the end oft he function, perhaps because the functione nd swith a c al lto panic\nor ani nﬁnite forlo opw it hno break.\nAs wes aw wit hhypot,as equence ofp arameterso rr esults oft he samet yp ecanb ef ac tored so\nthat the typ eitself isw ritt eno nlyo nce. T hese two declarat ions are equivalent:\nfunc f(i, j, k int, s, t string) {/ *. .. */ }\nfunc f(i int, j int, k int, s string, t string) { /* ... */ }\nHere are fourw ays tod eclare a f unctionw it htwop arametersa nd one result, allo ft yp eint.\nTheb lank identiﬁer can beu sedt oe mp hasize thatap arameter isu nu sed.\nfunc add(x int, y int) int {r eturn x + y }\nfunc sub(x, y int) (z int) {z=x-y ;r eturn }\nfunc first(x int, _ int) int { return x }\nfunc zero(int, int) int {r eturn 0 }\nfmt.Printf(\"%T\\n\", add) // \"func(int, int) int\"\nfmt.Printf(\"%T\\n\", sub) // \"func(int, int) int\"\nfmt.Printf(\"%T\\n\", first) // \"func(int, int) int\"\nfmt.Printf(\"%T\\n\", zero) // \"func(int, int) int\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 138,
      "page_label": "120"
    }
  },
  {
    "page_content": "fmt.Printf(\"%T\\n\", sub) // \"func(int, int) int\"\nfmt.Printf(\"%T\\n\", first) // \"func(int, int) int\"\nfmt.Printf(\"%T\\n\", zero) // \"func(int, int) int\"\nThet yp eof a functioni ss om etimesc al le dits sig nat ure.T wo functions havet he samet yp eor\nsig nature if the yhave the sames equence ofp arameter typ es andt he sames equence ofr esult\ntypes. Th en ames ofp arametersa nd results don’ta ffec tthet yp e,n or doesw hether orn ot the y\nwere declare dusingt he fac tored for m.\nEv ery f unctionc al lmu stp rovide an argumen tf or eachp arameter,i nt he order in whic ht he\nparametersw ered eclare d.G oh as n oc on cepto fd efau ltp arameter values, n or a ny w ay to\nsp ecif y arguments byn ame, sot he names ofp arametersa nd results don’tm attert ot he cal ler\nexcept as documentation.\nParametersa re local variables wit hin the bodyo ft he function, wit htheir initial values set to\nthea rguments sup plie dby the cal ler.F unctionp arametersa nd named results arev ar iables in\nthes amel exic alblock as the function’so ut ermostl ocal variables.\nArguments arep assed by value,s ot he functionr eceivesac opyo fe acha rgument; modiﬁca-\ntion sto the copy do not affec tthec al ler.H ow ever, ift he argumentc ontainss om ekind ofr ef-\nerence,l ikea p oint er, slice,m ap,f unction, orc hannel,t hent he cal lermayb ea ffec ted bya ny\nmo diﬁcation sthef unctionm akes tov ar iablesin direc tly referred tob yt he argument.\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 138,
      "page_label": "120"
    }
  },
  {
    "page_content": "mo diﬁcation sthef unctionm akes tov ar iablesin direc tly referred tob yt he argument.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 138,
      "page_label": "120"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.2. RECURSION 121\nYo umayo cc asionallye ncount eraf unctiond eclarat ionw it houtabod y, indic atingt hatt he\nfunc tioni si mp lemente din a langu ageo ther thanG o. S uchad eclarat iond eﬁnest he function\nsig nature.\npackage math\nfunc Sin(x float64) float64 // implemented in assembly language\n5.2. Recursion\nFunc tions m ay be re cur siv e,t hati s, t he y mayc al l themselves, ei ther dir ec tly o ri ndirec tly.\nRe cursioni sap ow erfult echnique for manyp ro blems, ando fc ours eit’se ss ent ial for process-\ningr ec ursived at a st ruc tures. InS ec tion 4.4, w eu sedr ec ursiono veratree t oi mp lementa\nsimplei ns ertions or t.I nt hiss ec tion,w e’ll use ita gain for processingH TMLd ocuments.\nThee xamplep rogram below usesan on-stand ard package, golang.org/x/net/html,w hich\nprov ides an HTML par ser. T he golang.org/x/... repositories holdp ackages designe dand\nmaintained b yt he G ot eamf or a pp lic ations s ucha sn et wor king, i nt ernat ionalize d text\nprocessing, mobilep latfor ms, imagem anipu lat ion, cryptography,a nd develop ert ools.T hese\npackages aren ot int he stand ard librar y becaus e they’re still u nder de ve lopment orb ecause\nthey’re rarelyn eeded byt he maj ority ofG op rogrammers.\nThep ar tsof the golang.org/x/net/html APIt hatw e’ll need are shown below.T he function\nhtml.Parse re ads a s equence ofb ytes, parsest hem, andr etur nst he rooto ft he HTMLd oc-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 139,
      "page_label": "121"
    }
  },
  {
    "page_content": "html.Parse re ads a s equence ofb ytes, parsest hem, andr etur nst he rooto ft he HTMLd oc-\numentt re e,w hichi sa n html.Node.H TMLh as several kinds ofn odes—te xt, comments, and\nso on—bu th erew ea re con cer ned onlyw it hel ement no des oft he for m<name key='value'>.\ngolang.org/x/net/html\npackage html\ntype Node struct {\nType NodeType\nData string\nAttr []Attribute\nFirstChild, NextSibling *Node\n}\ntype NodeType int32\nconst (\nErrorNode NodeType = iota\nTextNode\nDocumentNode\nElementNode\nCommentNode\nDoctypeNode\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 139,
      "page_label": "121"
    }
  },
  {
    "page_content": "ptg16105617\n122 CHAPTER 5. FUNCTIONS\ntype Attribute struct {\nKey, Val string\n}\nfunc Parse(r io.Reader) (*Node, error)\nThe main func tionp arsest he s tand ard i np uta sH TML, extrac ts thel in ks usingar ec ursive\nvisitfunc tion, andp rintse achd is cov ere dlin k:\ngopl.io/ch5/findlinks1\n// Findlinks1 prints the links in an HTML document read from standard input.\npackage main\nimport (\n\"fmt\"\n\"os\"\n\"golang.org/x/net/html\"\n)\nfunc main() {\ndoc, err := html.Parse(os.Stdin)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err)\nos.Exit(1)\n}\nfor _, link := range visit(nil, doc) {\nfmt.Println(link)\n}\n}\nThe visit func tiont raversesa nH TMLn odet re e,e xt racts the lin kfrom the href attr ibute of\neach an chor element <a href='...'>,a pp end sthel in ksto a s lice ofs tr ings, andr etur nst he\nresu lting slice:\n// visit appends to links each link found in n and returns the result.\nfunc visit(links []string, n *html.Node) []string {\nif n.Type == html.ElementNode && n.Data == \"a\" {\nfor _, a := range n.Attr {\nif a.Key == \"href\" {\nlinks = append(links, a.Val)\n}\n}\n}\nfor c := n.FirstChild; c != nil; c = c.NextSibling {\nlinks = visit(links, c)\n}\nreturn links\n}\nTo des cendt he tre efora n ode n, visit re cursive lyc al lsi ts elf for eacho f n’sc hi ldren, which\nareh eld in the FirstChildlin ked list.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 140,
      "page_label": "122"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.2. RECURSION 123\nLet’sr un findlinks on the Goh om epage ,piping the out put offetch (§1.5) t ot he inp uto f\nfindlinks.W e’ve edite dtheo ut put slig htlyf or brevit y.\n$g ob uild gopl.io/ch1/fetch\n$g ob uild gopl.io/ch5/findlinks1\n$. /fetch https://golang.org | ./findlinks1\n#\n/doc/\n/pkg/\n/help/\n/blog/\nhttp://play.golang.org/\n//tour.golang.org/\nhttps://golang.org/dl/\n//blog.golang.org/\n/LICENSE\n/doc/tos.html\nhttp://www.google.com/intl/en/policies/privacy/\nNo tice t he v ar ietyo ff or mso fl in ks that ap pear in t he p age. L ater we’ll see h ow tor es olve\nthem rel ative tot he bas e URL,https://golang.org,t om akea bs olut eURLs.\nThen ext program usesr ec ursiono vert he HTMLn odet re eto print the str uctureo ft he tre ein\noutline. A si te ncount ers eache lement, itp ushest he element’st ag ont oas tack,t henp rintst he\nst ack.\ngopl.io/ch5/outline\nfunc main() {\ndoc, err := html.Parse(os.Stdin)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"outline: %v\\n\", err)\nos.Exit(1)\n}\noutline(nil, doc)\n}\nfunc outline(stack []string, n *html.Node) {\nif n.Type == html.ElementNode {\nstack = append(stack, n.Data) // push tag\nfmt.Println(stack)\n}\nfor c := n.FirstChild; c != nil; c = c.NextSibling {\noutline(stack, c)\n}\n}\nNo teo ne subtlet y:a lt hough outline‘‘pu shes’’an elemento n stack,t here isn oc or responding\npop. W hen outline callsi ts elf rec ursively, the cal le ere ceivesac opyo f stack.A lt hough the",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 141,
      "page_label": "123"
    }
  },
  {
    "page_content": "pop. W hen outline callsi ts elf rec ursively, the cal le ere ceivesac opyo f stack.A lt hough the\ncallee m ay ap pend el ements t ot hiss lice,m odif yingi ts under ly ing a rray an dp erhaps e ven\nal locating a n ew a rray,i td oesn’tm odif y thei nitial elements t hata re visible tot he cal ler,s o\nwhen the functionr etur ns, the cal ler’s stackis asi tw as beforet he cal l.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 141,
      "page_label": "123"
    }
  },
  {
    "page_content": "ptg16105617\n124 CHAPTER 5. FUNCTIONS\nHere’st he out lineo f https://golang.org,a gain edite dforb re vit y:\n$g ob uild gopl.io/ch5/outline\n$. /fetch https://golang.org | ./outline\n[html]\n[html head]\n[html head meta]\n[html head title]\n[html head link]\n[html body]\n[html body div]\n[html body div]\n[html body div div]\n[html body div div form]\n[html body div div form div]\n[html body div div form div a]\n...\nAs y ou c an s ee b ye xp erimenting w it h outline,m ostH TMLd ocuments can b ep ro cessed\nwith onlyaf ew level sof rec ursion, but it’sn ot hardt oc on str uct pat holog ical web pages that\nre quiree xt remelyd eepr ec ursion.\nMany programmingl angu agei mp lementation sus eaﬁ xe d-size functionc al lst ack;s izes fro m\n64KB to2 MB aret ypic al.F ixed-size stacksi mp ose a l imito nt he depth ofr ec ursion, soo ne\nmu stb ec aref ult oa void a sta cko verﬂow when traversin gl arge d at a st ruc tures rec ursively;\nﬁxe d-size stacksm ay evenp os eas ec urity risk. I nc ontrast, typic al Go imp lementation sus e\nvar iable-size stackst hats tart small and grow as needed upt oal imito nt he order ofag igabyte.\nThisl ets usu se rec ursions afelya nd wit houtw or rying about overﬂow.\nExercis e 5.1:Change the findlinks prog ramto traverse the n.FirstChild lin ked listu sing\nre cursive cal lst o visitinsteado fal oop.\nExercis e 5.2:Wr ite a functiont op opu lateam apping fro melementn ames— p, div, span,a nd\nso on—to t he numbero fe lements wit hthat name in an HTMLd ocumentt re e.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 142,
      "page_label": "124"
    }
  },
  {
    "page_content": "so on—to t he numbero fe lements wit hthat name in an HTMLd ocumentt re e.\nExercis e 5.3:Wr ite a f unctiont op rint the contentso fa ll text nodes in an HTML do cument\ntree.D on ot des cendi nt o<script> or <style> elements, since their cont entsare not visible\nin a web brows er.\nExercis e 5.4:Extend the visit func tions ot hati te xt racts other kinds ofl in ksfrom the doc-\nument, such as images, scr ipts, ands ty les he ets.\n5.3. Multiple R eturn Values\nAf unctionc an retur n more t hano ne result. We ’ve s eenm anye xamples o ff unctions f ro m\nst and ard packages thatr etur ntwov alues, the desired computation alr esulta nd ane rror value\nor boole anthat indic ates whether the computation wor ked.T he next examples hows how to\nwr ite one ofo ur own.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 142,
      "page_label": "124"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.3. MULTIPLE RETURN VALUES 125\nThep rogram below isav ar iat iono f findlinks that makes the HTTPr equesti ts elf sot hatw e\nno lon g ern eed tor un fetch.B ecause the HTTPa nd parsingo perat ions can fail, findLinks\nde clarest wo results: the listo fd is cov ere dlin ks anda ne rror.I ncidentally, the HTMLp arser\ncanu su allyr ecov erf ro m badi np uta nd c on str uct a d ocumentc ontaininge rror n odes, so\nParserarelyf ai ls; wheni td oes, it’st ypic ally due tou nderly ing I/O erro rs.\ngopl.io/ch5/findlinks2\nfunc main() {\nfor _, url := range os.Args[1:] {\nlinks, err := findLinks(url)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"findlinks2: %v\\n\", err)\ncontinue\n}\nfor _, link := range links {\nfmt.Println(link)\n}\n}\n}\n// findLinks performs an HTTP GET request for url, parses the\n// response as HTML, and extracts and returns the links.\nfunc findLinks(url string) ([]string, error) {\nresp, err := http.Get(url)\nif err != nil {\nreturn nil, err\n}\nif resp.StatusCode != http.StatusOK {\nresp.Body.Close()\nreturn nil, fmt.Errorf(\"getting %s: %s\", url, resp.Status)\n}\ndoc, err := html.Parse(resp.Body)\nresp.Body.Close()\nif err != nil {\nreturn nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n}\nreturn visit(nil, doc), nil\n}\nTherea re fourr etur nst atementsi n findLinks,e acho fw hichr etur nsap air ofv alues. The\nﬁrs tthre ereturnsc ause the functiont op asst he underly ing error sfrom the http and html",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 143,
      "page_label": "125"
    }
  },
  {
    "page_content": "ﬁrs tthre ereturnsc ause the functiont op asst he underly ing error sfrom the http and html\npackages ont ot he cal ler.I nt he ﬁrs tcase,t he error isr etur ned unchange d;i nt he secon dand\nthird, i ti sa ug mente d with a ddition alc ontext inf or mat ionb y fmt.Errorf (§7.8). If find-\nLinksis successf ul, the ﬁnalr etur nst atement retur nst he slice ofl in ks,with noe rror.\nWe muste ns ure that resp.Bodyis clos eds ot hatn et wor kresources arep ro perly releasede ven\nin cas e of e rror.G o’sg arb agec ol lec tor r ec ycles un us edm emor y,b ut d on ot a ssume i tw ill\nre lease u nu sed o perat ings ystemr es ources like o penﬁ les an dn et wor k connec tion s.T he y\nshouldb ec los ede xplicitly.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 143,
      "page_label": "125"
    }
  },
  {
    "page_content": "ptg16105617\n126 CHAPTER 5. FUNCTIONS\nTher esulto fc al lingam ulti-value dfunc tioni sat up leo fv alues. Th ec al lerof suchaf unction\nmu ste xplicitlya ssig nthev alues tov ar iables if anyo ft hema re tob eu sed:\nlinks, err := findLinks(url)\nTo ignoreo ne oft he values, assig nit tot he blank identiﬁer :\nlinks, _ := findLinks(url) // errors ignored\nTher esulto fam ulti-value dcall may its elf ber etur ned fro ma( mu lti-value d)callingf unction,\nas in thisf unctiont hatb eh avesl ike findLinksbutl ogs its argument:\nfunc findLinksLog(url string) ([]string, error) {\nlog.Printf(\"findLinks %s\", url)\nreturn findLinks(url)\n}\nAm ulti-value d call m ay ap pear as t he s olea rgumentw henc al lingaf unctiono fm ultiple\nparameters. A lt hough r arelyu sedi np ro duc tionc ode, t hisf eature iss om etimesc onvenient\nduring debug gings ince itl ets usp rint all the results ofac al lusingas ingles tatement.T he two\npr int statementsb elow havet he samee ffec t.\nlog.Println(findLinks(url))\nlinks, err := findLinks(url)\nlog.Println(links, err)\nWe ll-chosenn ames can document the sig niﬁcanceo faf unction’sr esults. Names ar ep ar tic u-\nlarlyv aluablew henaf unctionr etur nsm ultipler esults oft he samet yp e,l ike\nfunc Size(rect image.Rectangle) (width, height int)\nfunc Split(path string) (dir, file string)\nfunc HourMinSec(t time.Time) (hour, minute, second int)\nbuti t’sn ot always necessary ton amem ultipler esults solelyf or documentation.F or ins tance,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 144,
      "page_label": "126"
    }
  },
  {
    "page_content": "buti t’sn ot always necessary ton amem ultipler esults solelyf or documentation.F or ins tance,\nconv ent ion dic tates thataﬁna l bool resu lti ndic ates success; an error resu lto ften needsn o\nexplanation.\nIn a functionw it hname dresu lts, the operands ofar etur nst atement may beo mitt ed. T hisi s\ncalled a bare return.\n// CountWordsAndImages does an HTTP GET request for the HTML\n// document url and returns the number of words and images in it.\nfunc CountWordsAndImages(url string) (words, images int, err error) {\nresp, err := http.Get(url)\nif err != nil {\nreturn\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 144,
      "page_label": "126"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.4. ERRORS 127\ndoc, err := html.Parse(resp.Body)\nresp.Body.Close()\nif err != nil {\nerr = fmt.Errorf(\"parsing HTML: %s\", err)\nreturn\n}\nwords, images = countWordsAndImages(doc)\nreturn\n}\nfunc countWordsAndImages(n *html.Node) (words, images int) { /* ... */ }\nAb arer etur nis a sho rthand way tor etur neach oft he named resultv ar iables in order,s oi n\nthef unctiona bove ,each retur nst atement ise quivalentt o\nreturn words, images, err\nIn functions liket hiso ne,w it hmany retur nst atementsa nd several results, barer etur nsc an\nre duce code dup lic ation, but the yrarelym akec odee asier tou nderst and.F or ins tance,i t’sn ot\nobviou sat ﬁrs t glance thatt he two early retur nsa re equivalentt o return 0, 0, err(b ecaus e\nther esultv ar iables words and images arei nitialize d to t heir zerov alues) andt hatt he ﬁnal\nreturn is e quivalentt o return words, images, nil.F or thisr eason, barer etur nsa re best\nus eds paring ly.\nExercis e 5.5:Implement countWordsAndImages.( SeeE xercis e4.9 for word-split ting.)\nExercis e 5.6: Mo dif y the corner func tioni n gopl.io/ch3/surface (§3.2) t ou se n amed\nresu lts andab arer etur nst atement.\n5.4. Errors\nSome f unctions a lways succe e d at t heir task. F or e xample, strings.Contains and str-\nconv.FormatBool have well-deﬁne dresu lts for all possiblea rgumentv alues andc annot fai l—\nbarring c at astrop hic an du np redic table scenar ios li ker unningo ut of m emor y,w here t he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 145,
      "page_label": "127"
    }
  },
  {
    "page_content": "barring c at astrop hic an du np redic table scenar ios li ker unningo ut of m emor y,w here t he\nsy mpt omi sf ar fro mthec ause and fro mwhicht here’sl it tle hop eof recov ery.\nOt her fun ctions a lways succe e d so l on g as t heir p re con dit ion sarem et. F or e xample, t he\ntime.Date func tiona lways cons tructsa time.Time from itsc omponents—ye a r, m onth,a nd\nso on—un les st he lasta rgument( thet imez on e)i s nil,i nw hichc as eit panics. Thi sp anic isa\nsure sig nof a bug in the cal lingc odea nd shouldn ever happen in a wel l-w rit ten program.\nFo rmany other functions,e veni naw el l-w rit ten program, successi sn ot assure dbecaus e it\ndep ends onf ac tor sbeyond the programmer’sc ontrol . Anyf unctiont hatd oesI /O,f or exam-\nple, mustc onfrontt he possibi lit y of error,a nd onlyan aïve programmer belie ves a simpler ead\nor write cannot fai l.I ndeed,i t’sw hent he most reliableo perat ions fai l unexp ectedlyt hatw e\nmost need tok noww hy.\nEr ror saret hu san importantp ar tof a package’sA PI ora na pp lic ation’su seri nt erface,a nd fai l-\nurei sj usto ne ofs everal expec ted beh avior s.T hisi st he appro ach Got akes toe rror handling.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 145,
      "page_label": "127"
    }
  },
  {
    "page_content": "ptg16105617\n128 CHAPTER 5. FUNCTIONS\nAf unctionf or whichf ai lurei sa ne xp ected beh avior retur nsa na ddition alr esult, conv ent ion-\nal lyt he l asto ne.I ft he f ai lureh as o nlyo ne p ossiblec ause,t he r esulti sab oole an, usually\ncalled ok,a si nt hise xampleo fac ache looku pthat always succe e dsu nlesst here was noe nt ry\nfort hatk ey :\nvalue, ok := cache.Lookup(key)\nif !ok {\n// ...cache[key] does not exist...\n}\nMo reo ften, ande sp eci ally for I/O,t he fai lurem ay haveavar iet yo fc ausesf or whicht he cal ler\nwi l lne e dan explanation.I ns uchc as es,thet yp eof the addition alr esulti s error.\nTheb ui lt-in typ eerror is ani nt erface typ e.W e’ll see moreo fw hatt hism eans and its impli-\ncation sfore rror handlingi nC hapt er7 .F or now it’se noug hto knowt hata n errormayb en il\nor non-ni l,t hatn il imp lies successa nd non-ni l implies failure ,andt hatan on-ni lerror has\nan erro rmess age str ing whichw ec an obt ain byc al lingi ts Error method orp rint byc al ling\nfmt.Println(err)or fmt.Printf(\"%v\", err).\nUs ual lyw henaf unctionr etur nsa n on-ni l er ror,i ts other results areu ndeﬁne dands houldb e\nig nored.H ow ever, a few functions may retur npartialr esults in erro rcases. F or example, ifa n\ner ror occ ursw hi lere adingf ro ma ﬁle,ac al lto Read returnst he numbero fb ytes itw as able to\nre ad an dan error value descr ibing the pro blem. F or cor rec tbehavior,s om ecallersm ay need",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 146,
      "page_label": "128"
    }
  },
  {
    "page_content": "re ad an dan error value descr ibing the pro blem. F or cor rec tbehavior,s om ecallersm ay need\nto pro cesst he incompleted at abefore handlingt he e rror,s oi ti si mp ortantt hats uchf unctions\nclearlyd ocumentt heir results.\nGo’sa ppro ach s ets ita part fr om manyo ther langu ages in whic hf ai lures arer ep orted u sing\nex cepti ons,n ot ordinar y values. A lt hough God oesh avea ne xception mechanism ofs or ts, as\nwe will see i nS ec tion 5.9, iti su sedo nlyf or rep ortingt ruly unexp ected error sthat indic atea\nbug, not the routine error sthat a robustp rogram shouldb eb ui ltt oe xp ect.\nTher easonf or thisd esig nis thate xception stend toe nt ang let he des crip tiono fa ne rror wit h\nthec ontrol ﬂow required toh andlei t, often leadingt oa nu ndesirable out com e:r outine error s\narer ep orted t ot he end u seri nt he f or m of a ni ncomprehensible s tack t race,f ull o f\ninfor mat iona bout t he s tr uctureo ft he p rogram b ut l acking i nt ellig iblec ontext ab outw hat\nwent wro ng.\nBy c ontrast, G op rogramsu se o rdinar y cont rol-ﬂow m echanismsl ike if and return to\nresp ond toe rror s.T hiss ty leu ndeni ably demands thatm orea tt ent ion bep aid toe rror-han-\ndlingl og ic,butt hati sp re cis ely the point.\n5.4.1. Error-Handling Strategies\nWh enaf unctionc al l returnsa ne rror,i t’st he c al ler’sr esponsibilit y to ch ecki ta nd t ake\nappropriatea ction. Dep endingo nt he sit uat ion, there may beanu mb ero fp ossibi lit ies. Let’s",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 146,
      "page_label": "128"
    }
  },
  {
    "page_content": "appropriatea ction. Dep endingo nt he sit uat ion, there may beanu mb ero fp ossibi lit ies. Let’s\ntake a looka tﬁ ve oft hem.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 146,
      "page_label": "128"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.4. ERRORS 129\nFirst,a nd most common, ist o prop agate thee rror,s ot hataf ai lurei nas ubro utine becom esa\nfai lureo ft he c al lingr outine.W es aw exam ples o ft hisi nt he findLinks func tiono f\nSection5 .3. I ft he c al l to http.Get fai ls, findLinks returnst he H TTPe rror t ot he c al ler\nwithoutf ur thera do:\nresp, err := http.Get(url)\nif err != nil {\nreturn nil, err\n}\nIn c ontrast, if t he c al l to html.Parse fai ls, findLinks do es notr etur n theH TMLp arser’s\ner ror direc tly because itl acks two cruci alpieces ofi nfor mat ion: thatt he error occ urre din the\npars er, and the U RL o ft he d ocumentt hatw as bein gp arsed. I nt hisc as e, findLinks con-\nst ruc tsan ew error message thati ncludes bot hpieces ofi nfor mat iona sw el las the underly ing\npars eer ror :\ndoc, err := html.Parse(resp.Body)\nresp.Body.Close()\nif err != nil {\nreturn nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n}\nThe fmt.Errorf func tionf or mats an er ro rmess age u sing fmt.Sprintf andr etur nsan ew\nerror value.W eu se itt ob ui ld des crip tivee rror sby successive lyp reﬁxinga ddition alc ontext\ninfor mat iont ot he o riginale rror m essage . Wh ent he e rror i su lt imate lyh andled b yt he\nprog ram’s main func tion, its houldp rovide a cle ar caus alc hain fro mther ootp ro blem tot he\nov eral l fai lure, reminiscento faN ASAa ccidenti nv est igat ion:\ngenesis: crashed: no parachute: G-switch failed: bad relay orientation",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 147,
      "page_label": "129"
    }
  },
  {
    "page_content": "ov eral l fai lure, reminiscento faN ASAa ccidenti nv est igat ion:\ngenesis: crashed: no parachute: G-switch failed: bad relay orientation\nBecaus eer ror messagesa re fre quentlyc hained toget her,m essage str ingss houldn ot bec apit al-\nize d andn ewlines shouldb ea voide d.T he resulting error smayb el on g,b ut the ywi l lbe self-\ncont ained whenf ound b yt ools like grep.\nWh end esig ninge rror messages, bed elib erate, sot hate acho ne isam eaningf uldes crip tiono f\nthep ro blem wit hsufﬁcienta nd relevantd et ail, and bec on sistent,s ot hate rror sreturned by\nthes amef unctiono rb yag ro upo ff unctions int he samep ackagea re simi lar in for mandc an\nbe dealt wit hin the samew ay.\nFo rexample, the os packageg uarante est hate very error retur ned byaﬁle o perat ion, sucha s\nos.Openor the Read, Write,o r Closemethodso fa no pen ﬁle,d es crib esn ot justt he natureo f\nthef ai lure( permissiond enie d,n os uchd irec tor y,a nd soo n) but als othen ameo ft he ﬁle,s o\nthec al lerne e dn’ti nclude thisi nfor mat ion in the error message itc on str ucts.\nIn general,t he cal lf(x) is responsible for rep ortingt he att emp ted operat ionf andt he argu-\nment value x as the yre latet ot he context oft he error.T he cal leris responsible for addingf ur-\nther inf or mat iont hati th as b ut t he c al l f(x) do es not, suc ha st he U RL in t he c al l to\nhtml.Parseab ove .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 147,
      "page_label": "129"
    }
  },
  {
    "page_content": "html.Parseab ove .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 147,
      "page_label": "129"
    }
  },
  {
    "page_content": "ptg16105617\n130 CHAPTER 5. FUNCTIONS\nLet’sm ov eon tot he secon dst rateg yforh andlinge rror s.F or error sthat represent transiento r\nunpredic table pro blems, itm ay makes ense to re try thef ai le dop erat ion, possibly wit had el ay\nbetweent ries, andp erhaps wit hal imito nt he numbero fa tt emp tso rt he times pent trying\nbefore giv ing upe nt ire ly.\ngopl.io/ch5/wait\n// WaitForServer attempts to contact the server of a URL.\n// It tries for one minute using exponential back-off.\n// It reports an error if all attempts fail.\nfunc WaitForServer(url string) error {\nconst timeout = 1 * time.Minute\ndeadline := time.Now().Add(timeout)\nfor tries := 0; time.Now().Before(deadline); tries++ {\n_, err := http.Head(url)\nif err == nil {\nreturn nil // success\n}\nlog.Printf(\"server not responding (%s); retrying...\", err)\ntime.Sleep(time.Second << uint(tries)) // exponential back-off\n}\nreturn fmt.Errorf(\"server %s failed to respond after %s\", url, timeout)\n}\nThird, ifp rogressi si mp ossible,t he cal lercanp rint the error and stopt he program gracef ully,\nbutt hisc ours e of a ctions houldg eneral lyb er es erve d fort he m ain packag eo fap rogram.\nLibrar yfunc tions shouldu su allyp ro pagatee rror sto the cal ler,u nlesst he error isas ig nof an\ninternal inconsistenc y—th at is, a bug .\n// (In function main.)\nif err := WaitForServer(url); err != nil {\nfmt.Fprintf(os.Stderr, \"Site is down: %v\\n\", err)\nos.Exit(1)\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 148,
      "page_label": "130"
    }
  },
  {
    "page_content": "// (In function main.)\nif err := WaitForServer(url); err != nil {\nfmt.Fprintf(os.Stderr, \"Site is down: %v\\n\", err)\nos.Exit(1)\n}\nAm orec onvenientw ay toa chie vet he samee ffec tis toc al llog.Fatalf.A sw it hal lthe log\nfunc tions,b yd efau lti tp reﬁxest he timea nd datet ot he error message .\nif err := WaitForServer(url); err != nil {\nlog.Fatalf(\"Site is down: %v\\n\", err)\n}\nThed efau ltf or mat ish elpf ul in a lon g-r unnings er ver,b ut lesss of or ani nt erac tivet ool:\n2006/01/02 15:04:05 Site is down: no such domain: bad.gopl.io\nFo ram orea tt rac tiveo ut put,w ec an set the preﬁxu sedb yt he log packaget ot he nameo ft he\ncommand, and sup presst he displ ayo ft he datea nd time:\nlog.SetPrefix(\"wait: \")\nlog.SetFlags(0)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 148,
      "page_label": "130"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.4. ERRORS 131\nFo urth, in s om e cases, it ’ss ufﬁcientj ustt ol og t he e rror a nd the nc ontinue, p erhaps w it h\nre duce dfunc tionality.A gain there’sac hoice bet weenu singt he log package, whicha ddst he\nusualp reﬁx:\nif err := Ping(); err != nil {\nlog.Printf(\"ping failed: %v; networking disabled\", err)\n}\nandp rint ing direc tly tot he stand ard error stream:\nif err := Ping(); err != nil {\nfmt.Fprintf(os.Stderr, \"ping failed: %v; networking disabled\\n\", err)\n}\n(A lllogfunc tions app end a newline if one isn ot already present.)\nAndﬁ fth and ﬁnally, inr arec as eswe can safelyi gnore an error ent ire ly:\ndir, err := ioutil.TempDir(\"\", \"scratch\")\nif err != nil {\nreturn fmt.Errorf(\"failed to create temp dir: %v\", err)\n}\n// ...use temp dir...\nos.RemoveAll(dir) // ignore errors; $TMPDIR is cleaned periodically\nThec al lto os.RemoveAll mayf ai l,b ut the program ignoresi tb ecause the operat ings ystem\nperiodic ally cle anso ut the temporar y direc tor y.I nt hisc as e,d is cardingt he error was inten-\ntion al, but the program logic wou ldb et he sameh ad wef or g ott ent od ealw it h it.G et into the\nhabit of con sider inge rror s af ter every f unctionc al l,a nd whe ny ou d elib eratelyi gnoreo ne,\ndo cumenty ouri nt ent ion cle arly.\nEr ror handlingi nG oh as a par tic ularr hythm. A fter che cking ane rror,f ai lurei su su allyd ealt\nwith b efores uccess. I ff ai lurec ausest he f unctiont or etur n, thel og ic fors uccessi sn ot",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 149,
      "page_label": "131"
    }
  },
  {
    "page_content": "with b efores uccess. I ff ai lurec ausest he f unctiont or etur n, thel og ic fors uccessi sn ot\nindente dwithin an else blockb ut fol lowsa tt he out erl evel.F unctions tendt oe xhibit a com-\nmons tr ucture, wit has er iesof initial che cks tor ej e cte rror s,f ol low edb yt he subst anceo ft he\nfunc tion at the end,m inimal lyi ndente d.\n5.4.2. End o fF ile (EOF)\nUs ual ly, the var ietyo fe rror s that a fun ctionm ay retur nis int erest ing tot he end userb ut not\nto t he i nt erveningp rogram logic. On occasion, h ow ever, a p rogram m ustt aked if ferent\nac tions dep endingo nt he kindo fe rror thath as occ urre d.C on sider an attemp tto read n bytes\nof dat afrom a ﬁle.I f n is chosent ob et he lengt hof the ﬁle,a ny error representsaf ai lure. O n\ntheo ther hand, ift he cal lerrepeatedlyt ries tor eadﬁ xe d-size chunksu nt i ltheﬁ le ise xhausted,\nthec al lermu str espond dif ferentlyt oa ne nd-of-ﬁle condit ion thani td oest oa ll other erro rs.\nFo rthis reason, the iopackageg uarante est hata ny readf ai lurec ausedb ya ne nd-of-ﬁle condi-\ntion isa lways rep orted byad istinguishe der ror, io.EOF,w hichi sd eﬁne das fol lows:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 149,
      "page_label": "131"
    }
  },
  {
    "page_content": "ptg16105617\n132 CH\nAPTER FUNCTIONS5.\npackage io\nimport \"errors\"\n// EOF is the error returned by Read when no more input is available.\nvar EOF = errors.New(\"EOF\")\nThec al \nler cand etec t this con dit ion usingas implec omparison, as in t he loopb elow,w hich\nre ads runes fro mthes tand ard inp ut. (The charcountprog \nram in Sec tion 4.3 provides a more\ncomp letee xample.)\nin := bufio.NewReader(os.Stdin)\nfor {\nr, _, err := in.ReadRune()\nif err == io.EOF {\nbreak // finished reading\n}\nif err != nil {\nreturn fmt.Errorf(\"read failed: %v\", err)\n}\n// ...use r...\n}\nSincei\nna ne nd-of-ﬁle condit ion there isn oi nfor mat iont or ep ort besides the fac tof it, io.EOF\nhasaﬁxe \nd er ror message ,\"EOF\".F or \nother erro rs, wem ay need tor ep ort bot htheq uality and\nqu ant ity o ft he e rror,s ot os peak, s oaﬁxe d er ror v alue w ill n ot d o. I nS ec tion 7.11, we’ll\npres entam ores ystematicw ay tod istinguish cer tain erro rvalues fro mot hers.\n5.\n5. Function Values\nFunc \ntions are ﬁrst-class values in Go: li ke other values, fun ctionv alues havet yp es, andt he y\nmayb ea ssig ned tov ar iables orp assedt oo rr etur ned fro mfunc tions.A func tionv alue may\nbe cal le d li kea ny other function. F or example:\nfunc square(n int) int {r eturn n * n }\nfunc negative(n int) int {r eturn -n }\nfunc product(m, n int) int { return m * n }\nf:\n=s quare\nfmt.Println(f(3)) // \"9\"\nf=negative\nfmt.Println(f(3)) // \"-3\"\nfmt.Printf(\"%T\\n\", f) // \"func(int) int\"\n   f = p\nroduct // compile e\nrror: c",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 150,
      "page_label": "132"
    }
  },
  {
    "page_content": "=s quare\nfmt.Println(f(3)) // \"9\"\nf=negative\nfmt.Println(f(3)) // \"-3\"\nfmt.Printf(\"%T\\n\", f) // \"func(int) int\"\n   f = p\nroduct // compile e\nrror: c\nan't a\nssign func\n(int, i\nnt) i\nnt t\no func\n(int) i\nnt\nThez erov al\nue ofaf unctiont yp eis nil.C al \nlingan il functionv alue causesap anic:\nvar f func(int) int\nf(3) // panic: call of nil function\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 150,
      "page_label": "132"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.5. FUNCTION VALUES 133\nFunc tionv alues may bec ompare dwith nil:\nvar f func(int) int\nif f != nil {\nf(3)\n}\nbutt he yaren ot comparable,s ot he ymayn ot bec ompare dagainst eacho ther oru seda sk eys\nin a map.\nFunc tionv alues let u sp arameter izeourf unctions overn ot justd at a, butb eh avior too.T he\nst and ard librar ies cont ain manye xamples. F or ins tance, strings.Map applies a fun ctiont o\neach charac ter ofas tr ing ,joiningt he results tom akea nother str ing .\nfunc add1(r rune) rune { return r + 1 }\nfmt.Println(strings.Map(add1, \"HAL-9000\")) // \"IBM.:111\"\nfmt.Println(strings.Map(add1, \"VMS\")) // \"WNT\"\nfmt.Println(strings.Map(add1, \"Admix\")) // \"Benjy\"\nThe findLinks func tionf ro mSection5 .2 usesahel perf unction, visit,t ov isit all the nodes\nin an HTML document and app l yan action toe acho ne.U singaf unctionv alue,w ec an sep a-\nratet he log icfort re etraversalf ro mthel og icfort he actiont ob ea pp lie dto eachn ode, letting\nus reuse the traversalw it hdif ferenta ctions.\ngopl.io/ch5/outline2\n// forEachNode calls the functions pre(x) and post(x) for each node\n// x in the tree rooted at n. Both functions are optional.\n// pre is called before the children are visited (preorder) and\n// post is called after (postorder).\nfunc forEachNode(n *html.Node, pre, post func(n *html.Node)) {\nif pre != nil {\npre(n)\n}\nfor c := n.FirstChild; c != nil; c = c.NextSibling {\nforEachNode(c, pre, post)\n}\nif post != nil {\npost(n)\n}\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 151,
      "page_label": "133"
    }
  },
  {
    "page_content": "if pre != nil {\npre(n)\n}\nfor c := n.FirstChild; c != nil; c = c.NextSibling {\nforEachNode(c, pre, post)\n}\nif post != nil {\npost(n)\n}\n}\nThe forEachNode func tiona ccepts two functiona rguments, one toc al lbefore a n ode’sc hi l-\ndren arev isit eda nd one t oc al l af ter.T hisa rrangement gives the cal lerag re atd ealo f ﬂexi-\nbi lit y.F or example, the functions startElement and endElement pr int the start and end tags\nof anH TMLe lementl ike <b>...</b>:\nvar depth int\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 151,
      "page_label": "133"
    }
  },
  {
    "page_content": "ptg16105617\n134 CHAPTER 5. FUNCTIONS\nfunc startElement(n *html.Node) {\nif n.Type == html.ElementNode {\nfmt.Printf(\"%*s<%s>\\n\", depth*2, \"\", n.Data)\ndepth++\n}\n}\nfunc endElement(n *html.Node) {\nif n.Type == html.ElementNode {\ndepth--\nfmt.Printf(\"%*s</%s>\\n\", depth*2, \"\", n.Data)\n}\n}\nThef unctions als oindentt he out put usinga nother fmt.Printf tr ick.T he * adverb in %*s\npr intsas tr ing p adde d with a v ar iable numbero fs paces. Th ew idth a nd the s tr ing a re\nprov ide dby the arguments depth*2and \"\".\nIf wec al lforEachNodeon anH TMLd ocument, like this:\nforEachNode(doc, startElement, endElement)\nwe getam oree laboratev ar iat iono nt he out put of our earlier outlineprog ram:\n$g ob uild gopl.io/ch5/outline2\n$. /outline2 http://gopl.io\n<html>\n<head>\n<meta>\n</meta>\n<title>\n</title>\n<style>\n</style>\n</head>\n<body>\n<table>\n<tbody>\n<tr>\n<td>\n<a>\n<img>\n</img>\n...\nExercis e 5.7: De velop startElement and endElement into a g eneral HTML p rett y-print er.\nPr int comment nodes, text nodes, andt he att ribut eso fe ache lement( <a href='...'>). U se\nshort for msl ike <img/> insteado f <img></img> when an elemen th as noc hi ldren. Write a\ntest toe ns ure thatt he out put can bep arseds uccessf ully. ( SeeC hapt er1 1.)\nExercis e 5.8:Mo dif yforEachNode so thatt he pre and post func tions retur nab oole anresu lt\nindic atingw hether toc ontinuet he traversal. U se itt ow rite a function ElementByID with the\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 152,
      "page_label": "134"
    }
  },
  {
    "page_content": "The Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 152,
      "page_label": "134"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.6. ANONYMOUS FUNCTIONS 135\nfo llowing s ig naturet hatﬁ nd s theﬁ rs t HTML elemen tw it h thes peciﬁed id attr ibute. T he\nfunc tions houlds topt he traversal as soon as a match isf ound.\nfunc ElementByID(doc *html.Node, id string) *html.Node\nExercis e 5.9: Wr ite a f unction expand(s string, f func(string) string) stringthat\nrepl aces eachs ubst ring ‘‘$foo’’within sby the text retur ned by f(\"foo\").\n5.6. Anonymous Functions\nName dfunc tions can bed eclare don lya tt he packagel evel,b ut wec an use a func tionl it era lto\ndenot e af unctionv alue w it hin anye xpression. A func tionl it eral i sw ritt enl ikeaf unction\nde clarat ion, but wit houtan amef ol low ing the func ke yword . It isa ne xpression, andi ts value\nis cal le d anan ony mou sfunc tion.\nFunc tionl it eralsl et usd eﬁne a f unctiona ti ts point ofu se.A sa ne xample, the earlier cal l to\nstrings.Mapcanb er ewritt ena s\nstrings.Map(func(r rune) rune { return r + 1 }, \"HAL-9000\")\nMo rei mp ortantly, functions deﬁne din thisw ay havea ccesst ot he ent ire lexic al enviro nment,\nso t he i nner fun ctionc an refer t ov ar iables fro m thee nclosingf unction, as thi se xample\nshows:\ngopl.io/ch5/squares\n// squares returns a function that returns\n// the next square number each time it is called.\nfunc squares() func() int {\nvar x int\nreturn func() int {\nx++\nreturn x * x\n}\n}\nfunc main() {\nf: =s quares()\nfmt.Println(f()) // \"1\"\nfmt.Println(f()) // \"4\"\nfmt.Println(f()) // \"9\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 153,
      "page_label": "135"
    }
  },
  {
    "page_content": "return func() int {\nx++\nreturn x * x\n}\n}\nfunc main() {\nf: =s quares()\nfmt.Println(f()) // \"1\"\nfmt.Println(f()) // \"4\"\nfmt.Println(f()) // \"9\"\nfmt.Println(f()) // \"16\"\n}\nThef unction squares returnsa nother function, oft yp efunc() int.A call to squares cre-\nates a lo calv ar iablex andr etur nsa na nony mou sfunc tiont hat, eacht imei ti sc al le d,i ncre-\nments xandr etur nsi ts squ are . As econ dcall to squareswouldc re ate a secon dvar iablexand\nreturn a new anony mou sfunc tionw hichi ncrementst hatv ar iable.\nThe squares exampled emon strates thatf unctionv alues aren ot justc odeb ut can haves tate.\nThea nony mou s inner fun ctionc an acces sa nd u pdatet he l ocal var iables o ft he enclosing\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 153,
      "page_label": "135"
    }
  },
  {
    "page_content": "ptg16105617\n136 CHAPTER 5. FUNCTIONS\nfunc tion squares.T hese hidden variabler eferences arew hy wec lassif yfunc tions asr eference\ntypesa nd w hy f unctionv alues ar en ot c omparable.F unctionv alues li ke t hese a re i mp le-\nment edu singat echnique cal le dcl osure s,a nd Gop rogrammerso ften use thist er mforf unc-\ntion values.\nHere again wes ee ane xamplew here the lifet imeo fav ar iable isn ot deter mined byi ts scope:\nthev ar iablexexistsa fter squareshasr etur ned wit hin main,e vent houg hxis hidden inside f.\nAs a s om ewhat academic exam pleo fa nony mou s func tions,c on sider t he p ro blem o fc om-\nputing a s equence ofc omputers cience coursest hats at isﬁes the prere quisite requirements of\neach one.T he prere quisitesa re given in t he prereqs tableb elow,w hichi sam apping fro m\neach cours e to the listo fc ours est hatm ustb ec ompleted beforei t.\ngopl.io/ch5/toposort\n// prereqs maps computer science courses to their prerequisites.\nvar prereqs = map[string][]string{\n\"algorithms\": {\"data structures\"},\n\"calculus\": {\"linear algebra\"},\n\"compilers\": {\n\"data structures\",\n\"formal languages\",\n\"computer organization\",\n},\n\"data structures\": {\"discrete math\"},\n\"databases\": {\"data structures\"},\n\"discrete math\": {\"intro to programming\"},\n\"formal languages\": {\"discrete math\"},\n\"networks\": {\"operating systems\"},\n\"operating systems\": {\"data structures\", \"computer organization\"},\n\"programming languages\": {\"data structures\", \"computer organization\"},\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 154,
      "page_label": "136"
    }
  },
  {
    "page_content": "\"operating systems\": {\"data structures\", \"computer organization\"},\n\"programming languages\": {\"data structures\", \"computer organization\"},\n}\nThisk indo fp ro blem i sk nown a st op olog ical s or ting. C on ceptu ally, t he p rere quisite\ninfor mat ionf or msad irec ted graphw it han odef or eachc ours eande dges fro meach cours e to\nthec ours est hati td ep ends on. Th eg raphi sa cyclic: there isn op at hfrom a cours ethat leads\nback to i ts elf.W ec an comp ute a v alid s equence usingd epth-ﬁrs t search through t he graph\nwith thec odeb elow :\nfunc main() {\nfor i, course := range topoSort(prereqs) {\nfmt.Printf(\"%d:\\t%s\\n\", i+1, course)\n}\n}\nfunc topoSort(m map[string][]string) []string {\nvar order []string\nseen := make(map[string]bool)\nvar visitAll func(items []string)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 154,
      "page_label": "136"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.6. ANONYMOUS FUNCTIONS 137\nvisitAll = func(items []string) {\nfor _, item := range items {\nif !seen[item] {\nseen[item] = true\nvisitAll(m[item])\norder = append(order, item)\n}\n}\n}\nvar keys []string\nfor key := range m {\nkeys = append(keys, key)\n}\nsort.Strings(keys)\nvisitAll(keys)\nreturn order\n}\nWh ena na nony mou sfunc tionr equires rec ursion, as in thi se xample, wem ustﬁ rs tde clare a\nvar iable,a nd thena ssig nthea nony mou sfunc tiont ot hatv ar iable.H ad these two steps been\ncombined int he declarat ion, the functionl it eral wou ldn ot bew it hin the scope oft he var iable\nvisitAllso itw ou ldh aven ow ay toc al litself rec ursively:\nvisitAll := func(items []string) {\n// ...\nvisitAll(m[item]) // compile error: undefined: visitAll\n// ...\n}\nTheo ut put of the toposort prog ramis shown below.I ti sd eter minist ic, an o ften-desirable\nprop ertyt hatd oesn’ta lways come for fre e.H ere, the values oft he prereqsmapa re slices, not\nmore maps, sot heir iterat iono rder isd eter minist ic, andw es or ted the keyso f prereqs before\nmaking the initial cal lst o visitAll.\n1: intro to programming\n2: discrete math\n3: data structures\n4: algorithms\n5: linear algebra\n6: calculus\n7: formal languages\n8: computer organization\n9: compilers\n10: databases\n11: operating systems\n12: networks\n13: programming languages\nLet’sr etur n to o ur findLinks example. W e’ve m ov edt he l in k-ext raction f unction",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 155,
      "page_label": "137"
    }
  },
  {
    "page_content": "11: operating systems\n12: networks\n13: programming languages\nLet’sr etur n to o ur findLinks example. W e’ve m ov edt he l in k-ext raction f unction\nlinks.Extract to i ts o wn p ackage, s ince we’ll u se i ta gain in C hapt er8 .W er eplace d the\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 155,
      "page_label": "137"
    }
  },
  {
    "page_content": "ptg16105617\n138 CHAPTER 5. FUNCTIONS\nvisitfunc tionw it han anonymou sfunc tiont hata pp end sto the linksslice direc tly,a nd used\nforEachNode to handlet he t raversal. Si nce Extract ne e dso nlyt he pre func tion, itp asses\nnilfort he postargument.\ngopl.io/ch5/links\n// Package links provides a link-extraction function.\npackage links\nimport (\n\"fmt\"\n\"net/http\"\n\"golang.org/x/net/html\"\n)\n// Extract makes an HTTP GET request to the specified URL, parses\n// the response as HTML, and returns the links in the HTML document.\nfunc Extract(url string) ([]string, error) {\nresp, err := http.Get(url)\nif err != nil {\nreturn nil, err\n}\nif resp.StatusCode != http.StatusOK {\nresp.Body.Close()\nreturn nil, fmt.Errorf(\"getting %s: %s\", url, resp.Status)\n}\ndoc, err := html.Parse(resp.Body)\nresp.Body.Close()\nif err != nil {\nreturn nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n}\nvar links []string\nvisitNode := func(n *html.Node) {\nif n.Type == html.ElementNode && n.Data == \"a\" {\nfor _, a := range n.Attr {\nif a.Key != \"href\" {\ncontinue\n}\nlink, err := resp.Request.URL.Parse(a.Val)\nif err != nil {\ncontinue // ignore bad URLs\n}\nlinks = append(links, link.String())\n}\n}\n}\nforEachNode(doc, visitNode, nil)\nreturn links, nil\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 156,
      "page_label": "138"
    }
  },
  {
    "page_content": "ptg16105617\nSE\nCTION 5.6. ANONYMOUS FUNCTIONS 139\nIn ste \nado fa pp endingt he raw href attr ibute \nvalue tot he links slice,t hisv ersionp arsesi\nta sa\nURL rel ative tot he bas e URL oft he document, resp.Request.URL.T he resul\nting link is in\nabs \nolut eform,s uitablef or use inac al lto http.Get.\nCraw lingt he \nweb is,a ti ts heart,apr oblem ofg rapht raversal. T he topoSortexamples howe d\nad epth-ﬁ\nrs ttraversal; for our web craw ler,w e’ll use bre adt h-ﬁrs ttraversal, atl east initial ly. I n\nChapter 8, we’ll explore con cur rentt raversal.\nThef unctionb elow enc apsulates the ess enceo fab re adt h-ﬁrs ttraversal. T he cal lerprov ides\nan initial list worklist of itemst\nov isit and a functionv alue f to cal \nl fore achi tem. Eac hi tem\nis identiﬁed byas tr ing . Thef unction f returnsal isto fn ew \nitems toa pp end tot he wor klist.\nThe breadthFirst func tionr et\nur nsw hena ll items haveb eenv isit ed. I tm aintainsas et of\nst rings toe ns ure thatn oi temi sv isit edt wice.\ngopl.io/ch5/findlinks3\n// breadthFirst calls f for each item in the worklist.\n// Any items returned by f are added to the worklist.\n// f is called at most once for each item.\nfunc breadthFirst(f func(item string) []string, worklist []string) {\nseen := make(map[string]bool)\nfor len(worklist) > 0 {\nitems := worklist\nworklist = nil\nfor _, item := range items {\nif !seen[item] {\nseen[item] = true\nworklist = append(worklist, f(item)...)\n}\n}\n}\n}\nAs wee xplained \ninp assingi nC hapt er4 ,t he argum",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 157,
      "page_label": "139"
    }
  },
  {
    "page_content": "if !seen[item] {\nseen[item] = true\nworklist = append(worklist, f(item)...)\n}\n}\n}\n}\nAs wee xplained \ninp assingi nC hapt er4 ,t he argum\nent ‘‘f(item)...’’caus esa ll \nthe items in\nthel istr etur ned by fto bea pp \nended tot he wor klist.\nIn our crawler,i tems are URLs. The crawl func tionw e’ll \nsup ply to breadthFirst pr intst he\nURL, ext\nrac tsitsl in ks, andr etur nst hems ot hatt he yto oarev isit ed.\nfunc crawl(url string) []string {\nfmt.Println(url)\nlist, err := links.Extract(url)\nif err != nil {\nlog.Print(err)\n}\nreturn list\n}\nTo start \nthe craw lerof f,w e’ll use the command-linea rguments as the initial URLs.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 157,
      "page_label": "139"
    }
  },
  {
    "page_content": "ptg16105617\n140 CHAPTER 5. FUNCTIONS\nfunc main() {\n// Crawl the web breadth-first,\n// starting from the command-line arguments.\nbreadthFirst(crawl, os.Args[1:])\n}\nLet’sc raw lthew eb startingf ro mhttps://golang.org.H erea re som e of the resulting lin ks:\n$g ob uild gopl.io/ch5/findlinks3\n$. /findlinks3 https://golang.org\nhttps://golang.org/\nhttps://golang.org/doc/\nhttps://golang.org/pkg/\nhttps://golang.org/project/\nhttps://code.google.com/p/go-tour/\nhttps://golang.org/doc/code.html\nhttps://www.youtube.com/watch?v=XCsL89YtqCs\nhttp://research.swtch.com/gotour\nhttps://vimeo.com/53221560\n...\nThep ro cesse nd swhen allr each ablew eb pages haveb eenc raw ledo rt he memory oft he com-\nputeri se xhausted.\nExercis e 5.10: Re writ etopoSort to use maps insteado fs lices ande liminatet he initial sor t.\nVerify thatt he results, thoug hnondeter minist ic, arev alid top olog ical order ings.\nExercis e 5.11: Thei ns tructor of t he l ineara lgebra cour se d ecides t hatc alc ulu s is n ow a\nprerequisite. E xtendt he topoSortfunc tiont or ep ort cyc les.\nExercis e 5.12: The startElement and endElement func tions i n gopl.io/ch5/outline2\n(§5.5) s hare a globalv ar iable,depth.T ur nthem into anony mou sfunc tions thats hare a var i-\nable localt ot he outlinefunc tion.\nExercis e 5.13:Mo dif ycrawl to makel ocal copies oft he pages it ﬁnd s,c re ating direc tor ies as\nne cessary.D on’tm akec opies ofp ages thatc om efrom a dif ferentd om ain. F or example, ift he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 158,
      "page_label": "140"
    }
  },
  {
    "page_content": "ne cessary.D on’tm akec opies ofp ages thatc om efrom a dif ferentd om ain. F or example, ift he\nor iginalp agec om esf ro m golang.org,s avea ll ﬁles f ro m there, b ut e xc lude o nesf ro m\nvimeo.com.\nExercis e 5.14:Us ethe breadthFirst func tiont oe xplore a d if ferents tr ucture. F or example,\nyouc ou ldu se the cours edep endencies fro mthe topoSort example( ad irec ted graph), the ﬁle\nsystemh ierarchyo ny ourc omputer( at re e), oral isto fb us ors ubway routesd ow nlo ade dfrom\nyour city gov ernment’sw eb sit e(an undirec ted graph).\n5.6.1. Caveat: Capturing I teration Variables\nIn thiss ec tion,w e’ll l ooka tap it fal lof Go’sl exic alscop erules thatc an cause sur prisingr esults.\nWe urge yout ou nderst and the pro blem beforep ro ceeding, because the trap can ensnaree ven\nexp erience dprog rammers.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 158,
      "page_label": "140"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.6. ANONYMOUS FUNCTIONS 141\nConsider a program thatm ustc re ate a set ofd irec tor ies andl ater remov ethem. W ec an use a\nslice off unctionv alues toh oldt he cle an-upo perat ions.( Fo rbrevit y,w eh aveo mitt eda ll error\nhand ling in thise xample.)\nvar rmdirs []func()\nfor _, d := range tempDirs() {\ndir := d // NOTE: necessary!\nos.MkdirAll(dir, 0755) // creates parent directories too\nrmdirs = append(rmdirs, func() {\nos.RemoveAll(dir)\n})\n}\n// ...do some work...\nfor _, rmdir := range rmdirs {\nrmdir() // clean up\n}\nYo umayb ew on der ingw hy wea ssig ned the loopv ar iabled to a new local variable dir within\nthel oopb ody, ins teado fj ustn amingt he loopv ar iablediras in thiss ubtlyi ncor rec tvar iant:\nvar rmdirs []func()\nfor _, dir := range tempDirs() {\nos.MkdirAll(dir, 0755)\nrmdirs = append(rmdirs, func() {\nos.RemoveAll(dir) // NOTE: incorrect!\n})\n}\nTher easoni sac on sequence oft he scope rules for loopv ar iables. Int he program immediate ly\nab ove ,the for lo opi nt roduces a n ew lexic alblocki nw hicht he var iabledir is declare d.A ll\nfunc tionv alues cr eate d by t hisl oop ‘‘capt ure’’ands hare t he s amev ar iable—an addres sable\nstoragel ocat ion, not its value at t hatp ar tic ularm om ent.T he value of dir is updated ins uc-\ncessive iterat ions,s ob yt he timet he cle anup functions are cal le d,t he dir var iable has been\nup dated s everal times b yt he now-comp leted for lo op. T hu sdir holdst he v alue f ro mthe",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 159,
      "page_label": "141"
    }
  },
  {
    "page_content": "up dated s everal times b yt he now-comp leted for lo op. T hu sdir holdst he v alue f ro mthe\nﬁnali terat ion, andc on sequentlya ll c al lst o os.RemoveAll wi l lattemp tto remov ethes ame\ndirec tor y.\nFr equently, the inner variablei nt roduce dto wor karound thisp ro blem— dirin our example—\nis given the exac tsame namea st he out erv ar iable ofw hichi ti sac opy, leadingt oo dd-lo oking\nbutc ruci al var iable decl a rat ions liket his:\nfor _, dir := range tempDirs() {\ndir := dir // declares inner dir, initialized to outer dir\n// ...\n}\nTher iski sn ot unique to range-b ased for lo ops. Thel oop in the exampleb elow suf fersf ro m\nthes amep ro blem due tou nintended capture oft he index variable i.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 159,
      "page_label": "141"
    }
  },
  {
    "page_content": "ptg16105617\n142 CHAPTER 5. FUNCTIONS\nvar rmdirs []func()\ndirs := tempDirs()\nfor i := 0; i < len(dirs); i++ {\nos.MkdirAll(dirs[i], 0755) // OK\nrmdirs = append(rmdirs, func() {\nos.RemoveAll(dirs[i]) // NOTE: incorrect!\n})\n}\nThep ro blem ofi terat ionv ar iable capture ism osto ften encountere dwhen usingt he go st ate-\nment (Chapter8 )o rw it hdefer (w hichw ew ill see i nam om ent)s ince bot hmayd el ayt he\nexec ution of a functionv alue until after the looph as ﬁnishe d.B ut the pro blem isn ot inherent\nto goor defer.\n5.7. Variadic Functions\nA variadic fun cti on is one thatc an bec al le dwith var yingn umbers ofa rguments. Th em ost\nfami liar examples are fmt.Printfandi ts variants. Printfre quires one ﬁxe dargumenta tt he\nbeginning, thena ccepts anyn umbero fs ubsequenta rguments.\nTo declare a var iadic function, the typ eof the ﬁnalp arameter isp re ceded bya ne llipsis, ‘‘...’’,\nwhichi ndic ates thatt he functionm ay bec al le dwith any numbero fa rguments oft hist yp e.\ngopl.io/ch5/sum\nfunc sum(vals ...int) int {\ntotal := 0\nfor _, val := range vals {\ntotal += val\n}\nreturn total\n}\nThe sum func tiona bove retur nst he sum ofz eroo rm ore int arguments. W it hin the bodyo f\nthef unction, the typ e of vals is an []int slice.W hen sum is cal le d,a ny numbero fv alues\nmayb ep rovide dfori ts valsparameter.\nfmt.Println(sum()) // \"0\"\nfmt.Println(sum(3)) // \"3\"\nfmt.Println(sum(1, 2, 3, 4)) // \"10\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 160,
      "page_label": "142"
    }
  },
  {
    "page_content": "mayb ep rovide dfori ts valsparameter.\nfmt.Println(sum()) // \"0\"\nfmt.Println(sum(3)) // \"3\"\nfmt.Println(sum(1, 2, 3, 4)) // \"10\"\nImplicitly, the cal ler al locatesa na rray,c opies the arguments into it, andp assesas lice oft he\nentire array tot he function. Th el astc al l ab ove thu sbehavest he samea st he cal lbelow, which\nshows how toi nv oke a v ar iadic functionw hent he arguments area lready inas lice: place an\nel lipsisa fter the ﬁnala rgument.\nvalues := []int{1, 2, 3, 4}\nfmt.Println(sum(values...)) // \"10\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 160,
      "page_label": "142"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.8. DEFERRED FUNCTION CALLS 143\nAlthough t he ...int parameter beh avesl ikea s lice w it hin t he f unctionb ody, the typ e of a\nvar iadic functioni sd istinc tfrom the typ eof a functionw it han ordinar yslice parameter.\nfunc f(...int) {}\nfunc g([]int) {}\nfmt.Printf(\"%T\\n\", f) // \"func(...int)\"\nfmt.Printf(\"%T\\n\", g) // \"func([]int)\"\nVariadic fun ctions a re o ften u sedf or s tr ing f or matting . The errorf func tionb elow c on-\nst ruc tsaf or matte der ror message wit hal inen umbera tt he beg inning. T he sufﬁx fis a widely\nfo llowe dnamingc onvent ion for var iadic functions thata ccepta Printf-sty lef or mat str ing .\nfunc errorf(linenum int, format string, args ...interface{}) {\nfmt.Fprintf(os.Stderr, \"Line %d: \", linenum)\nfmt.Fprintf(os.Stderr, format, args...)\nfmt.Fprintln(os.Stderr)\n}\nlinenum, name := 12, \"count\"\nerrorf(linenum, \"undefined: %s\", name) // \"Line 12: undefined: count\"\nThe interface{} type means thatt hisf unctionc an accepta ny values at allf or itsﬁ nala rgu-\nments, as we’ll explain in Chapt er7 .\nExercis e 5.15: Wr ite v ar iadic functions max and min,a nalogou s to sum.W hats houldt hese\nfunc tions dow henc al le dwith noa rguments? W rite var iants thatr equirea tl east one argu-\nment.\nExercis e 5.16:Wr ite a var iadic versiono f strings.Join.\nExercis e 5.17:Wr ite a var iadic function ElementsByTagName that, given an HTML n odet re e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 161,
      "page_label": "143"
    }
  },
  {
    "page_content": "Exercis e 5.17:Wr ite a var iadic function ElementsByTagName that, given an HTML n odet re e\nandz eroo rm oren ames, retur nsa ll the elements thatm atch one oft hose names. Her ea re two\nexamplec al ls:\nfunc ElementsByTagName(doc *html.Node, name ...string) []*html.Node\nimages := ElementsByTagName(doc, \"img\")\nheadings := ElementsByTagName(doc, \"h1\", \"h2\", \"h3\", \"h4\")\n5.8. D eferred Function Calls\nOur findLinks examples u sedt he o ut put of http.Get as t he i np utt o html.Parse.T his\nworksw el l if t he c ontent o ft he r equeste d URL i si ndeed H TML, b ut m anyp ages co nt ain\nimages, plain text, ando ther ﬁle for mats. F eedings uch ﬁles into anH TMLp arserc ou ldh ave\nundesirable effe cts.\nThep rogram b elow f etch esa nH TMLd ocumenta nd p rintsi ts t it le. T he title func tion\ninsp ectst he Content-Type he ader o ft he s er ver’sr espons e andr etur nsa ne rror i ft he d oc-\numenti sn ot HTML.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 161,
      "page_label": "143"
    }
  },
  {
    "page_content": "ptg16105617\n144 CHAPTER 5. FUNCTIONS\ngopl.io/ch5/title1\nfunc title(url string) error {\nresp, err := http.Get(url)\nif err != nil {\nreturn err\n}\n// Check Content-Type is HTML (e.g., \"text/html; charset=utf-8\").\nct := resp.Header.Get(\"Content-Type\")\nif ct != \"text/html\" && !strings.HasPrefix(ct, \"text/html;\") {\nresp.Body.Close()\nreturn fmt.Errorf(\"%s has type %s, not text/html\", url, ct)\n}\ndoc, err := html.Parse(resp.Body)\nresp.Body.Close()\nif err != nil {\nreturn fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n}\nvisitNode := func(n *html.Node) {\nif n.Type == html.ElementNode && n.Data == \"title\" &&\nn.FirstChild != nil {\nfmt.Println(n.FirstChild.Data)\n}\n}\nforEachNode(doc, visitNode, nil)\nreturn nil\n}\nHere’sat ypic alsession, slig htlye dite d toﬁt:\n$g ob uild gopl.io/ch5/title1\n$. /title1 http://gopl.io\nThe Go Programming Language\n$./title1 https://golang.org/doc/effective_go.html\nEffective Go - The Go Programming Language\n$./title1 https://golang.org/doc/gopher/frontpage.png\ntitle: https://golang.org/doc/gopher/frontpage.png\nhas type image/png, not text/html\nObservet he d up lic ated resp.Body.Close() call,w hiche ns urest hat title clos es then et-\nwork conne ction on all exe cut ion pat hs, includingf ai lures. Asf unctions growm orec omplex\nandh avet oh andlem oree rror s,s uchd up lic ationo fc le an-upl og ic mayb ecom e am ain-\ntenancep ro blem. Let ’ss ee how Go’sn ov el deferme chanism makes things simpler.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 162,
      "page_label": "144"
    }
  },
  {
    "page_content": "tenancep ro blem. Let ’ss ee how Go’sn ov el deferme chanism makes things simpler.\nSy ntactic ally,a defer st atement i sa no rdinar y func tiono rm et hod c al l preﬁxe d by t he\nke yword defer.T he functiona nd argumente xpressions are evaluate dwhen the statement is\nexec ute d,butt he actualc al lis deferred until the f unctiont hatc ontainst he defer st atement\nhas ﬁni she d,w hether n or mal ly, bye xe cut ing a r etur n st atement o rf al lingo ff t he end ,o r\nabnormal ly, byp anicking . Anyn umbero fc al lsm ay b ed efer red;t he y aree xe cut edi nt he\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 162,
      "page_label": "144"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.8. DEFERRED FUNCTION CALLS 145\nre verse oft he order in whicht he ywere defer red.\nA defer st atement iso ften usedw it hpaired operat ions likeo pena nd clos e,c onne cta nd dis-\nconnec t,o rl ocka nd unlockt oe ns ure thatr es ources arer eleasedi na ll cas es,no matterh ow\ncomp lex t he c ontrol ﬂow.T he r ig htp lace f or a defer st atement t hatr eleasesar es ource is\nimmediate lya fter the res ource has beens uccessf ullya cquired.I nt he title func tionb elow,a\nsingled efer red cal lrepl aces bot hprevious cal lst o resp.Body.Close():\ngopl.io/ch5/title2\nfunc title(url string) error {\nresp, err := http.Get(url)\nif err != nil {\nreturn err\n}\ndefer resp.Body.Close()\nct := resp.Header.Get(\"Content-Type\")\nif ct != \"text/html\" && !strings.HasPrefix(ct, \"text/html;\") {\nreturn fmt.Errorf(\"%s has type %s, not text/html\", url, ct)\n}\ndoc, err := html.Parse(resp.Body)\nif err != nil {\nreturn fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n}\n// ...print doc'st itle element...\nreturn nil\n}\nThes amep attern can beu sedf or other res ources beside net wor kconnec tion s,f or ins tance to\nclos e an open ﬁle:\nio/ioutil\npackage ioutil\nfunc ReadFile(filename string) ([]byte, error) {\nf, err := os.Open(filename)\nif err != nil {\nreturn nil, err\n}\ndefer f.Close()\nreturn ReadAll(f)\n}\nor tou nlockam ut ex( §9.2):\nvar mu sync.Mutex\nvar m = make(map[string]int)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 163,
      "page_label": "145"
    }
  },
  {
    "page_content": "var m = make(map[string]int)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 163,
      "page_label": "145"
    }
  },
  {
    "page_content": "ptg16105617\n146 CHAPTER 5. FUNCTIONS\nfunc lookup(key string) int {\nmu.Lock()\ndefer mu.Unlock()\nreturn m[key]\n}\nThe deferst atement can also beu sedt op air ‘‘on ent ry’’and ‘‘on exit’’ac tions whend ebug ging\nac omplex function. The bigSlowOperation func tionb elow cal lstrace immediate ly, which\ndo es the ‘‘on e nt ry’’ac tiont henr etur nsaf unctionv alue t hat, w henc al le d,d oest he c or-\nresp onding ‘‘on exit’’ac tion. Byd efer r ingac al lto the retur ned functioni nt hisw ay,w ec an\ninst rumentt he ent ryp oint and all exitp ointso fa f unctioni nas ingles tatement and evenp ass\nvalues, like the start time,b et weent he two actions.B ut don’tf or g ett he ﬁnalp arenthes es in\nthe defer st atement,o rt he ‘‘on ent ry’’ac tionw ill happeno ne xita nd the on-exita ctionw on’t\nhapp en at all!\ngopl.io/ch5/trace\nfunc bigSlowOperation() {\ndefer trace(\"bigSlowOperation\")() // don'tf orget the extra parentheses\n// ...lots of work...\ntime.Sleep(10 * time.Second) // simulate slow operation by sleeping\n}\nfunc trace(msg string) func() {\nstart := time.Now()\nlog.Printf(\"enter %s\", msg)\nreturn func() { log.Printf(\"exit %s (%s)\", msg, time.Since(start)) }\n}\nEach time bigSlowOperation is cal le d,i tl ogs its entr yande xita nd the elaps edt imeb et ween\nthem. (W eu sed time.Sleepto simulateas lowo perat ion.)\n$g ob uild gopl.io/ch5/trace\n$. /trace\n2015/11/18 09:53:26 enter bigSlowOperation\n2015/11/18 09:53:36 exit bigSlowOperation (10.000589217s)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 164,
      "page_label": "146"
    }
  },
  {
    "page_content": "$g ob uild gopl.io/ch5/trace\n$. /trace\n2015/11/18 09:53:26 enter bigSlowOperation\n2015/11/18 09:53:36 exit bigSlowOperation (10.000589217s)\nDeferred f unctions r un af ter return sta tementsh aveu pdated t he f unction’sr esultv ar iables.\nBecaus ean anonymou sfunc tionc an accessi ts enclosingf unction’sv ar iables, includingn amed\nresu lts, a defer red anony mou sfunc tionc an obs erve the function’sr esults.\nConsider the function double:\nfunc double(x int) int {\nreturn x + x\n}\nBy namingi ts resultv ar iable anda ddinga deferst atement,w ec an maket he functionp rint its\narguments andr esults eacht imei ti sc al le d.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 164,
      "page_label": "146"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.8. DEFERRED FUNCTION CALLS 147\nfunc double(x int) (result int) {\ndefer func() { fmt.Printf(\"double(%d) = %d\\n\", x, result) }()\nreturn x + x\n}\n_=d ouble(4)\n// Output:\n// \"double(4) = 8\"\nThist rick iso verk ill for a f unctiona ss implea s double butm ay beu sefuli nf unctions wit h\nmany retur nst atements.\nAd efer red a nony mou s func tionc an e venc hange t he v alues t hatt he enclosin gf unction\nreturnst oi ts cal ler:\nfunc triple(x int) (result int) {\ndefer func() { result += x }()\nreturn double(x)\n}\nfmt.Println(triple(4)) // \"12\"\nBecaus e defer red f unctions a ren’te xe cut edu nt i lthev er y endo faf unction’se xe cut ion,a\ndefer st atement i nal oopd es ervese xt ra scrutiny.T he c odeb elow c ou ldr un o ut of ﬁle\ndes crip tor ssince no ﬁle will bec los edu nt i lal l ﬁles haveb eenp ro cessed:\nfor _, filename := range filenames {\nf, err := os.Open(filename)\nif err != nil {\nreturn err\n}\ndefer f.Close() // NOTE: risky; could run out of file descriptors\n// ...process f...\n}\nOnes olut ion ist om ov ethel oopb ody, includingt he defer st atement,i nt oanot her function\nthat isc al le don eachi terat ion.\nfor _, filename := range filenames {\nif err := doFile(filename); err != nil {\nreturn err\n}\n}\nfunc doFile(filename string) error {\nf, err := os.Open(filename)\nif err != nil {\nreturn err\n}\ndefer f.Close()\n// ...process f...\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 165,
      "page_label": "147"
    }
  },
  {
    "page_content": "}\ndefer f.Close()\n// ...process f...\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 165,
      "page_label": "147"
    }
  },
  {
    "page_content": "ptg16105617\n148 CHAPTER 5. FUNCTIONS\nThee xampleb elow is an imp rov ed fetch prog ram (§1.5) t hatw ritest he HTTPr espons eto a\nlo cal ﬁle insteado ft ot he stand ard out put.I td er ivest he ﬁle namef ro mthel astc omponent of\ntheU RL pat h,whichi to bt ainsu singt he path.Basefunc tion.\ngopl.io/ch5/fetch\n// Fetch downloads the URL and returns the\n// name and length of the local file.\nfunc fetch(url string) (filename string, n int64, err error) {\nresp, err := http.Get(url)\nif err != nil {\nreturn \"\", 0, err\n}\ndefer resp.Body.Close()\nlocal := path.Base(resp.Request.URL.Path)\nif local == \"/\" {\nlocal = \"index.html\"\n}\nf, err := os.Create(local)\nif err != nil {\nreturn \"\", 0, err\n}\nn, err = io.Copy(f, resp.Body)\n// Close file, but prefer error from Copy, if any.\nif closeErr := f.Close(); err == nil {\nerr = closeErr\n}\nreturn local, n, err\n}\nThed efer red c al l to resp.Body.Close shouldb ef ami liar byn ow.I t’st empt ing t ou se a\nsecond defer red cal l,t o f.Close,t oc los ethel ocal ﬁle,b ut thisw ou ldb es ubtlyw ro ngb ecause\nos.Create op ens a ﬁle for writing ,creating ita sn eeded.O nm any ﬁle systems,n ot ably NFS,\nwr ite error saren ot rep orted immediate lyb ut may bep ostp one duntil the ﬁle isc los ed. F ai l-\nuret oc he ckt he resulto ft he clos e op erat ionc ou ldc ause se riou sdata losst og ou nnot ice d.\nHo wever,i fb ot h io.Copy and f.Close fai l,w es houldp refert or ep ort t he e rror f ro m",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 166,
      "page_label": "148"
    }
  },
  {
    "page_content": "Ho wever,i fb ot h io.Copy and f.Close fai l,w es houldp refert or ep ort t he e rror f ro m\nio.Copysince ito cc urre dﬁrs tandi sm orel ikelyt ot el lus the rootc ause.\nExercis e 5.18:Wi thout chang ing its beh avior,r ewrite the fetchfunc tiont ou se deferto clos e\nthew ritable ﬁle.\n5.9. Panic\nGo’st yp e systemc atch esm anym istakesa tc ompi let ime, b ut oth ers, li ke a no ut-of-b ounds\nar ray accesso rn il p oint erd ereference,r equirec he cks at run tim e. W hent he G or untime\ndetec tst hese mistakes, it pani cs.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 166,
      "page_label": "148"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.9. PANIC 149\nDuring a typic alpanic, nor mal exec ution stops, alld efer red functionc al lsi nt hatg oroutine are\nexec ute d,andt he program crashesw it hal og message . Thisl og message includes the pani c\nvalu e,w hichi su su allya ne rror message ofs om esort,a nd,f or eachg oroutine,asta c kt ra c e\nshowing the stack off unctionc al lst hatw erea ctive at the timeo ft he panic. Thi sl og message\nof ten has enough infor mat iont od iagnos ether ootc ause oft he pro blem wit houtr unningt he\nprog ram again, soi ts houlda lways bei nclude d in a bug rep ort about a panicking program.\nNo tal lpanics come fro mther untime.T he bui lt-inpanic func tionm ay bec al le d direc tly ;it\naccepts anyv alue as an argument. A panic iso ften the bestt hingt od ow hens om e‘‘impossi-\nble’’situ ation happens,f or ins tance,e xe cut ion reach esac as ethat logic ally can’th appen:\nswitch s := suit(drawCard()); s {\ncase \"Spades\": // ...\ncase \"Hearts\": // ...\ncase \"Diamonds\": // ...\ncase \"Clubs\": // ...\ndefault:\npanic(fmt.Sprintf(\"invalid suit %q\", s)) // Joker?\n}\nIt’sg ood prac tice toa ss ert thatt he pre con dit ion s of a functionh old, but thisc an easi lyb ed on e\nto excess. U nlessy ou can provide a morei nfor mat ive error message ord etec tan erro rso oner,\ntherei sn op oint ass ertingac on dit ion thatt he runtime will che ckf or you .\nfunc Reset(x *Buffer) {\nif x == nil {\npanic(\"x is nil\") // unnecessary!\n}\nx.elements = nil\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 167,
      "page_label": "149"
    }
  },
  {
    "page_content": "func Reset(x *Buffer) {\nif x == nil {\npanic(\"x is nil\") // unnecessary!\n}\nx.elements = nil\n}\nAlthough G o’sp anic m echanism res embles excep tion s in o ther langu ages, the s it uat ions i n\nwhichp anic isu seda re quite dif ferent. Since a panic causest he program toc rash, iti sg en er-\nal lyu sedf or gravee rror s,s uch as a log ical inco nsistenc y in t he program; diligentp rogram-\nmers con sider anyc rasht ob ep ro ofo fab ug in t heir code.I nar obustp rogram, ‘‘exp ected’’\ner ror s,t he k indt hata rise f ro m incorrec t input, mi sconﬁgurat ion, orf ai lingI /O,s houldb e\nhand led gracef ully; the yareb estd ealt wit husing errorvalues.\nConsider the function regexp.Compile,w hichc ompi les a regu lar expressioni nt oan efﬁcient\nform for matching. I tr etur nsa n error if cal le dwith ani ll-for med patt ern,b ut che cking this\ner ror isu nnecessary and burdensome ift he cal lerknowst hatapa rtic ularc al lcannot fai l.I n\nsuch cas es,it’sr easonablef or the cal lerto handlea ne rror byp anicking ,since iti sb elie ved to\nbe imp ossible.\nSincem ostr egu lar expressions a re lit eralsi nt he program s ourcec ode, t he regexp package\nprov ides a wrapperf unction regexp.MustCompilethat does thisc he ck:\npackage regexp\nfunc Compile(expr string) (*Regexp, error) { /* ... */ }\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 167,
      "page_label": "149"
    }
  },
  {
    "page_content": "ptg16105617\n150 CHAPTER 5. FUNCTIONS\nfunc MustCompile(expr string) *Regexp {\nre, err := Compile(expr)\nif err != nil {\npanic(err)\n}\nreturn re\n}\nThew rapperf unctionm akes itc onvenientf or clients toi nitialize a package-le vel var iable wit h\nac ompi led regu lar expression, like this:\nvar httpSchemeRE = regexp.MustCompile(`^https?:`)/ /\" http:\" or \"https:\"\nOf course, MustCompileshouldn ot bec al le dwith unt ruste dinputv alues. The Mustpreﬁxi sa\ncommon namingc onvent ion for functions oft hisk ind, like template.Mustin Sec tion 4.6.\nWh enap anic occ urs, alld efer red functions are run in reverse order,s tartingw it hthos eof the\ntopm ost f unctiono nt he s tack a nd p ro ceedingu pt o main,a st he p rogram b elow\ndemon strates:\ngopl.io/ch5/defer1\nfunc main() {\nf(3)\n}\nfunc f(x int) {\nfmt.Printf(\"f(%d)\\n\", x+0/x) // panics if x == 0\ndefer fmt.Printf(\"defer %d\\n\", x)\nf(x - 1)\n}\nWh enr un, the program printst he fol low ing tot he stand ard out put:\nf(3)\nf(2)\nf(1)\ndefer 1\ndefer 2\ndefer 3\nAp anic occ ursd ur ingt he cal lto f(0),c ausingt he three defer red cal lst o fmt.Printf to run.\nThen the runtime ter minates the program, print ing the panic message and a sta ck dumpt o\nthes tand ard error stream( simpliﬁed for clarity):\npanic: runtime error: integer divide by zero\nmain.f(0)\nsrc/gopl.io/ch5/defer1/defer.go:14\nmain.f(1)\nsrc/gopl.io/ch5/defer1/defer.go:16\nmain.f(2)\nsrc/gopl.io/ch5/defer1/defer.go:16\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 168,
      "page_label": "150"
    }
  },
  {
    "page_content": "main.f(2)\nsrc/gopl.io/ch5/defer1/defer.go:16\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 168,
      "page_label": "150"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.10. RE COVER 151\nmain.f(3)\nsrc/gopl.io/ch5/defer1/defer.go:16\nmain.main()\nsrc/gopl.io/ch5/defer1/defer.go:10\nAs wew ill see soon, iti sp ossiblef or a functiont or ecov erf ro map anic sot hati td oesn ot ter-\nminatet he program.\nFo rdi agnost icp ur pos es,the runtime packagel ets the programmer dumpt he stack usingt he\nsame machiner y.B yd efer r ingac al lto printStackin main,\ngopl.io/ch5/defer2\nfunc main() {\ndefer printStack()\nf(3)\n}\nfunc printStack() {\nvar buf [4096]byte\nn: =r untime.Stack(buf[:], false)\nos.Stdout.Write(buf[:n])\n}\nthef ol low ing addition alt ext (again simpliﬁed for clarity)i sp rint edt ot he stand ard out put:\ngoroutine 1 [running]:\nmain.printStack()\nsrc/gopl.io/ch5/defer2/defer.go:20\nmain.f(0)\nsrc/gopl.io/ch5/defer2/defer.go:27\nmain.f(1)\nsrc/gopl.io/ch5/defer2/defer.go:29\nmain.f(2)\nsrc/gopl.io/ch5/defer2/defer.go:29\nmain.f(3)\nsrc/gopl.io/ch5/defer2/defer.go:29\nmain.main()\nsrc/gopl.io/ch5/defer2/defer.go:15\nRe adersf ami liar wit h exception s in o ther langu ages may b es ur prisedt hat runtime.Stack\ncanp rint infor mat iona bout functions thats eemt oh avea lready been ‘‘unwound.’’Go’sp anic\nme chanism runst he defer red functions before it unw ind sthes tack.\n5.10. Rec over\nGi vingu pi su su allyt he r ig htr espons e to a p anic, b ut n ot a lways. I tm ig htb ep ossiblet o\nre cov eri ns om eway,o ra tl east cle anup the mess beforeq uitt ing . Fo rexample, a web ser ver",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 169,
      "page_label": "151"
    }
  },
  {
    "page_content": "re cov eri ns om eway,o ra tl east cle anup the mess beforeq uitt ing . Fo rexample, a web ser ver\nthat encounters anu nexp ected pro blem couldc los ethec onne ction rat her thanl eave the client\nhang ing ,andd ur ingd evelopment,i tm ig htr ep ort the error tot he clientt oo.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 169,
      "page_label": "151"
    }
  },
  {
    "page_content": "ptg16105617\n152 CHAPTER 5. FUNCTIONS\nIf the bui lt-inrecover func tioni sc al le dwithin a defer red functiona nd the functionc ontain-\ningt he defer st atement isp anicking ,recover ends the cur rents tate ofp anic andr etur nst he\npanic value.T he functiont hatw as panicking doesn ot continuew here itl ef tof fbutr etur ns\nnormal ly. I f recoveris cal le d at anyo ther time, ith as noe ffec tandr etur nsnil.\nTo illustrate, con sider the development ofap arserf or a langu age. E venw heni ta pp earst ob e\nwork ing well,g iven the complexity ofi ts job,b ugs may still lurki no bs curec or ner cas es. We\nmig htp refert hat, insteado fc rashing, the parsert ur nst hese panics into ordinar ypars eer ror s,\nperh aps wit han extra message exhor tingt he usert o ﬁle a bug rep ort.\nfunc Parse(input string) (s *Syntax, err error) {\ndefer func() {\nif p := recover(); p != nil {\nerr = fmt.Errorf(\"internal error: %v\", p)\n}\n}()\n// ...parser...\n}\nThed efer red functioni n Parse re cov ers fro map anic, usingt he panic value t oc on str uct an\ner ror message;af ancier versionm ig hti nclude the ent ire cal lst ack using runtime.Stack.T he\ndefer red functiont hena ssig nst ot he errresu lt, whichi sr etur ned tot he cal ler.\nRe cov ering indis criminatelyf ro mpanics isad ubious prac tice because the state ofap ackage’s\nvar iables afterap anic isr arelyw el ldeﬁne dor documente d. Perh aps a crit icalu pdatet oad at a",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 170,
      "page_label": "152"
    }
  },
  {
    "page_content": "var iables afterap anic isr arelyw el ldeﬁne dor documente d. Perh aps a crit icalu pdatet oad at a\nst ruc turew as incomp lete, a ﬁle orn et wor kconnec tion was opene dbutn ot clos ed, oral ock\nwas acquired but not released. F ur thermore, byr eplacingac rashw it h,s ay,al ine in a log ﬁle,\nindiscriminater ecov ery may cause bugs tog ou nnot ice d.\nRe cov ering fro map anic wit hin the samep ackagec an helps implif ytheh andlingo fc omplex\nor unexp ected error s,b ut asag eneral rule, you shouldn ot att emp tto recov erf ro manot her\npackage’sp anic. Pu blic AP Is s houldr ep ort f ai lures as errors. Simi lar ly,y ou s houldn ot\nre cov erf ro map anic thatm ay passt hrough a f unctiony ou don ot maintain, sucha sac al ler-\nprov ide dcallback,s ince you cannot reasona bout itss afet y.\nFo rexample, the net/http packagep rovides a w eb ser ver thatd ispatch esi ncomingr equests\nto user-prov ide dhand ler functions.R at her thanl et a panic in o ne oft hese handlersk ill the\nprocess, t he s er ver cal lsrecover,p rintsas tack t race,a nd c ontinues ser ving. T hisi sc on-\nvenienti np rac tice,b ut it d oesr iskl eaking r es ources orl eaving t he f ai le dhand ler in an\nunsp eciﬁed state thatc ou ldl eadt oo ther pro blems.\nFo ral lthea bove reasons,i t’ss afestt or ecov ers elec tive lyi fa ta ll.I no ther words,r ecov ero nly\nfrom panics t hatw erei nt ended tob er ecov ere dfrom,w hichs houldb er are. T hisi nt ent ion",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 170,
      "page_label": "152"
    }
  },
  {
    "page_content": "from panics t hatw erei nt ended tob er ecov ere dfrom,w hichs houldb er are. T hisi nt ent ion\ncanb ee ncoded byu singadi st inc t,u nexp orted typ efort he panic value an dt esting whether\nthev alue retur ned by recover hast hatt yp e.( We’ll see o ne way tod ot hisi nt he next exam-\nple.)I fs o, wer ep ort the panic as an ordinar yerror;i fn ot,w ec al lpanic with thes amev alue\nto resumet he state ofp anic.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 170,
      "page_label": "152"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 5.10. RE COVER 153\nThee xampleb elow isav ar iat iono nt he title prog ram that rep ortsa ne rror ift he HTML\ndo cumentc ontainsm ultiple <title> elements. I fs o, ita bortst he rec ursionb yc al lingpanic\nwith a value oft he speci altype bailout.\ngopl.io/ch5/title3\n// soleTitle returns the text of the first non-empty title element\n// in doc, and an error if there was not exactly one.\nfunc soleTitle(doc *html.Node) (title string, err error) {\ntype bailout struct{}\ndefer func() {\nswitch p := recover(); p {\ncase nil:\n// no panic\ncase bailout{}:\n// \"expected\" panic\nerr = fmt.Errorf(\"multiple title elements\")\ndefault:\npanic(p) // unexpected panic; carry on panicking\n}\n}()\n// Bail out of recursion if we find more than one non-empty title.\nforEachNode(doc, func(n *html.Node) {\nif n.Type == html.ElementNode && n.Data == \"title\" &&\nn.FirstChild != nil {\nif title != \"\" {\npanic(bailout{}) // multiple title elements\n}\ntitle = n.FirstChild.Data\n}\n}, nil)\nif title == \"\" {\nreturn \"\", fmt.Errorf(\"no title element\")\n}\nreturn title, nil\n}\nThed efer red handler functionc al lsrecover,c he cks the panic value,a nd rep ortsa no rdinar y\ner ror ift he value was bailout{}.A ll other non-ni l values indic atea nu nexp ected panic, in\nwhichc as etheh andler cal lspanic with that value,u ndoing the effec tof recover andr esum-\ningt he o riginals tate o fp anic. (Thi se xampled oess om ewhat vio late o ur ad vice ab outn ot",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 171,
      "page_label": "153"
    }
  },
  {
    "page_content": "ingt he o riginals tate o fp anic. (Thi se xampled oess om ewhat vio late o ur ad vice ab outn ot\nusingp anics for ‘‘exp ected’’er ror s,b ut it prov ides a comp act illustrat iono ft he mech anics.)\nFr oms om econdit ion stherei sn or ecov ery.R unningo ut of memor y,f or example, causest he\nGo runtime tot er minatet he program wit haf at al er ror.\nExercis e 5.19:Us epanic and recover to write a functiont hatc ontainsn o return st atement\nyetr etur nsan on-zerov alue.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 171,
      "page_label": "153"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 172,
      "page_label": "154"
    }
  },
  {
    "page_content": "ptg16105617\n6\nMe thods\nSincet he early 1990s, obj e ct-oriente dprog ramming( OOP) has b eent he dominantp rogram-\nmingp aradig m in indu str y ande ducation,a nd ne arly a ll w idely u sedl angu ages deve lop ed\nsince thenh avei nclude dsupp ort for it.G oi sn oe xception.\nAlthough there isn ou nivers allya ccepte ddeﬁnition of obj e ct-oriente dprog ramming, for our\npurpos es, anob jec tis simply a value orv ar iable thath as met hods, andametho d is a function\nasso ciate d with a p ar tic ulart yp e.A no bj e ct-oriente d prog ram is o ne t hatu sesm et hodst o\nexpress the pro per ties ando perat ions ofe achd at ast ruc tures ot hatc lients need not accesst he\nobjec t’sr epresent ation direc tly.\nIn earlier chapt ers,w eh avem ade regu lar use ofm et hodsf ro mthes tand ard librar y,l iket he\nSecondsmethod oft yp etime.Duration:\nconst day = 24 * time.Hour\nfmt.Println(day.Seconds()) // \"86400\"\nandw ed eﬁne dam et hod ofo ur own inS ec tion 2.5, a Stringmethod for the Celsiustype:\nfunc (c Celsius) String() string { return fmt.Sprintf(\"%g°C\", c) }\nIn thisc hapt er, the ﬁrs tof two ono bj e ct-oriente dprog ramming, we’ll showh ow tod eﬁne and\nus emethodse ffec tive ly. W e’ll als ocovert wo key princip les ofo bj e ct-oriente dprog ramming,\nencapsul ati on and comp ositi on.\n6.1. M ethod Declarations\nAm et hod i sd eclare dwith a v ar ianto ft he ordinar y func tiond eclarat ioni nw hicha ne xt ra",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 173,
      "page_label": "155"
    }
  },
  {
    "page_content": "6.1. M ethod Declarations\nAm et hod i sd eclare dwith a v ar ianto ft he ordinar y func tiond eclarat ioni nw hicha ne xt ra\nparameter appearsb eforet he functionn ame. T he parameter attach est he functiont ot he typ e\nof thatp arameter.\n155\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 173,
      "page_label": "155"
    }
  },
  {
    "page_content": "ptg16105617\n156 CHAPTER 6. METHODS\nLet’sw rite our ﬁrs tmethod inas implep ackagef or plane geometr y:\ngopl.io/ch6/geometry\npackage geometry\nimport \"math\"\ntype Point struct{ X, Y float64 }\n// traditional function\nfunc Distance(p, q Point) float64 {\nreturn math.Hypot(q.X-p.X, q.Y-p.Y)\n}\n// same thing, but as a method of the Point type\nfunc (p Point) Distance(q Point) float64 {\nreturn math.Hypot(q.X-p.X, q.Y-p.Y)\n}\nThee xt raparameter p is cal le dthem et hod’s re ceiver,al egac yfrom early obj e ct-oriente dlan-\ngu ages thatd es crib edc al lingam et hod as ‘‘sendingam essage to an obj e ct.’’\nIn G o, w ed on’tu se a s peci al name l ike this or self fort he r eceiver; w ec ho ose r eceiver\nnamesj usta sw ew ou ldf or any other parameter.S ince the receivern amew ill bef re quently\nus ed, it’sag ood ide ato choose somethings hort and tob ec on sistent acrossm et hods. A com-\nmonc hoice ist he ﬁrs tlettero ft he typ ename,l ike pfor Point.\nIn a m et hod cal l,t he receivera rgumenta pp earsb eforet he method name. T hisp aral lels the\nde clarat ion, in whicht he receiverp arameter appearsb eforet he method name.\np: =P oint{1, 2}\nq: =P oint{4, 6}\nfmt.Println(Distance(p, q)) // \"5\", function call\nfmt.Println(p.Distance(q)) // \"5\", method call\nThere’sn oc onﬂic tbetweent he two declarat ions off unctions cal le dDistance ab ove . The ﬁrs t\nde claresap ackage-le vel functionc al le dgeometry.Distance.T he secon dde claresam et hod\nof the typ ePoint,s oi ts namei s Point.Distance.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 174,
      "page_label": "156"
    }
  },
  {
    "page_content": "de claresap ackage-le vel functionc al le dgeometry.Distance.T he secon dde claresam et hod\nof the typ ePoint,s oi ts namei s Point.Distance.\nThee xpression p.Distance is c al le d aselector,b ecause i ts elec tst he a ppro priate Distance\nmethod for the receiver p of typ ePoint.S elec tor sarea ls o us edt os elec tﬁelds ofs tr uct typ es,\nas in p.X.S ince met hodsa nd ﬁelds inhabit the samen ames pace,d eclaring a met hod Xon the\nst ruc ttype Pointwouldb ea mbiguous and the compi ler will rej e cti t.\nSincee acht yp e hasi ts own names pace for met hods, wec an use the name Distance foro ther\nmethodss ol on gas the ybelong tod if ferentt yp es. Let’sd eﬁne a t yp ePath that representsa\nsequence ofl ines eg ments andg ivei ta Distancemethod too.\n// A Path is a journey connecting the points with straight lines.\ntype Path []Point\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 174,
      "page_label": "156"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.1. METHOD DECLARATIONS 157\n// Distance returns the distance traveled along the path.\nfunc (path Path) Distance() float64 {\nsum := 0.0\nfor i := range path {\nif i > 0 {\nsum += path[i-1].Distance(path[i])\n}\n}\nreturn sum\n}\nPath is a name d slice typ e,n ot a str uct typ e li kePoint,y et wec an still deﬁne methodsf or it.\nIn allow ing met hodst ob ea ss oci ated wit hanyt yp e,G oi su nlikem anyo ther obj e ct-oriente d\nlanguages. I ti so ften conv enientt od eﬁne addition alb eh avior sfors implet yp essuch asn um-\nbers,s tr ings, slices, maps, an ds om etimese venf unctions.M et hodsm ay bed eclare don any\nname dtype deﬁne din the samep ackage, sol on gas its underly ing typ eis neither a point ern or\nan interface.\nThet wo Distance methodsh aved if ferentt yp es. Th ey’re n ot r el ate d to e acho ther at al l,\nthough Path.Distance us es Point.Distance internal lyt oc ompute the lengt hof eachs eg-\nment thatc onne cts adjacentp oints.\nLet’sc al lthen ew met hod toc ompute the per imeter ofar ig htt riangle:\nperim := Path{\n{1, 1},\n{5, 1},\n{5, 4},\n{1, 1},\n}\nfmt.Println(perim.Distance()) // \"12\"\nIn the two cal lsa bove tom et hodsn amed Distance,t he compi ler deter mines whichf unction\nto cal lbasedo nb ot hthem et hod namea nd the t yp eof the receiver. I nt he ﬁrs t, path[i-1]\nhast yp e Point so Point.Distance is c al le d; in t he s econ d, perim hast yp e Path,s o\nPath.Distanceis cal le d.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 175,
      "page_label": "157"
    }
  },
  {
    "page_content": "hast yp e Point so Point.Distance is c al le d; in t he s econ d, perim hast yp e Path,s o\nPath.Distanceis cal le d.\nAl l methodso fag iven typ e mu sth aveu nique names, b ut dif ferentt yp es canu se t he s ame\nname for a met hod,l iket he Distance methodsf or Point and Path;t here’sn on eed toq ualif y\nfunc tionn ames (for example, PathDistance)t od is ambigu ate. H erew es ee the ﬁrs tbeneﬁtt o\nusingm et hodso vero rdinar yfunc tions:m et hod names can bes horter.T he beneﬁti sm ag ni-\nﬁed for cal lso riginating outside the package, since the ycanu se the shorter name an domit the\npackagen ame:\nimport \"gopl.io/ch6/geometry\"\nperim := geometry.Path{{1, 1}, {5, 1}, {5, 4}, {1, 1}}\nfmt.Println(geometry.PathDistance(perim)) // \"12\", standalone function\nfmt.Println(perim.Distance()) // \"12\", method of geometry.Path\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 175,
      "page_label": "157"
    }
  },
  {
    "page_content": "ptg16105617\n158 CHAPTER 6. METHODS\n6.2. M ethods with a PointerR eceiver\nBecaus ecallingaf unctionm akes a copy ofe acha rgumentv alue,i faf unctionn eedst ou pdate\nav ar iable,o ri fa na rgumenti ss ol arge t hatw ew isht oa void copy ing it, wem ustp asst he\naddresso ft he var iable usingap oint er. T he sameg oesf or met hodst hatn eed tou pdatet he\nre ceiverv ar iable: wea tt ach themt ot he point ert yp e,s ucha s *Point.\nfunc (p *Point) ScaleBy(factor float64) {\np.X *= factor\np.Y *= factor\n}\nThen ameo ft hism et hod i s (*Point).ScaleBy.T he p arenthes es aren ecessary ; without\nthem, the expressionw ou ldb ep arseda s *(Point.ScaleBy).\nIn a realist icp rogram, conv ent ion dic tates that if any met hod of Point hasap oint err eceiver,\nthen al lmethodso f Point shouldh aveap oint err eceiver, eveno nest hatd on’ts tr ictly need it.\nWe’ve bro ken thisr ulef or Pointso thatw ec an showb ot hkind sof met hod.\nName dtypes( Point)a nd point ers to them( *Point)a re the onlyt yp esthat may appear in a\nre ceiverd eclarat ion. Fur thermore, to avoid ambiguities, met hod declarat ions are not per mit-\nte don named typ esthat aret hems elves point ert yp es:\ntype P *int\nfunc (P) f() { /* ... */ } // compile error: invalid receiver type\nThe (*Point).ScaleBymethod can bec al le dby providinga *Pointre ceiver, liket his:\nr: =& Point{1, 2}\nr.ScaleBy(2)\nfmt.Println(*r) // \"{2, 4}\"\nor this:\np: =P oint{1, 2}\npptr := &p\npptr.ScaleBy(2)\nfmt.Println(p) // \"{2, 4}\"\nor this:\np: =P oint{1, 2}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 176,
      "page_label": "158"
    }
  },
  {
    "page_content": "r.ScaleBy(2)\nfmt.Println(*r) // \"{2, 4}\"\nor this:\np: =P oint{1, 2}\npptr := &p\npptr.ScaleBy(2)\nfmt.Println(p) // \"{2, 4}\"\nor this:\np: =P oint{1, 2}\n(&p).ScaleBy(2)\nfmt.Println(p) // \"{2, 4}\"\nButt he lastt wo cas es areu ngain ly. F or tunately, the langu ageh elps ush ere. I ft he receiver pis\na variab le of typ ePointbutt he method requires a *Pointre ceiver, wec an use thiss horthand:\np.ScaleBy(2)\nandt he compi ler will per for man implicit &p on the var iable.T hisw or kso nlyf or var iables,\nincludings tr uct ﬁelds like p.X anda rray ors lice elements li ke perim[0].W ec annot cal l a\n*Point method o nan on-addressable Point re ceiver, because t here’sn ow ay t oo bt ain t he\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 176,
      "page_label": "158"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.2. METHODS WITH A POINTER RECEIVER 159\naddresso fat emporar y value.\nPoint{1, 2}.ScaleBy(2) // compile error: can'tt ake address of Point literal\nButw e can call a Point method like Point.Distance with a *Point re ceiver, because there is\naw ay too bt ain the value fro mthea ddress: justl oadt he value point edt ob yt he receiver. T he\ncomp iler inserts an imp licit *op erat ionf or us. Thes e twof unctionc al lsa re equivalent:\npptr.Distance(q)\n(*pptr).Distance(q)\nLet’ss ummar izethes ethre ecasesa gain, since the yareaf re quentp oint ofc onfusion. I ne very\nvalid met hod cal l expression, exactlyo ne oft hese three statementsi st rue.\nEither t he receivera rgumenth as t he s amet yp e as the receiverp arameter,f or exampleb ot h\nhave typ eTor bot hhave typ e*T:\nPoint{1, 2}.Distance(q) // Point\npptr.ScaleBy(2) // *Point\nOr the receivera rgumenti sava riab le of typ eT andt he receiverp arameter has typ e *T.T he\ncomp iler implicitlyt akes the addresso ft he var iable:\np.ScaleBy(2) // implicit (&p)\nOr t he receivera rgumenth as typ e *T andt he receiverp arameter has typ e T.T he compi ler\nimplicitlyd ereferences the receiver, ino ther words,l oads the value:\npptr.Distance(q) // implicit (*pptr)\nIf all the methodso fan amed typ eT have a receivert yp eof T itself (not *T), iti ss afet oc opy\ninst ances o ft hatt yp e; callinga ny o fi ts met hodsn ecessarily m akes a co py.F or e xample,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 177,
      "page_label": "159"
    }
  },
  {
    "page_content": "inst ances o ft hatt yp e; callinga ny o fi ts met hodsn ecessarily m akes a co py.F or e xample,\ntime.Duration values arel ib eral lyc opie d,i ncludinga sa rguments tof unctions.B ut ifa ny\nmethod has a point err eceiver, you shoulda void copy ing ins tances of T becaus edoings om ay\nviol a te int ernal invar iants. F or example, copying ani ns tance of bytes.Buffer wouldc ause\ntheo riginala nd the c opyt oa li as (§2.3.2) t he s ameu nderly ing a rray o fb ytes. S ubsequent\nmethod cal lsw ou ldh aveu np redic table effe cts.\n6.2.1. Nil I saV alid Receiver Value\nJu sta ss om efunc tions allow nil point ers asa rguments, sod os om emethodsf or their receiver,\nespeci ally if nil is a meaningf ulzerov alue oft he typ e,a sw it hmaps ands lices. I nt hiss imple\nlin ked listo fi nt egers, nilrepres ents the emp tyl ist:\n// An IntList is a linked list of integers.\n// A nil *IntList represents the empty list.\ntype IntList struct {\nValue int\nTail *IntList\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 177,
      "page_label": "159"
    }
  },
  {
    "page_content": "ptg16105617\n160 CH\nAPTER METHODS6.\n// Sum returns the sum of the list elements.\nfunc (list *IntList) Sum() int {\nif list == nil {\nreturn 0\n}\nreturn list.Value + list.Tail.Sum()\n}\nWh \neny ou deﬁne a t yp ewhos emethodsa llow nil as \na receiverv alue,i t’sw or thp oint ing this\noute xplicitly in its document ation comment, as we did abov e.\nHere’sp ar tof the deﬁnition of the Valuestype \nfro mthe net/urlpackag\ne:\nnet/url\npackage url\n// Values maps a string key to a list of values.\ntype Values map[string][]string\n// Get returns the first value associated with the given key,\n// or \"\" if there are none.\nfunc (v Values) Get(key string) string {\nif vs := v[key]; len(vs) > 0 {\nreturn vs[0]\n}\nreturn \"\"\n}\n// Add adds the value to key.\n// It appends to any existing values associated with key.\nfunc (v Values) Add(key, value string) {\nv[key] = append(v[key], value)\n}\nIt \nexp oses its represent ation asam ap but als oprov ides met hodst os implif y accesst ot he map,\nwhos e values ares lices ofs tr ings—it ’samu l timap.I ts clients can u se i ts intr insic operator s\n(make,s lice literal\ns, m[key],a nd \nsoo n), ori ts met hods, orb ot h, as the yprefer :\ngopl.io/ch6/urlvalues\nm:\n=u rl.Values{\"lang\": {\"en\"}} // direct construction\nm.Add(\"item\", \"1\")\nm.Add(\"item\", \"2\")\nfmt.Println(m.Get(\"lang\")) // \"en\"\nfmt.Println(m.Get(\"q\")) // \"\"\n(first value)fmt.Println(m.Get(\"item\")) // \"1\"\n(direct map access)// \"[1 2]\"fmt.Println(m[\"item\"])\nm=n il\nfmt.Println(m.Get(\"item\")) // \"\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 178,
      "page_label": "160"
    }
  },
  {
    "page_content": "(first value)fmt.Println(m.Get(\"item\")) // \"1\"\n(direct map access)// \"[1 2]\"fmt.Println(m[\"item\"])\nm=n il\nfmt.Println(m.Get(\"item\")) // \"\"\nm.Add(\"item\", \"3\") // panic: assignment to entry in nil map\nIn \nthe ﬁnalc al lto Get,t he \nnil receiverb eh avesl ikea ne mp tym ap.W ec ou lde quivalentlyh ave\nw\nr itt en i\nt a\ns  V\nalues(nil).Get(\"item\"),  b\nut nil.Get(\"item\") wi \nl l notc ompi leb ecause\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 178,
      "page_label": "160"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.3. COMPOSING TYPES BYS TRUCT EMBEDDING 161\nthet yp eof nil hasn ot beend eter mined.B yc ontrast, the ﬁnalc al lto Add panics as itt ries to\nup datean il map.\nBecaus e url.Values is a ma pt yp e andam ap refer st oi ts k ey/value pair si ndirec tly,a ny\nup dates an dd elet ions t hat url.Values.Add makest ot he m ap elements ar ev isible t ot he\ncaller.H ow ever, asw it h ordinar y func tions,a ny c hangesam et hod m akes t ot he r eference\nitself,l ikes etting i tt o nil or m ak ingi tr efer t oad if ferentm ap dat a st ruc ture, w ill n ot b e\nreﬂec ted int he cal ler.\n6.3. Composing Types b yS truct Embedding\nConsider the typ eColoredPoint:\ngopl.io/ch6/coloredpoint\nimport \"image/color\"\ntype Point struct{ X, Y float64 }\ntype ColoredPoint struct {\nPoint\nColor color.RGBA\n}\nWe cou ldh aved eﬁne d ColoredPoint as a s tr uct oft hree ﬁelds,b ut ins teadw e embedded a\nPoint to provide the X and Y ﬁelds.A sw es aw in Sec tion 4.4.3, embeddingl ets ust akeas yn-\ntactic s hortcutt od eﬁninga ColoredPoint that co nt ainsa ll t he ﬁelds o f Point,p lu s some\nmore . If w ew ant, w ec an s elec t theﬁ elds o f ColoredPoint that wer ec ontr ibute d by t he\nembedde dPointwithoutm entioning Point:\nvar cp ColoredPoint\ncp.X = 1\nfmt.Println(cp.Point.X) // \"1\"\ncp.Point.Y = 2\nfmt.Println(cp.Y) // \"2\"\nAs imi lar mechanism applies tot he metho ds of Point.W ec an cal lmethodso ft he emb edde d\nPoint ﬁeldu singar eceivero ft yp e ColoredPoint,e vent houg h ColoredPoint hasn o",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 179,
      "page_label": "161"
    }
  },
  {
    "page_content": "Point ﬁeldu singar eceivero ft yp e ColoredPoint,e vent houg h ColoredPoint hasn o\nde clare dmethods:\nred := color.RGBA{255, 0, 0, 255}\nblue := color.RGBA{0, 0, 255, 255}\nvar p = ColoredPoint{Point{1, 1}, red}\nvar q = ColoredPoint{Point{5, 4}, blue}\nfmt.Println(p.Distance(q.Point)) // \"5\"\np.ScaleBy(2)\nq.ScaleBy(2)\nfmt.Println(p.Distance(q.Point)) // \"10\"\nThem et hodso f Point have been prom ote dto ColoredPoint.I nt hisw ay,e mb eddinga llows\ncomp lex typ es with m anym et hodst ob eb ui ltu pb yt he comp ositi on of s everal ﬁel ds,e ach\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 179,
      "page_label": "161"
    }
  },
  {
    "page_content": "ptg16105617\n162 CHAPTER 6. METHODS\nprov idingaf ew met hods.\nRe adersf ami liar wit hcl ass-b ased obj e ct-oriente dlanguagesm ay bet empt edt ov ie wPoint as\nab as ecl ass and ColoredPoint as a s ub class ord er ive dcl ass,o rt oi nt erprett he rel ation ship\nbetweent hese typ es as if a ColoredPoint ‘‘is a’’Point.B ut thatw ou ldb eam istake . No tice\nthec al lst o Distanceab ove . Distancehasap arameter oft yp ePoint,a nd qis not a Point,s o\nalthough q do eshave ane mb edde d ﬁeldo ft hatt yp e,w em uste xplicitlys elec tit.A tt emp ting\nto pass qwould be an error :\np.Distance(q) // compile error: cannot use q (ColoredPoint) as Point\nA ColoredPoint is not a Point,b ut it ‘‘hasa ’’Point,a nd ith as two addition alm et hods Dis-\ntance and ScaleBy prom ote dfrom Point.I fy ou prefert ot hin k in ter mso fi mp lementation,\nthee mb edde d ﬁeldi ns tructst he compi ler tog eneratea ddition alw rapperm et hodst hatd ele-\ngatet ot he declare dmethods, equivalentt ot hese:\nfunc (p ColoredPoint) Distance(q Point) float64 {\nreturn p.Point.Distance(q)\n}\nfunc (p *ColoredPoint) ScaleBy(factor float64) {\np.Point.ScaleBy(factor)\n}\nWh en Point.Distance is c al le dby the ﬁrs t of t hese w rapperm et hods, its r eceiverv alue is\np.Point,n ot p,a nd there isn ow ay for the method toa ccesst he ColoredPoint in whicht he\nPointis emb edde d.\nThet yp eof ana nony mou sﬁeldm ay beapo inter to a n amed typ e,i nw hichc as e ﬁelds and",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 180,
      "page_label": "162"
    }
  },
  {
    "page_content": "Pointis emb edde d.\nThet yp eof ana nony mou sﬁeldm ay beapo inter to a n amed typ e,i nw hichc as e ﬁelds and\nmethodsa re pro mot edi ndirec tly f ro mthep oint ed-too bj e ct. Addin ga nother le ve lof indi-\nre ction lets uss hare commons tr uctures andv ar yther el ation ships bet weeno bj e cts dynami-\ncally. T he declarat iono f ColoredPointbelowe mb eds a *Point:\ntype ColoredPoint struct {\n*Point\nColor color.RGBA\n}\np: =C oloredPoint{&Point{1, 1}, red}\nq: =C oloredPoint{&Point{5, 4}, blue}\nfmt.Println(p.Distance(*q.Point)) // \"5\"\nq.Point = p.Point // p and q now share the same Point\np.ScaleBy(2)\nfmt.Println(*p.Point, *q.Point) // \"{2 2} {2 2}\"\nAs tr uct typ emayh avem oret hano ne anony mou sﬁeld. H ad wed eclare dColoredPointas\ntype ColoredPoint struct {\nPoint\ncolor.RGBA\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 180,
      "page_label": "162"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.3. COMPOSING TYPES BYS TRUCT EMBEDDING 163\nthen a value o ft hist yp ewouldh avea ll the methodso f Point,a ll the methodso f RGBA,a nd\nanya ddition alm et hodsd eclare d on ColoredPoint direc tly.W hent he c ompi ler res olves a\nsele ctors ucha s p.ScaleBy to a m et hod,i tﬁ rs tlo oks for a d irec tly declare dmethod named\nScaleBy,t henf or met hodsp ro mot edo ncef ro mColoredPoint’se mb edde d ﬁelds,t henf or\nmethodsp ro mot edt wice fro membedde d ﬁelds wit hin Point and RGBA,a nd soo n. Th ec om-\npi ler rep ortsa ne rror ift he selec tor was ambiguous because two met hodsw erep ro mot edf ro m\nthes amer an k.\nMethodsc an bed eclare don lyo nn amed typ es (li kePoint)a nd point ers to t hem( *Point),\nbutt hankst oe mb edding, it’sp ossiblea nd som etimesu sefulf or unname dst ruc ttypest oh ave\nmethodst oo.\nHere’san ice trick to illustrate. T hise xamples hows par tof a simplec ache imp lemente dusing\ntwop ackage-le vel var iables, a mut ex( §9.2) an dt he map thati tg uard s:\nvar (\nmu sync.Mutex // guards mapping\nmapping = make(map[string]string)\n)\nfunc Lookup(key string) string {\nmu.Lock()\nv: =m apping[key]\nmu.Unlock()\nreturn v\n}\nThev ersionb elow isf unctionallye quivalentb ut gro ups toget her the two rel ate dvar iables in a\nsinglep ackage-le vel var iable,cache:\nvar cache = struct {\nsync.Mutex\nmapping map[string]string\n}{\nmapping: make(map[string]string),\n}\nfunc Lookup(key string) string {\ncache.Lock()\nv: =c ache.mapping[key]\ncache.Unlock()",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 181,
      "page_label": "163"
    }
  },
  {
    "page_content": "mapping map[string]string\n}{\nmapping: make(map[string]string),\n}\nfunc Lookup(key string) string {\ncache.Lock()\nv: =c ache.mapping[key]\ncache.Unlock()\nreturn v\n}\nThen ew v ar iable gives m oree xpressiven ames t ot he v ar iables rel ate d to t he c ache,a nd\nbecaus e the sync.Mutex ﬁeldi se mb edde d within it, its Lock and Unlock methodsa re\nprom ote d to t he unnamed str uct typ e,a llow ing ust ol ockt he cache with a s elf-explanatory\nsy ntax.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 181,
      "page_label": "163"
    }
  },
  {
    "page_content": "ptg16105617\n164 CHAPTER 6. METHODS\n6.4. M ethod Values and Expressions\nUs ual lyw es elec tandc al lam et hod int he samee xpression, as in p.Distance(),b ut it’sp ossi-\nblet os ep aratet hese two operat ions.T he selec tor p.Distance yields a metho dvalu e,af unc-\ntion thatb inds a m et hod (Point.Distance)t oas peciﬁcr eceiverv alue p.T hisf unctionc an\nthen bei nv oke dwithoutar eceiverv alue; itn eedso nlyt he non-receivera rguments.\np: =P oint{1, 2}\nq: =P oint{4, 6}\ndistanceFromP := p.Distance // method value\nfmt.Println(distanceFromP(q)) // \"5\"\nvar origin Point// {0, 0}\nfmt.Println(distanceFromP(origin)) // \"2.23606797749979\", ;5\nscaleP := p.ScaleBy // method value\nscaleP(2) // pb ecomes (2, 4)\nscaleP(3) // then (6, 12)\nscaleP(10) // then (60, 120)\nMethod v alues ar eu sefulw henap ackage’sA PI c al lsf or a f unctionv alue,a nd the c lient’s\ndesired beh avior for thatf unctioni st oc al lam et hod onas peciﬁcr eceiver. F or example, the\nfunc tion time.AfterFunc callsaf unctionv alue afteras peciﬁed del ay. T hisp rogram usesi t\nto launch the rocket raf ter 10 secon ds:\ntype Rocket struct { /* ... */ }\nfunc (r *Rocket) Launch() { /* ... */ }\nr: =n ew(Rocket)\ntime.AfterFunc(10 * time.Second, func() { r.Launch() })\nThem et hod value synt axi ss horter :\ntime.AfterFunc(10 * time.Second, r.Launch)\nRelate d to the method value ist he metho dexpre ssi on.W henc al lingam et hod,a so pp osedt o",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 182,
      "page_label": "164"
    }
  },
  {
    "page_content": "time.AfterFunc(10 * time.Second, r.Launch)\nRelate d to the method value ist he metho dexpre ssi on.W henc al lingam et hod,a so pp osedt o\nan ordinar yfunc tion, wem usts up ply the receiveri nas peci al way usingt he selec tor syntax. A\nmethod expression, writt en T.for (*T).fwhere Tis a typ e,y ieldsaf unctionv alue wit har eg-\nular ﬁrs tparameter tak ingt he place oft he receiver, soi tc an bec al le d in the usu alw ay.\np: =P oint{1, 2}\nq: =P oint{4, 6}\ndistance := Point.Distance // method expression\nfmt.Println(distance(p, q)) // \"5\"\nfmt.Printf(\"%T\\n\", distance) // \"func(Point, Point) float64\"\nscale := (*Point).ScaleBy\nscale(&p, 2)\nfmt.Println(p) // \"{2 4}\"\nfmt.Printf(\"%T\\n\", scale) // \"func(*Point, float64)\"\nMethod expressions can beh elpf ulw heny ou need a value tor epresent a choice amon gseveral\nmethodsb elon gingt ot he s amet yp e so t haty ou c an cal l thec hosenm et hod w it h many\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 182,
      "page_label": "164"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.5. EXAMPLE: BIT VECTOR TYPE 165\ndif ferentr eceivers.I nt he fol low ing example, the var iableop repres ents either the addition or\nthes ubtrac tionm et hod oft yp e Point,a nd Path.TranslateBy callsi tf or eachp oint int he\nPath:\ntype Point struct{ X, Y float64 }\nfunc (p Point) Add(q Point) Point { return Point{p.X + q.X, p.Y + q.Y} }\nfunc (p Point) Sub(q Point) Point { return Point{p.X - q.X, p.Y - q.Y} }\ntype Path []Point\nfunc (path Path) TranslateBy(offset Point, add bool) {\nvar op func(p, q Point) Point\nif add {\nop = Point.Add\n}e lse {\nop = Point.Sub\n}\nfor i := range path {\n// Call either path[i].Add(offset) or path[i].Sub(offset).\npath[i] = op(path[i], offset)\n}\n}\n6.5. Example: BitV ector Type\nSets in Goa re usu allyi mp lemente das a map[T]bool,w here T is the elementt yp e.A setr ep-\nresent edb yam ap isv er y ﬂexibleb ut,f or cer tain pro blems, a s peci alizedr epresent ation may\noutp erfor m it.F or example, ind om ainss ucha sd at aﬂow analysisw here set elements ares mall\nnon-negat ive int egers,s ets havem anye lements, ands et operat ions likeu niona nd int ers ection\narec ommon, a bitv ec tor is ide al.\nAb it vec tor usesas lice ofu nsig ned int egerv alues or ‘‘word s,’’each bit of w hichr epresentsa\npossible elemento ft he s et. Th es et co nt ains i if t he i-t h bit iss et. Th ef ol low ing program\ndemon strates a simpleb it vec tor typ ewith thre emethods:\ngopl.io/ch6/intset\n// An IntSet is a set of small non-negative integers.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 183,
      "page_label": "165"
    }
  },
  {
    "page_content": "demon strates a simpleb it vec tor typ ewith thre emethods:\ngopl.io/ch6/intset\n// An IntSet is a set of small non-negative integers.\n// Its zero value represents the empty set.\ntype IntSet struct {\nwords []uint64\n}\n// Has reports whether the set contains the non-negative value x.\nfunc (s *IntSet) Has(x int) bool {\nword, bit := x/64, uint(x%64)\nreturn word < len(s.words) && s.words[word]&(1<<bit) != 0\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 183,
      "page_label": "165"
    }
  },
  {
    "page_content": "ptg16105617\n166 CH\nAPTER METHODS6.\n// Add adds the non-negative value x to the set.\nfunc (s *IntSet) Add(x int) {\nword, bit := x/64, uint(x%64)\nfor word >= len(s.words) {\ns.words = append(s.words, 0)\n}\ns.words[word] |= 1 << bit\n}\n// UnionWith sets s to the union of s and t.\nfunc (s *IntSet) UnionWith(t *IntSet) {\nfor i, tword := range t.words {\nif i < len(s.words) {\ns.words[i] |= tword\n}e lse {\ns.words = append(s.words, tword)\n}\n}\n}\nSincee achw ordh as \n64 bits, tol ocatet he bit for x,w\neu se the quotient x/64 as \nthe wordi ndex\nandt he remainder x%64 as \nthe bit index wit hin thatw ord. T he UnionWith op \nerat ionu sest he\nbit w ise ORo perator | to \ncompute the union6 4e lements at a time. ( We’ll revisit the choice of\n64-bit words inE xercis e6.5.)\nThisi mp lementation l acks man yd esirable f eatures, s om e of w hicha re p os eda se xercis es\nb\nelow, but one i\ns h\nard t\no l\nive w\nit hout a way to p\nrint an I\nntSet as\n a str ing . Let’s g\nive i\nt a S\ntring\nmethod \nasw ed id wit hCelsiusin Sec \ntion 2.5:\n// String returns the set as a string of the form \"{1 2 3}\".\nfunc (s *IntSet) String() string {\nvar buf bytes.Buffer\nbuf.WriteByte('{')\nfor i, word := range s.words {\nif word == 0 {\ncontinue\n}\nfor j := 0; j < 64; j++ {\nif word&(1<<uint(j)) != 0 {\nif buf.Len() > len(\"{\") {\nbuf.WriteByte('' )\n}\nfmt.Fprintf(&buf, \"%d\", 64*i+j)\n}\n}\n}\nbuf.WriteByte('}')\nreturn buf.String()\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 184,
      "page_label": "166"
    }
  },
  {
    "page_content": "}\n}\n}\nbuf.WriteByte('}')\nreturn buf.String()\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 184,
      "page_label": "166"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.5. EXAMPLE: BIT VECTOR TYPE 167\nNo tice t he s imi lar ity o ft he String method abo ve w it h intsToString in S ec tion 3.5.4;\nbytes.Buffer is often usedt hisw ay in String methods. The fmtpackaget re ats typ eswith a\nString method speci ally sot hatv alues ofc omplic ated typ escand ispl ayt hems elves in a user-\nfriendlym anner.I ns teado fp rint ing the raw represent ation of the value (a str uct int hisc as e),\nfmt callst he String method.T he mech anism relies oni nt erfaces andt yp e assertions,w hich\nwe’ll explain in Chapt er7 .\nWe can now demon strate IntSetin action:\nvar x, y IntSet\nx.Add(1)\nx.Add(144)\nx.Add(9)\nfmt.Println(x.String()) // \"{1 9 144}\"\ny.Add(9)\ny.Add(42)\nfmt.Println(y.String()) // \"{9 42}\"\nx.UnionWith(&y)\nfmt.Println(x.String()) // \"{1 9 42 144}\"\nfmt.Println(x.Has(9), x.Has(123)) // \"true false\"\nAw ordo fc aution:w ed eclare dString and Has as met hodso ft he point ert yp e*IntSet not\nouto fn ecessity,b ut for con sistenc ywith theo ther two met hods, whichn eed a point err eceiver\nbecaus e they a ssig n to s.words.C on sequently, a n IntSet valu e do es noth avea String\nmethod,o cc asionallyl eadingt os ur prisesl iket his:\nfmt.Println(&x) // \"{1 9 42 144}\"\nfmt.Println(x.String()) // \"{1 9 42 144}\"\nfmt.Println(x) // \"{[4398046511618 0 65536]}\"\nIn t he ﬁrs t case,w ep rint a n *IntSet pointer, whichd oesh avea String method.I nt he\nsecond cas e,w ec al lString() on an IntSet var iable; the compi ler insertst he imp licit & op er-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 185,
      "page_label": "167"
    }
  },
  {
    "page_content": "second cas e,w ec al lString() on an IntSet var iable; the compi ler insertst he imp licit & op er-\nat ion, giv ing usap oint er, whichh as the String method.B ut int he thirdc as e,b ecause the\nIntSet value does n ot havea String method, fmt.Println pr intst he represent ation of t he\nst ruc t instead. I t’si mp ortantn ot t of or g ett he & op erator.M ak ing String am et hod o f\nIntSet,n ot *IntSet,m ig htb eag ood ide a,butt hisi sac as e-by-c asej udg ment.\nExercis e 6.1:Implementt hese addition alm et hods:\nfunc (*IntSet) Len() int // return the number of elements\nfunc (*IntSet) Remove(x int) // remove x from the set\nfunc (*IntSet) Clear() // remove all elements from the set\nfunc (*IntSet) Copy() *IntSet // return a copy of the set\nExercis e 6.2:Deﬁne a v ar iadic(*IntSet).AddAll(...int) method thata llowsal isto fv al-\nues tob ea dde d,s ucha s s.AddAll(1, 2, 3).\nExercis e 6.3:(*IntSet).UnionWith comp utest he uniono ft wo sets using |,t he word-p aral-\nlelb it w ise ORo perator.I mp lementm et hodsf or IntersectWith, DifferenceWith,a nd Sym-\nmetricDifference fort he cor respondings et operat ions.( Thes ymmetr icd if ference oft wo\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 185,
      "page_label": "167"
    }
  },
  {
    "page_content": "ptg16105617\n168 CHAPTER 6. METHODS\nsets cont ainst he elements present ino ne set ort he other but not bot h.)\nExercis e 6.4:Addam et hod Elems that retur nsas lice cont ainingt he elements oft he set, suit-\nable for iterat ingo verw it ha rangelo op.\nExercis e 6.5:Thet yp eof eachw ordu sedb y IntSet is uint64,b ut 64-bit arithmeticm ay be\ninefﬁciento na3 2-bit platfor m.M odif ythep rogram tou se the uint type,w hichi st he most\nefﬁcientu nsig ned int egert yp efort he platfor m.I ns teado fd iv idingb y6 4, deﬁne a c on stant\nholdingt he effec tive size of uint in bits, 32 or6 4. Y ou can use the perhaps too-cle ver expres-\nsion 32 << (^uint(0) >> 63)fort hisp ur pos e.\n6.6. Encapsulation\nAv ar iable orm et hod ofa no bj e cti ss aid tob e encapsul ate dif iti si naccessiblet oc lients oft he\nobjec t.E nc apsulat ion, som etimesc al le din f o rmati onh iding,i sak ey asp ect ofo bj e ct-oriente d\nprog ramming.\nGo h as o nlyo ne me ch anism t oc ontrol t he v isibilit y of n ames: cap it alize d identiﬁersa re\nexp orted fro mthep ackagei nw hicht he yared eﬁne d,a nd unc apit alize dnamesa re not.T he\nsame mech anism thatl imits accesst om embers ofap ackagea ls olimits accesst ot he ﬁelds ofa\nst ruc tor the methodso fat yp e.A sac on sequence,t oe nc apsulatea no bj e ct, wem ustm akei ta\nst ruc t.\nThat’st he reasont he IntSet type fro mthep re vious sec tion was decl are das a str uct typ eeven\nthough ith as onlyas ingleﬁ eld:\ntype IntSet struct {\nwords []uint64\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 186,
      "page_label": "168"
    }
  },
  {
    "page_content": "though ith as onlyas ingleﬁ eld:\ntype IntSet struct {\nwords []uint64\n}\nWe cou ldi ns teadd eﬁne IntSetas a slice typ e as fol lows, thoug hof cours ewe’dh avet or eplace\neach occ urrenceo f s.wordsby *sin its met hods:\ntype IntSet []uint64\nAlthough thisv ersiono f IntSet wouldb ee ss ent ial lye quivalent, itw ou lda llow clients fro m\not her packages tor eada nd modif ythes lice direc tly.P ut another way,w here ast he expression\n*s couldb eu sedi na ny p ackage, s.words maya pp ear o nlyi nt he p ackaget hatd eﬁnes\nIntSet.\nAnot her cons equence oft hisn ame-b ased mechanism ist hatt he unito fe nc apsulat ioni st he\npackage, not the typ e as in manyo ther langu ages. The ﬁel ds ofas tr uct typ e arev isible toa ll\nco dewithin the samep ackage. W hether the codea pp earsi naf unctiono ram et hod makes no\ndif ference.\nEncapsulat ionp rovides thr ee b eneﬁts. Fir st,b ecause c lients cann ot d irec tly m odif y the\nobjec t’sv ar iables, one need ins pec tfe wer statementst ou nderst and the possiblev alues oft hose\nvar iables.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 186,
      "page_label": "168"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 6.6. ENCAPSULATION 169\nSecond,h idingi mp lementation det ails pre vents clients f ro mdep endingo nt hings thatm ig ht\nch ange ,whichg ives the desig ner gre aterf re e dom toe vo l vethei mp lementation wit houtb re ak-\ningA PI compatibi lit y.\nAs a ne xample, c on sider t he bytes.Buffer type.I ti sf re quentlyu sedt oa cc umulatev er y\nshort s tr ings, s oi ti sap roﬁtableo pt imizat iont or es erve a l it tle extra s pace in t he obj e ctt o\navoidm emor yal location int hisc ommonc as e.S ince Buffer is a str uct typ e,t hiss pace takes\nthef or m of ane xt ra ﬁeldo ft yp e[64]byte with anu nc apit alize dname.W hent his ﬁeldw as\nadde d,b ecause itw as not exp orted,c lients of Bufferoutside the bytespackagew ereu naware\nof any change excepti mp rov edp er for mance. Buffer andi ts Grow method are shown below,\nsimpliﬁed for clarity :\ntype Buffer struct {\nbuf []byte\ninitial [64]byte\n/* ... */\n}\n// Grow expands the buffer'sc apacity, if necessary,\n// to guarantee space for another n bytes. [...]\nfunc (b *Buffer) Grow(n int) {\nif b.buf == nil {\nb.buf = b.initial[:0] // use preallocated space initially\n}\nif len(b.buf)+n > cap(b.buf) {\nbuf := make([]byte, b.Len(), 2*cap(b.buf) + n)\ncopy(buf, b.buf)\nb.buf = buf\n}\n}\nThet hirdb eneﬁto fe nc apsulat ion, andi nm anyc as esthem osti mp ortant, ist hati tp re vents\nclients fro msett ing ano bj e ct’sv ar iables arbit rar ily.B ecause t he obj e ct’sv ar iables can bes et",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 187,
      "page_label": "169"
    }
  },
  {
    "page_content": "clients fro msett ing ano bj e ct’sv ar iables arbit rar ily.B ecause t he obj e ct’sv ar iables can bes et\non lyb yf unctions int he samep ackage, the aut hor of thatp ackagec an ensure thata ll tho se\nfunc tions maintain the obj e ct’si nt ernal invar iants. For example, the Counter type belowp er-\nmits clients toi ncrement the count ero rt or es etit toz ero, but not tos et itt os om earbit rar y\nvalue:\ntype Counter struct { n int }\nfunc (c *Counter) N() int {r eturn c.n }\nfunc (c *Counter) Increment() { c.n++ }\nfunc (c *Counter) Reset() {c .n = 0 }\nFunc tions thatm erelya ccesso rm odif y internal values o fat yp e,s ucha st he methodso ft he\nLogger type fro mlog package, below,a re cal le dgetters and setters.H ow ever, whenn aminga\ngett erm et hod,w eu su allyo mitt he Getpreﬁx. Thi sp referencef or brevit yextends toa ll met h-\nods, not justﬁ elda ccessors,a nd too ther redundant preﬁxesa sw el l,s ucha s Fetch, Find,a nd\nLookup.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 187,
      "page_label": "169"
    }
  },
  {
    "page_content": "ptg16105617\n170 CHAPTER 6. METHODS\npackage log\ntype Logger struct {\nflags int\nprefix string\n// ...\n}\nfunc (l *Logger) Flags() int\nfunc (l *Logger) SetFlags(flag int)\nfunc (l *Logger) Prefix() string\nfunc (l *Logger) SetPrefix(prefix string)\nGo s ty led oesn ot forbide xp orted ﬁelds.O fc ours e,on cee xp orted,aﬁel dc annot b eu nex-\nported wit houta ni ncompatiblec hange tot he API,s ot he initial choice shouldb ed elib erate\nands houldc on sider the complexity oft he invar iants thatm ustb em aintained,t he likelihood\nof fut ure changes, andt he quant ity ofc lientc odet hatw ou ldb ea ffec ted byac hange .\nEncapsulat ioni sn ot always desirable.B yr evealingi ts represent ation asa n int64 numb ero f\nnanosecond s, time.Duration lets usu se all the usu ala rithmetica nd comparisono perat ions\nwith durat ions,a nd event od eﬁne con stantso ft hist yp e:\nconst day = 24 * time.Hour\nfmt.Println(day.Seconds()) // \"86400\"\nAs another example, contrast IntSetwith the geometry.Pathtype fro mtheb eg inningo ft his\nch apt er. Path was deﬁne d as a slice typ e,a llow ing its clients toc on str uct ins tances usingt he\nslice literal synt ax, toi terateo veri ts pointsu singar ange loop, and soo n, where ast hese opera-\ntion sared enie dto clients of IntSet.\nHere’st he cruci al dif ference:geometry.Pathis int rinsic ally a sequence ofp oints, nom orea nd\nno less, andw ed on’tf ores eea ddingn ew ﬁelds toi t, soi tm akes sense for the geometry pack-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 188,
      "page_label": "170"
    }
  },
  {
    "page_content": "no less, andw ed on’tf ores eea ddingn ew ﬁelds toi t, soi tm akes sense for the geometry pack-\naget or evealt hat Pathis a slice.I nc ontrast, an IntSet mere lyh appens tob er epresent eda sa\n[]uint64 slice.I tc ou ldh aveb eenr epresent edu sing []uint,o rs om ethingc ompletelyd if fer-\nentf or sets thata re spars eor ver y smal l,a nd itm ig htp erhaps beneﬁtf ro maddition alf eatures\nli ke an ext ra ﬁeldt or ecordt he numbero fe lements in t he s et. F or t hese r easons,i tm akes\nsens efor IntSetto beo paque.\nIn thisc hapt er, wel earned how toa ss oci atem et hodsw it hname dtypes, andh ow toc al lthos e\nmethods. A lt hough met hodsa re cruci alto obj e ct-oriente dprog ramming, the y’re onlyh alf the\npicture. T oc ompletei t, wen eed interfaces,t he subjec tof the next chapt er.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 188,
      "page_label": "170"
    }
  },
  {
    "page_content": "ptg16105617\n7\nInt erfaces\nInterface typ es express generalizat ions ora bstrac tions about the beh avior s of other typ es. By\ngeneralizing, int erfaces let usw rite functions thata re more ﬂexiblea nd adapt ableb ecause the y\naren ot tie dto the det ails ofo ne par tic ulari mp lementation.\nMany obj e ct-oriente d languagesh aves om enotion of i nt erfaces, but w hatm akes Go’si nt er-\nfaces s od istinc tivei st hatt he y are sati sﬁed i mp licit ly.I no ther w ords,t here’sn on eed t o\nde clare all the int erfaces thatag iven concrete typ esatisﬁes; simply possessingt he necessary\nmethodsi se noug h. Thi sd esig n lets you c re ate n ew i nt erfaces t hata re s at isﬁed bye xist ing\nconcrete t yp es withoutc hang ing the e xist ing t yp es, whichi sp ar tic ularlyu sefulf or t yp es\ndeﬁne din packages thaty ou don’tc ontrol .\nIn thisc hapt er, we’ll start byl ooking att he basic mechanics ofi nt erface typ es andt heir values.\nAlon gthew ay,w e’ll study several importanti nt erfaces f ro mthes tand ard librar y.M anyG o\nprog ramsm akea sm uchu se ofs tand ard int erfaces as the ydo oft heir own ones. Final ly, we’ll\nlo oka t ty pea ss ertions (§7.10) and ty pes witches (§7.13) an ds ee how the y enable a dif ferent\nkind ofg enerality.\n7.1. I nt erfaces as Contracts\nAl l thet yp es we’ve l ooke d at s of ar hav eb een concre tet ypes.A concrete t yp e sp eciﬁes t he\nexac trepres entation of it sv alues an de xp oses the int rinsic operat ions oft hatr epresent ation,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 189,
      "page_label": "171"
    }
  },
  {
    "page_content": "exac trepres entation of it sv alues an de xp oses the int rinsic operat ions oft hatr epresent ation,\nsuch asa rithmeticf or numbers,o ri ndexing, append,a nd range fors lices. A co ncrete typ e\nmaya ls oprov ide addition alb eh avior sthro ugh its met hods. W heny ou haveav alue ofac on-\ncretet yp e,y ou knowe xac tly whati t is andw haty ou can do with it.\nTherei sa nother kindo ft yp e in Goc al le d aninterface type.A ni nt erface isa n ab strac tty pe.I t\ndo esn’te xp oset he r epresent ation or i nt ernal s tr uctureo fi ts values, o rt he s et o fb asic\n171\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 189,
      "page_label": "171"
    }
  },
  {
    "page_content": "ptg16105617\n172 CHAPTER 7. INTERFACES\nop erat ions the ysupp ort;i tr eveals onlys om e of their met hods. W heny ou haveav alue ofa n\ninterface typ e,y ou k nown ot hinga bout w hati t is;y ou k nowo nlyw hati tc an do,o rm ore\nprecis ely,w hatb eh avior sarep rovide dby its met hods.\nThroughoutt he b ook, we ’ve b eenu singt wo s imi lar fun ctions f or s tr ing f or matting:\nfmt.Printf,w hichw ritest he resultt ot he stand ard out put (aﬁ le), and fmt.Sprintf,w hich\nreturnst he resulta sa string.I tw ou ldb eu nfor tunatei ft he hardp ar t,formatting the result,\nhadt ob ed up lic ated because oft hese sup erﬁci al dif ferences in how the resulti su sed. T hanks\nto int erfaces, itd oesn ot.B ot hof these functions are ,in effe ct, wrappers aro und a thirdf unc-\ntion, fmt.Fprintf,t hati sa gnostica bout whath appens tot he resulti tc omputes:\npackage fmt\nfunc Fprintf(w io.Writer, format string, args ...interface{}) (int, error)\nfunc Printf(format string, args ...interface{}) (int, error) {\nreturn Fprintf(os.Stdout, format, args...)\n}\nfunc Sprintf(format string, args ...interface{}) string {\nvar buf bytes.Buffer\nFprintf(&buf, format, args...)\nreturn buf.String()\n}\nThe F preﬁxo f Fprintf st and s for ﬁle andi ndic ates thatt he f or matte d output s houldb e\nwr itt ent ot he ﬁle provide d as the ﬁrs targument. I nt he Printf case,t he argument, os.Std-\nout,i sa n *os.File.I nt he Sprintfcase,h ow ever, the argumenti sn ot a ﬁle,t houg hit sup er-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 190,
      "page_label": "172"
    }
  },
  {
    "page_content": "out,i sa n *os.File.I nt he Sprintfcase,h ow ever, the argumenti sn ot a ﬁle,t houg hit sup er-\nﬁci ally res embles one: &bufis a point ert oam emor ybuffer tow hichb ytes can bew ritt en.\nThe ﬁrs tparameter of Fprintfis not a ﬁle either.I t’sa n io.Writer,w hichi sa ni nt erface typ e\nwith thef ol low ing declarat ion:\npackage io\n// Writer is the interface that wraps the basic Write method.\ntype Writer interface {\n// Write writes len(p) bytes from p to the underlying data stream.\n// It returns the number of bytes written from p (0 <= n <= len(p))\n// and any error encountered that caused the write to stop early.\n// Write must return a non-nil error if it returns n < len(p).\n// Write must not modify the slice data, even temporarily.\n//\n// Implementations must not retain p.\nWrite(p []byte) (n int, err error)\n}\nThe io.Writer interface deﬁne st he c ontrac t between Fprintf andi ts cal lers. On theo ne\nhand,t he contrac tre quires thatt he cal lerprov ide a value o fac on crete typ e li ke*os.File or\n*bytes.Buffer that has a met hod cal le dWrite with thea ppro priates ig naturea nd beh avior.\nOn the other hand, the contrac t gu arante est hat Fprintf wi l ldo its j ob given anyv alue that\nsatisﬁes t he io.Writer interface. Fprintf mayn ot a ssume t hati ti sw riting t oaﬁle o rt o\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 190,
      "page_label": "172"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.1. INTERFACES AS CONTRACT S1 73\nmemory,o nlyt hati tc an cal lWrite.\nBecaus efmt.Fprintf assumesn ot hinga bout the represent ation of t he value andr elies only\non the beh avior sgu arante e dby the io.Writer cont rac t,we can safelyp assav alue ofa ny con-\ncretet yp e that sat isﬁes io.Writer as t he ﬁrs t argumentt o fmt.Fprintf.T hisf re e dom t o\nsu bst itute one typ efora nother thats at isﬁes the samei nt erface isc al le dsubstitutabi lity,a nd is\nah al lmarko fo bj e ct-oriente dprog ramming.\nLet’st estt hiso ut u singan ew t yp e.T he Write method o ft he *ByteCounter type be low\nmere lyc ountst he bytes writt ent oi tb efored is cardingt hem. (Th ec onversioni sr equired to\nmake the typ esof len(p)and *cmatch int he +=assig nments tatement.)\ngopl.io/ch7/bytecounter\ntype ByteCounter int\nfunc (c *ByteCounter) Write(p []byte) (int, error) {\n*c += ByteCounter(len(p)) // convert int to ByteCounter\nreturn len(p), nil\n}\nSince *ByteCounter satisﬁes the io.Writer cont rac t,we can passi tt o Fprintf,w hichd oes\nitss tr ing f or matting o bliv iou s to t hisc hange;t he ByteCounter correc tly a cc umulates t he\nlengt hof the result.\nvar c ByteCounter\nc.Write([]byte(\"hello\"))\nfmt.Println(c) // \"5\", = len(\"hello\")\nc=0/ /r eset the counter\nvar name = \"Dolly\"\nfmt.Fprintf(&c, \"hello, %s\", name)\nfmt.Println(c) // \"12\", = len(\"hello, Dolly\")\nBesides io.Writer,t here i sa nother in terface o fg re ati mp ortance t ot he fmt package.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 191,
      "page_label": "173"
    }
  },
  {
    "page_content": "fmt.Println(c) // \"12\", = len(\"hello, Dolly\")\nBesides io.Writer,t here i sa nother in terface o fg re ati mp ortance t ot he fmt package.\nFprintf and Fprintln prov ide a way f or typ es to c ontrol how their values ar ep rint ed. I n\nSection2 .5, w ed eﬁne d a String method f or t he Celsius type s ot hatt emperatures wou ld\npr int as \"100°C\",a nd inS ec tion 6.5 wee quip ped *IntSet with a String method sot hats ets\nwouldb er endered usingt radition als et not ation like \"{1 2 3}\".D eclaring a String method\nmakesat yp esatisf yon e of the most widely usedi nt erfaces ofa ll, fmt.Stringer:\npackage fmt\n// The String method is used to print values passed\n// as an operand to any format that accepts a string\n// or to an unformatted printer such as Print.\ntype Stringer interface {\nString() string\n}\nWe’ll explain how the fmtpackaged is cov ers whichv alues sat isf ythis int erface in Sec tion 7.10.\nExercis e 7.1:Usingt he ide asfrom ByteCounter,i mp lementc ount ers for words and for lines.\nYo uwi l lﬁnd bufio.ScanWordsus eful.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 191,
      "page_label": "173"
    }
  },
  {
    "page_content": "ptg16105617\n174 CHAPTER 7. INTERFACES\nExercis e 7.2: Wr ite a f unction CountingWriter with th es ig natureb elow t hat, g iven an\nio.Writer,r etur nsan ew Writer that wraps t he original, and a point ert oa n int64 var iable\nthat at anym om ent containst he numbero fb ytes writt ent ot he new Writer.\nfunc CountingWriter(w io.Writer) (io.Writer, *int64)\nExercis e 7.3: Wr ite a String method f or t he *tree type i n gopl.io/ch4/treesort (§4.4)\nthat reveals the sequence ofv alues in the tre e.\n7.2. I nt erfaceT ypes\nAn int erface typ esp eciﬁes a set ofm et hodst hatac on crete typ emu stp ossess tob ec on sidered\nan inst anceo ft hati nt erface.\nThe io.Writer type iso ne oft he most widely usedi nt erfaces because itp rovides an abstrac-\ntion of all the typ esto whichb ytes can b ew ritt en, whichi ncludes ﬁles, mem or ybuffers, net-\nwork conne ction s,H TTPc lients, archivers, hashers,a nd soo n. The io packaged eﬁnesm any\not her usefuli nt erfaces. A Reader repres ents anyt yp efrom whichy ou can readb ytes, anda\nCloser is any value thaty ou can clos e,s ucha saﬁle o ran et wor kconnec tion.( By now you’ve\nprob ably not ice dthen amingc onvent ion for manyo fG o’ss ingle-met hod int erfaces.)\npackage io\ntype Reader interface {\nRead(p []byte) (n int, err error)\n}\ntype Closer interface {\nClose() error\n}\nLooking far ther, weﬁ nd declarat ions ofn ew int erface typ es as combinat ions ofe xist ing ones.\nHere are two examples:\ntype ReadWriter interface {\nReader\nWriter\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 192,
      "page_label": "174"
    }
  },
  {
    "page_content": "Here are two examples:\ntype ReadWriter interface {\nReader\nWriter\n}\ntype ReadWriteCloser interface {\nReader\nWriter\nCloser\n}\nThes yntaxu seda bove ,whichr es embles str uct emb edding, lets usn amea nother interface as a\nshorthand for writing out all ofi ts met hods. Thi si sc al le dembedding an interface.W ec ou ld\nhave \nwritt en io.ReadWriterwithoute mb edding, alb eit lesss uccinctly,l iket his:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 192,
      "page_label": "174"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.3. INTERFACE SATISFACTION 175\ntype ReadWriter interface {\nRead(p []byte) (n int, err error)\nWrite(p []byte) (n int, err error)\n}\nor evenu singam ixtureo ft he two sty les:\ntype ReadWriter interface {\nRead(p []byte) (n int, err error)\nWriter\n}\nAl lthre ede clarat ions havet he samee ffec t.T he order in whicht he methodsa pp ear isi mma-\nterial.A ll thatm atters ist he set ofm et hods.\nExercis e 7.4: The strings.NewReader func tionr etur nsav alue thats at isﬁes the io.Reader\ninterface (ando thers) byr eadingf ro mitsa rgument, a str ing . Implementas implev ersiono f\nNewReaderyourself,a nd use itt om aket he HTMLp arser( §5.2) tak ei np utf ro mas tr ing .\nExercis e 7.5: The LimitReader func tioni nt he io packagea ccepts an io.Reader r anda\nnumb ero fb ytes n,a nd retur nsa nother Reader that reads fro mr butr ep orts an end -of-ﬁle\ncondit ion after nbytes. I mp lementi t.\nfunc LimitReader(r io.Reader, n int64) io.Reader\n7.3. I nt erfaceS atisfaction\nAt yp esati sﬁes an interface if itp ossess esa ll the methodst he int erface requires. F or example,\nan *os.File satisﬁes io.Reader, Writer, Closer,a nd ReadWriter.A *bytes.Buffer sat-\nisﬁes Reader, Writer,a nd ReadWriter,b ut doesn ot sat isf yCloserbecaus eit doesn ot havea\nClosemethod.A sas horthand,G op rogrammerso ften say thatac on crete typ e‘‘is a’’partic u-\nlari nt erface typ e,m eaningt hati ts at isﬁes the int erface.F or example, a *bytes.Buffer is an\nio.Writer;a n *os.Fileis an io.ReadWriter.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 193,
      "page_label": "175"
    }
  },
  {
    "page_content": "lari nt erface typ e,m eaningt hati ts at isﬁes the int erface.F or example, a *bytes.Buffer is an\nio.Writer;a n *os.Fileis an io.ReadWriter.\nThea ssig nabilit yrule (§2.4.2) f or int erfaces isv er y simple: an exp ressionm ay bea ssig ned to\nan interface only if its typ esatisﬁes the int erface.S o:\nvar w io.Writer\nw=os.Stdout // OK: *os.File has Write method\nw=n ew(bytes.Buffer) // OK: *bytes.Buffer has Write method\nw=t ime.Second // compile error: time.Duration lacks Write method\nvar rwc io.ReadWriteCloser\nrwc = os.Stdout // OK: *os.File has Read, Write, Close methods\nrwc = new(bytes.Buffer) // compile error: *bytes.Buffer lacks Close method\nThisr ulea pp l ies evenw hent he rig ht-hands ide isi ts elf an interface:\nw=r wc // OK: io.ReadWriteCloser has Write method\nrwc = w // compile error: io.Writer lacks Close method\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 193,
      "page_label": "175"
    }
  },
  {
    "page_content": "ptg16105617\n176 CHAPTER 7. INTERFACES\nBecaus eReadWriter and ReadWriteCloser include allt he methodso f Writer,a ny typ ethat\nsatisﬁes ReadWriteror ReadWriteCloserne cessarily sat isﬁesWriter.\nBefore weg of ur ther, wes houlde xplain one subtlet y in whati tm eans for a t yp e to h avea\nmethod.R ecal l from S ec tion 6.2 t hatf or e achn amed c on crete t yp e T,s om e of itsm et hods\nhave a receivero ft yp eTitself where aso thersr equirea *Tpointer. R ecal l also thati ti sl egal to\ncall a *T method ona na rgumento ft yp eT so lon gas the argumenti sava riab le;t he compi ler\nimplicitlyt akes its address. B ut thisi sm eres yntactic sugar :av alue oft yp eT do esnotp ossess\nal lthem et hodst hata *Tpointerd oes, and as a resulti tm ig hts at isf yfe wer interfaces.\nAn e xamplew ill m aket hisc le ar.T he String method o ft he IntSet type f ro mSection6 .5\nre quires a point err eceiver, sow ec annot cal lthat met hod onan on-addressable IntSetvalue:\ntype IntSet struct { /* ... */ }\nfunc (*IntSet) String() string\nvar _ = IntSet{}.String() // compile error: String requires *IntSet receiver\nbutw ec an cal lit on an IntSetvar iable:\nvar s IntSet\nvar _ = s.String() // OK: s is a variable and &s has a String method\nHo wever,s ince only *IntSet hasa String method,o nly *IntSet satisﬁes the fmt.Stringer\ninterface:\nvar _ fmt.Stringer = &s // OK\nvar _ fmt.Stringer = s // compile error: IntSet lacks String method",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 194,
      "page_label": "176"
    }
  },
  {
    "page_content": "interface:\nvar _ fmt.Stringer = &s // OK\nvar _ fmt.Stringer = s // compile error: IntSet lacks String method\nSection1 2.8 in cludes a p rogram t hatp rintst he me thodso fa na rbit rar y value,a nd the\ngodoc -analysis=typeto ol( §10.7.4) di splays the methodso fe acht yp e andt he rel ation ship\nbetweeni nt erfaces andc on crete typ es.\nLike ane nv elope thatw raps andc on ceals the letteri th olds,a ni nt erface wraps an dc on ceals\nthec on crete typ e andv alue thati th olds.O nlyt he methodsr eveale dby the int erface typ emay\nbe cal le d,e ven if the con crete typ ehaso thers:\nos.Stdout.Write([]byte(\"hello\")) // OK: *os.File has Write method\nos.Stdout.Close() // OK: *os.File has Close method\nvar w io.Writer\nw=os.Stdout\nw.Write([]byte(\"hello\")) // OK: io.Writer has Write method\nw.Close() // compile error: io.Writer lacks Close method\nAn i nt erface w it h more met hods, suc ha s io.ReadWriter,t el lsu sm orea bout t he v alues it\ncont ains, andp laces gre aterd emands ont he typ esthat implementi t, thand oesa ni nt erface\nwith fewer met hodss ucha s io.Reader.S ow hatd oest he typ einterface{},w hichh as no\nmethods at all,t el lus about the con crete typ esthat sat isf yit?\nThat’sr ig ht: not hing. T hism ay s eemu seless, b ut i nf ac t thet yp e interface{},w hichi s\ncalled the emptyi nt erface type,i si ndispens able. B ecause the emp tyi nt erface typ e pl aces no\ndemands ont he typ esthat sat isf yit,w ec an assig nany value tot he emp tyi nt erface.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 194,
      "page_label": "176"
    }
  },
  {
    "page_content": "demands ont he typ esthat sat isf yit,w ec an assig nany value tot he emp tyi nt erface.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 194,
      "page_label": "176"
    }
  },
  {
    "page_content": "ptg16105617\nIN\nTERFACE SATISFACTIONSECTION 7.3. 177\nvar any interface{}\nany = true\nany = 12.34\nany = \"hello\"\nany = map[string]int{\"one\": 1}\nany = new(bytes.Buffer)\nAlthough \nitw asn’to bv iou s,w e’ve b eenu singt he e mp tyi nt erface typ e since t he v er y ﬁrs t\nexamplei nt hisb ook, b ecause i ti sw hata llowsf unctions l ike fmt.Println,o r errorf in\nSection5 .7, toa ccepta rgum\nents ofa ny typ e.\nOf cour se,h av ingc re ate d an interface{} value \ncont ainingab oole an, ﬂoat, s tr ing , map,\npointer, ora ny other typ e,w ec an do not hingd irec tly tot he value ith olds since the int erface\nhasn om et hods. W en eed a w ay t og et t he v alue backo ut again. We ’ll see h ow tod ot hat\nusingaty p ea ss ertion in Sec tion 7.10.\nSincei nt erface sat isfac tiond ep ends onlyo nt he methodso ft he two typ es invo l ved, there isn o\nne e dto declare the rel ation shipb et weena c on crete typ e andt he int erfaces its at isﬁes. That\nsaid,i ti so cc asionallyu sefult od ocumenta nd ass ert the rel ation shipw heni ti si nt ended but\nnoto ther wis eenforce dby the program. Th ed eclarat ionb elow ass ertsa tc ompi let imet hata\nvalue oft yp e*bytes.Buffersatisﬁes io.Writer:\n// *bytes.Buffer must satisfy io.Writer\nvar w io.Writer = new(bytes.Buffer)\nWe \nneedn’ta llocatean ew var iable since anyv alue oft yp e*bytes.Buffer wi \nl ldo,e ven nil,\nwhichw\new rite as (*bytes.Buffer)(nil) usinga\nne xplicitc onversion. A nd since wen ever\nintend tor efer to w,w",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 195,
      "page_label": "177"
    }
  },
  {
    "page_content": "l ldo,e ven nil,\nwhichw\new rite as (*bytes.Buffer)(nil) usinga\nne xplicitc onversion. A nd since wen ever\nintend tor efer to w,w\nec an replace itw it htheb lank identiﬁer.T oget her,t hese changesg iveu s\nthis moref rugal variant:\n// *bytes.Buffer must satisfy io.Writer\nvar _ io.Writer = (*bytes.Buffer)(nil)\nNo \nn-empt yinterface typ es such as io.Writer arem osto ften \nsat isﬁed byap oint ert yp e,p ar-\nticularlyw heno ne o rm oreo ft he i nt erface met hodsi mp lies s om e kind o fm ut ation tot he\nre ceiver, ast he Write metho\nd does. A pointert oas tr uct isa ne sp eci ally commonm et hod-\nbear ingt yp e.\nButp oint ert yp es areb yn om eans the onlyt yp es that sat isf y interfaces, ande veni nt erfaces\nwith mut atorm et hodsm ay bes at isﬁed byo ne ofG o’so ther reference typ es. We’ve seene xam-\nples o fs lice typ es with m et hods( geometry.Path,§ 6.1) \nandm ap typ es with m et hods\n(url.Values,§ 6.2.1), \nandl ater we’ll see a f unctiont yp ewith met hods( http.HandlerFunc,\n            §7.7\n). E\nven b\nasic t\nyp es m\nay s\nat isf y in\nterfaces; as w\ne will se\ne in S\nec tion 7.4, t\nime.Duration\nsatisﬁes fmt.Stringer.\nAc on \ncrete typ emays at isf ymany unrel ate dinterfaces. C on sider a program thato rganizes or\nsellsd ig itize dcult ural artifac ts li kem usic, ﬁlms, an db ooks. I tm ig htd eﬁne the f ol low ing set\nof con crete typ es:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 195,
      "page_label": "177"
    }
  },
  {
    "page_content": "of con crete typ es:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 195,
      "page_label": "177"
    }
  },
  {
    "page_content": "ptg16105617\n178 CHAPTER 7. INTERFACES\nAlbum\nBook\nMovie\nMagazine\nPodcast\nTVEpisode\nTrack\nWe can express eacha bstrac tiono fi nt erest asa ni nt erface.S om e prop erties arec ommont oa ll\nar tifac ts,such asat it le, a cre ation date, and a listo fc re ators (author s or artists).\ntype Artifact interface {\nTitle() string\nCreators() []string\nCreated() time.Time\n}\nOt her pro per ties arer estr icted toc er tain typ esof artifac ts. Prop erties oft he print edw orda re\nre levanto nlyt ob ooks andm agazines, where aso nlym ov ies andT Ve pi sodes haveas creen\nresolut ion.\ntype Text interface {\nPages() int\nWords() int\nPageSize() int\n}\ntype Audio interface {\nStream() (io.ReadCloser, error)\nRunningTime() time.Duration\nFormat() string // e.g., \"MP3\", \"WAV\"\n}\ntype Video interface {\nStream() (io.ReadCloser, error)\nRunningTime() time.Duration\nFormat() string // e.g., \"MP4\", \"WMV\"\nResolution() (x, y int)\n}\nThes e interfaces areb ut oneu sefulw ay tog ro upr el ate dconcrete typ estogether ande xpress\nthef acets the y sh are inc ommon. W em ay discov ero ther gro upingsl ater.F or example, ifw e\nﬁnd w en eed toh andle Audio and Video it ems int he samew ay,w ec an deﬁne a Streamer\ninterface tor epresent their common asp ectsw it houtc hang ing any exist ing typ e de clarat ions.\ntype Streamer interface {\nStream() (io.ReadCloser, error)\nRunningTime() time.Duration\nFormat() string\n}\nEach gro uping ofc on crete typ esbasedo nt heir share dbehavior scanb ee xpress eda sa ni nt er-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 196,
      "page_label": "178"
    }
  },
  {
    "page_content": "RunningTime() time.Duration\nFormat() string\n}\nEach gro uping ofc on crete typ esbasedo nt heir share dbehavior scanb ee xpress eda sa ni nt er-\nface typ e.U nlikec lass-b ased l angu ages, in whicht he s et ofi nt erfaces sat isﬁed byac lass i s\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 196,
      "page_label": "178"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.4. PARSING FLAGS WITH FLAG.VALUE1 79\nexplicit, in G ow ec an deﬁne ne wa bstrac tions org ro upingso fi nt erest whenw en eed t hem,\nwithoutm odif yingt he declarat iono ft he con crete typ e.T hisi sp ar tic ularlyu sefulw hent he\nconcrete typ e comesf ro map ackagew ritt enb yad if ferenta ut hor.O fc ours e,thered on eed to\nbe underly ing commonalities in the con crete typ es.\n7.4. Parsing Flags with flag.Value\nIn t hiss ec tion,w e’ll see h ow a nother s tand ard i nt erface, flag.Value,h elps u sd eﬁne ne w\nnotation sforc ommand-line ﬂags. C on sider the program below,w hichs le epsforas peciﬁed\nperiod oft ime.\ngopl.io/ch7/sleep\nvar period = flag.Duration(\"period\", 1*time.Second, \"sleep period\")\nfunc main() {\nflag.Parse()\nfmt.Printf(\"Sleeping for %v...\", *period)\ntime.Sleep(*period)\nfmt.Println()\n}\nBefore itg oest os le epit prints the timep er iod. T he fmt packagec al lst he time.Duration’s\nString method t op rint the p er iodn ot asan umbero fn anos econd s,b ut inau ser-friendly\nnotation:\n$g ob uild gopl.io/ch7/sleep\n$. /sleep\nSleeping for 1s...\nBy defau lt, the sleepp er iodi so ne secon d,b ut it can bec ontrol led through the -period com-\nmand-line ﬂag . The flag.Duration func tionc re atesaﬂag var iableo ft yp etime.Duration\nanda llowst he usert os pecif ythed urat ioni nav ar ietyo fu ser-friendlyf or mats, includingt he\nsame notation printe dby the String method.T hiss ymmetr y of desig n le adst oan ice user\ninterface.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 197,
      "page_label": "179"
    }
  },
  {
    "page_content": "same notation printe dby the String method.T hiss ymmetr y of desig n le adst oan ice user\ninterface.\n$. /sleep -period 50ms\nSleeping for 50ms...\n$./sleep -period 2m30s\nSleeping for 2m30s...\n$./sleep -period 1.5h\nSleeping for 1h30m0s...\n$./sleep -period \"1 day\"\ninvalid value \"1 day\" for flag -period: time: invalid duration 1 day\nBecaus edurat ion-value d ﬂags ares ou seful, thisf eature isb ui lti nt othe flag package, but it’s\neasy tod eﬁne newﬂ ag not ation sforo ur own data typ es. We need onlyd eﬁne a typ ethat sat-\nisﬁes the flag.Valueinterface,w hose declarat ioni sb elow :\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 197,
      "page_label": "179"
    }
  },
  {
    "page_content": "ptg16105617\n180 CHAPTER 7. INTERFACES\npackage flag\n// Value is the interface to the value stored in a flag.\ntype Value interface {\nString() string\nSet(string) error\n}\nThe String method f or mats t he ﬂag’sv alue f or u se i nc ommand-lineh elpm essages; t hu s\never y flag.Value is als o a fmt.Stringer.T he Set method p arsesi ts str ing argumenta nd\nup dates the ﬂag value.I ne ffec t,t he Setmethod ist he inv ers eof the String method,a nd iti s\ngo o dprac tice for themt ou se the samen ot ation.\nLet’sd eﬁne a celsiusFlag type t hata llowsat emperaturet ob es peciﬁed i nC el siu s,o ri n\nFahren heitw it h an ap propriatec onversion. N ot ice t hat celsiusFlag embeds a Celsius\n(§2.5), t here byg etting a Stringmethod for fre e.T os at isf yflag.Value,w en eed onlyd eclare\nthe Setmethod:\ngopl.io/ch7/tempconv\n// *celsiusFlag satisfies the flag.Value interface.\ntype celsiusFlag struct{ Celsius }\nfunc (f *celsiusFlag) Set(s string) error {\nvar unit string\nvar value float64\nfmt.Sscanf(s, \"%f%s\", &value, &unit) // no error check needed\nswitch unit {\ncase \"C\", \"°C\":\nf.Celsius = Celsius(value)\nreturn nil\ncase \"F\", \"°F\":\nf.Celsius = FToC(Fahrenheit(value))\nreturn nil\n}\nreturn fmt.Errorf(\"invalid temperature %q\", s)\n}\nThec al lto fmt.Sscanf pars esaﬂoati ng-p ointn umber( value)a nd a str ing (unit)f ro mthe\ninput s.A lt hough one mustu su allyc he ck Sscanf’se rror result, in thi sc as ewe don’tn eed to\nbecaus eif there was a pro blem, nos witch cas ewi l lmatch.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 198,
      "page_label": "180"
    }
  },
  {
    "page_content": "becaus eif there was a pro blem, nos witch cas ewi l lmatch.\nThe CelsiusFlagfunc tionb elow wraps ita ll up. Tot he cal ler,i tr etur nsap oint ert ot he Cel-\nsius ﬁelde mb edde d within t he celsiusFlag var iable f.T he Celsius ﬁeldi st he v ar iable\nthat will beu pdated byt he Set method dur ing ﬂags pro cessing. T he cal lto Var addst he ﬂag\nto t he a pp lic ation’ss et o fc ommand-line ﬂags, t he g lobalv ar iable flag.CommandLine.\nProg ramsw it hunusuallyc omplex command-linei nt erfaces may haves everal variables oft his\ntype.T he cal lto Var assig nsa *celsiusFlag argumentt oa flag.Value parameter,c ausing\nthec ompi ler toc he ckt hat *celsiusFlaghast he necessary met hods.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 198,
      "page_label": "180"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.5. INTERFACE VALUES 181\n// CelsiusFlag defines a Celsius flag with the specified name,\n// default value, and usage, and returns the address of the flag variable.\n// The flag argument must have a quantity and a unit, e.g., \"100C\".\nfunc CelsiusFlag(name string, value Celsius, usage string) *Celsius {\nf: =c elsiusFlag{value}\nflag.CommandLine.Var(&f, name, usage)\nreturn &f.Celsius\n}\nNo wwe can start usingt he new ﬂag in our programs:\ngopl.io/ch7/tempflag\nvar temp = tempconv.CelsiusFlag(\"temp\", 20.0, \"the temperature\")\nfunc main() {\nflag.Parse()\nfmt.Println(*temp)\n}\nHere’sat ypic alsession:\n$g ob uild gopl.io/ch7/tempflag\n$. /tempflag\n20°C\n$./tempflag -temp -18C\n-18°C\n$./tempflag -temp 212°F\n100°C\n$./tempflag -temp 273.15K\ninvalid value \"273.15K\" for flag -temp: invalid temperature \"273.15K\"\nUsage of ./tempflag:\n-temp value\nthe temperature (default 20°C)\n$. /tempflag -help\nUsage of ./tempflag:\n-temp value\nthe temperature (default 20°C)\nExercis e 7.6:Adds up por tforK elvint emperatures to tempflag.\nExercis e 7.7:Expl ain why the helpm essage contains °C when the defau ltv alue of 20.0 do es\nnot.\n7.5. I nt erfaceV alues\nConceptu ally, a value ofa ni nt erface typ e,o r interface value,h as two components, a co ncrete\ntype and a value oft hatt yp e.T hese are cal le dthei nt erface’s dy namic type and dy namic valu e.\nFo ras taticallyt yp edl angu agel ikeG o, typ es areac ompi le-t imec on cept, soat yp e is not a",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 199,
      "page_label": "181"
    }
  },
  {
    "page_content": "Fo ras taticallyt yp edl angu agel ikeG o, typ es areac ompi le-t imec on cept, soat yp e is not a\nvalue.I no ur co nceptu alm odel,as et o fv alues cal le dty ped es cript o rs prov ide inf or mat ion\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 199,
      "page_label": "181"
    }
  },
  {
    "page_content": "ptg16105617\n182 CHAPTER 7. INTERFACES\nab out eacht yp e,s ucha si ts namea nd methods. I na ni nt erface value,t he typ e comp onent is\nrepres ente dby the appro priatet yp e des crip tor.\nIn the fours tatementsb elow,t he var iable w takeso nt hree d if ferentv alues. (Thei nitial and\nﬁnalv alues aret he same.)\nvar w io.Writer\nw=o s.Stdout\nw=n ew(bytes.Buffer)\nw=n il\nLet’st akeac los er lo oka tt he value andd ynamic beh avior of w af ter eachs tatement.T he ﬁrs t\nst atement declares w:\nvar w io.Writer\nIn Go, var iables area lways initialize dto a wel l-deﬁne dvalue,a nd int erfaces aren oe xception.\nThez erov alue for ani nt erface has bot hitst yp e andv alue comp onentss et to nil (Figure7 .1).\nFigure 7.1. An il int erface value.\nAn i nt erface value i sd es crib eda sn il o rn on-ni l basedo ni ts d ynamic typ e,s ot hisi san il\ninterface value .Y ou c an tes tw hether an in terface value i sn il u sing w= =nil or w! =nil.\nCallinga ny met hod ofan il int erface value causesap anic:\nw.Write([]byte(\"hello\")) // panic: nil pointer dereference\nThes econ dst atement assig nsav alue oft yp e*os.Fileto w:\nw=o s.Stdout\nThisa ssig nmenti nv olves an implicitc onversionf ro mac on crete typ eto ani nt erface typ e,a nd\nis e quivalentt ot he e xplicitc onversion io.Writer(os.Stdout).A conv ersiono ft hisk ind,\nwhet her explicito ri mp licit, cap turest he t yp e andt he v alue o fi ts o perand. T he i nt erface",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 200,
      "page_label": "182"
    }
  },
  {
    "page_content": "whet her explicito ri mp licit, cap turest he t yp e andt he v alue o fi ts o perand. T he i nt erface\nvalue’sd ynamic typ e is s et t ot he t yp e des crip tor for t he p oint ert yp e *os.File,a nd i ts\ndy namic value h olds a c opyo f os.Stdout,w hichi sapo intert ot he os.File var iable rep-\nresent ing the stand ard out put of the pro cess( Figure7 .2).\nFigure 7.2. An int erface value cont aininga n *os.Filepointer.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 200,
      "page_label": "182"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.5. INTERFACE VALUES 183\nCallingt he Write method ona ni nt erface value co nt aininga n *os.File pointerc ausest he\n(*os.File).Writemethod tob ec al le d.T he cal lpr ints \"hello\".\nw.Write([]byte(\"hello\")) // \"hello\"\nIn general,w ec annot know at compi let imew hatt he dynamic typ e of ani nt erface value w ill\nbe,s oa c al lthro ugh ani nt erface mustu se dy namic dispatch.I ns teado fad irec tcall,t he com-\npi ler m ustg eneratec odet oo bt ain t he a ddresso ft he me thod n amed Write from t he t yp e\ndes crip tor,t henm akea ni ndirec tcall tot hata ddress. Th er eceivera rgumentf or the cal lis a\ncopy oft he i nt erface’sd ynamic value, os.Stdout.T he e ffec t is a si fw eh ad made thi sc al l\ndirec tly :\nos.Stdout.Write([]byte(\"hello\")) // \"hello\"\nThet hirds tatement assig nsav alue oft yp e*bytes.Bufferto the int erface value:\nw=n ew(bytes.Buffer)\nThed ynamic typ e is n ow *bytes.Buffer andt he d ynamic value i sap oint ert ot he ne wly\nal locate dbuffer (Figure7 .3).\nFigure 7.3. An int erface value cont aininga *bytes.Bufferpointer.\nAc al lto the Writemethod usest he samem echanism as before:\nw.Write([]byte(\"hello\")) // writes \"hello\" to the bytes.Buffer\nThist ime, the typ e des crip tor is *bytes.Buffer,s ot he (*bytes.Buffer).Write method is\ncalled,w it hthea ddresso ft he buf fer as the value oft he receiverp arameter.T he cal l append s\n\"hello\"to the buf fer.\nFinal ly, the fourths tatement assig nsnilto the int erface value:\nw=n il",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 201,
      "page_label": "183"
    }
  },
  {
    "page_content": "\"hello\"to the buf fer.\nFinal ly, the fourths tatement assig nsnilto the int erface value:\nw=n il\nThisr es etsboth its comp onentst o nil,r estoring w to the sames tate asw heni tw as decl are d,\nwhichw as shown inF igure7 .1.\nAn i nt erface value can h olda rbit rar ily l arge d ynamic values. F or e xample, t he time.Time\ntype,w hichr epresentsa ni ns tanti nt ime, isas tr uct typ ewith several unexp orted ﬁelds.I fw e\ncreate ani nt erface value fro mit,\nvar x interface{} = time.Now()\nther esultm ig htl ookl ikeF igure7 .4. C on ceptu ally, the dynamic value always ﬁts inside t he\ninterface value ,n om atterh ow l arge i ts typ e.( Thisi so nlyac on ceptu alm odel;ar ealist ic\nimplementation isq uite dif ferent.)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 201,
      "page_label": "183"
    }
  },
  {
    "page_content": "ptg16105617\n184 CHAPTER 7. INTERFACES\nFigure 7.4. An int erface value holdinga time.Timest ruc t.\nInterface values may bec ompare dusing == and !=.T wo int erface values aree qu ali fb ot hare\nni l,o ri ft heir dynamic typ es arei denticala nd their dynamic values aree qu ala ccordingt ot he\nusualb eh avior of == fort hatt yp e.B ecause int erface values arec omparable,t he ymayb eu sed\nas the keyso fam ap or as the operando fas witch statement.\nHo wever,i ft wo int erface values arec ompare dandh avet he samed ynamic typ e,b ut thatt yp e\nis not comparable (a slice,f or ins tance), thent he comparisonf ai lsw it hap anic:\nvar x interface{} = []int{1, 2, 3}\nfmt.Println(x == x) // panic: comparing uncomparable type []int\nIn t hisr espect,i nt erface typ es ar eu nu sual. O ther typ es ar ee it her saf elyc omparable (li ke\nbasic typ es andp oint ers)o rn ot comparable at all( li kes lices, maps, andf unctions), but when\ncomp aring int erface values ora ggregatet yp esthat cont ain interface values, wem ustb ea ware\nof the pot ent ial for a panic. A simi lar r iske xistsw henu singi nt erfaces as map k eyso rs witch\nop erands.O nlyc ompare int erface values if y ou are cer tain thatt he ycont ain dynamic values\nof comparable typ es.\nWh enh andlinge rror s,o rd ur ingd ebug ging, iti so ften helpf ult or ep ort the dynamic typ e of\nan interface value.F or that, weu se the fmtpackage’s %Tverb:\nvar w io.Writer\nfmt.Printf(\"%T\\n\", w) // \"<nil>\"\nw=o s.Stdout",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 202,
      "page_label": "184"
    }
  },
  {
    "page_content": "an interface value.F or that, weu se the fmtpackage’s %Tverb:\nvar w io.Writer\nfmt.Printf(\"%T\\n\", w) // \"<nil>\"\nw=o s.Stdout\nfmt.Printf(\"%T\\n\", w) // \"*os.File\"\nw=new(bytes.Buffer)\nfmt.Printf(\"%T\\n\", w) // \"*bytes.Buffer\"\nInternal ly, fmt us esr eﬂec tion too bt ain the nameo ft he int erface’sd ynamic typ e.W e’ll looka t\nreﬂec tion inC hapt er1 2.\n7.5.1. Caveat: An I nt erfaceC ontaining a Nil PointerI sN on-Nil\nAn il int erface value ,w hichc ontainsn ov alue at all, isn ot the samea sa ni nt erface value con-\ntainingap oint ert hath appens tob en il.T hiss ubtled istinc tionc re atesat rap into whiche very\nGo programmer has stumb led.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 202,
      "page_label": "184"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.5. INTERFACE VALUES 185\nConsider the program below.W it hdebugsett o true,t he main functionc ol lec tst he out put of\nthef unction fin a bytes.Buffer.\nconst debug = true\nfunc main() {\nvar buf *bytes.Buffer\nif debug {\nbuf = new(bytes.Buffer) // enable collection of output\n}\nf(buf) // NOTE: subtly incorrect!\nif debug {\n// ...use buf...\n}\n}\n// If out is non-nil, output will be written to it.\nfunc f(out io.Writer) {\n// ...do something...\nif out != nil {\nout.Write([]byte(\"done!\\n\"))\n}\n}\nWe mig hte xp ect thatc hang ingdebug to false wouldd is ablet he col lec tion of the out put,b ut\nin facti tc ausest he program top anic dur ingt he out.Writecall:\nif out != nil {\nout.Write([]byte(\"done!\\n\")) // panic: nil pointer dereference\n}\nWh en maincalls f,i ta ssig nsan il point ero ft yp e*bytes.Buffer to the outparameter,s ot he\ndy namic value of out is nil.H ow ever, its dynamic typ eis *bytes.Buffer,m eaningt hat out\nis a non -ni l interface co nt ainingan il p oint erv alue (Figur e7 .5), s ot he d efensive c he ck\nout != nilis still true.\nFigure 7.5. An on-ni l interface cont ainingan il point er.\nAs before, the dynamic disp atch mechanism deter mines that (*bytes.Buffer).Write mu st\nbe cal le dbutt hist imew it har eceiverv alue thati sn il.F or som etypes, sucha s *os.File, nil\nis a valid receiver( §6.2.1), b ut *bytes.Buffer is not among them. Th em et hod isc al le d,b ut\nit panics as itt ries toa ccesst he buf fer.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 203,
      "page_label": "185"
    }
  },
  {
    "page_content": "is a valid receiver( §6.2.1), b ut *bytes.Buffer is not among them. Th em et hod isc al le d,b ut\nit panics as itt ries toa ccesst he buf fer.\nThep ro blem ist hata lt hough a nil *bytes.Buffer pointerh as the methodsn eeded tos at isf y\nthei nt erface,i td oesn’ts at isf ythe behavioral re quirements oft he int erface.I np ar tic ular, the\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 203,
      "page_label": "185"
    }
  },
  {
    "page_content": "ptg16105617\n186 CHAPTER 7. INTERFACES\ncall violatest he imp licitp re con dit ion of(*bytes.Buffer).Write that its r eceiveri sn ot nil,\nso assig ningt he nil point ert ot he int erface was a mi st ake . Thes olut ion ist oc hange the typ e\nof buf in main to io.Writer,t here bya voidingt he assig nmento ft he dysf unctionalv alue to\nthei nt erface in the ﬁrs tpl ace:\nvar buf io.Writer\nif debug {\nbuf = new(bytes.Buffer) // enable collection of output\n}\nf(buf) // OK\nNo w that we ’ve c ov ere d them echanics o fi nt erface values, let ’st akeal ook at s om e more\nimportanti nt erfaces fro mGo’ss tand ard librar y.I nt he next three sec tion s,w e’ll see how int er-\nfaces areu sedf or sor ting, web ser ving, and error handling.\n7.6. Sorting with sort.Interface\nLike str ing for matting ,sortingi saf re quentlyu sedo perat ioni nm anyp rograms. A lt hough a\nminimal Quicks ort can bew ritt eni na bout 15l ines, a robusti mp lementation ism uchl on g er,\nandi ti sn ot the kindo fc odew es houldw isht ow rite ane wor copye acht imew en eed it.\nFo rtunate ly, t he sort packagep rovides in-p lace s or tingo fa ny s equence acco rdingt oa ny\norder ingf unction. Its desig ni sr at her unusual. I nm anyl angu ages, the sor tinga lgor it hmi s\nasso ciate dwith thes equence dat atype,w hi letheo rder ingf unctioni sa ss oci ated wit hthet yp e\nof the elements. B yc ontrast, Go’s sort.Sort func tiona ssumesn ot hinga bout the represen-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 204,
      "page_label": "186"
    }
  },
  {
    "page_content": "of the elements. B yc ontrast, Go’s sort.Sort func tiona ssumesn ot hinga bout the represen-\ntation of eit her the sequence ori ts elements. I ns tead, itu sesa ni nt erface, sort.Interface,t o\nsp ecif ythec ontrac tbetweent he g ener icsort algor it hma nd eachs equence typ e that may be\nsorted.A ni mp lementation of t hisi nt erface deter mines bot h thec on crete represent ation of\nthes equence,w hichi so ften a slice,a nd the desired order ingo fi ts elements.\nAn in-place sor talgor it hmn eedst hree things—th el engt hof the sequence,am eans ofc om-\nparing two e lements, an daw ay t os wap t wo e lements—so t he y aret he t hree m et hodso f\nsort.Interface:\npackage sort\ntype Interface interface {\nLen() int\nLess(i, j int) bool // i, j are indices of sequence elements\nSwap(i, j int)\n}\nTo sor t anys equence,w en eed t od eﬁne a t yp e that im plements t hese t hree m et hods, t hen\napply sort.Sort to a ni ns tance o ft hatt yp e.A sp erhaps t he s impleste xample, c on sider\nsortingas lice ofs tr ings. Th en ew typ eStringSlice andi ts Len, Less,a nd Swapmethodsa re\nshown below.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 204,
      "page_label": "186"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.6. SORTING WITH SOR T.INTERFACE 187\ntype StringSlice []string\nfunc (p StringSlice) Len() int {r eturn len(p) }\nfunc (p StringSlice) Less(i, j int) bool { return p[i] < p[j] }\nfunc (p StringSlice) Swap(i, j int) {p [i], p[j] = p[j], p[i] }\nNo wwe can sor tas lice ofs tr ings, names,b yc onvertingt he slice toa StringSliceli ket his:\nsort.Sort(StringSlice(names))\nThec onversiony ieldsas lice value w it h thes amel engt h, capacity,a nd under ly ing a rray as\nnamesbutw it hat yp ethat has the three met hodsr equired for sor ting.\nSortingas lice ofs tr ingsi ss oc ommont hatt he sort packagep rovides the StringSlice type,\nas w el l as a fun ctionc al le d Strings so t hatt he c al l ab ove c an b es impliﬁed t o\nsort.Strings(names).\nThet echnique herei se asi lya dapt edt oo ther sor t orders, for ins tance,t oi gnorec apit alizat ion\nor s peci al ch arac ters. (Th eG op rogram t hats or tsi ndex ter msa nd p agen umbers f or t his\nbookd oest his, wit hext ra log icforR om ann umerals.) F or morec omplic ated sor ting, weu se\nthes amei de a, butw it h more c omplic ated d at a st ruc tures orm orec omplic ated i mp lemen-\ntation s of the sort.Interfacemethods.\nOurr unninge xamplef or sor tingw ill beam usic playlist, displaye das a table.E acht racki sa\nsingler ow,a nd eachc olumn isa na tt ribut e of thatt rack, like artist, tit le, and runningt ime.\nIm agine thatag raphic alus eri nt erface presentst he table,a nd thatc licking the head ofac ol-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 205,
      "page_label": "187"
    }
  },
  {
    "page_content": "Im agine thatag raphic alus eri nt erface presentst he table,a nd thatc licking the head ofac ol-\numn causest he playlistt ob es or ted byt hata tt ribut e;c licking the s amec olumn heada gain\nre versest he order.L et’sl ook at whatm ig hth appen in respons eto eachc lic k.\nThev ar iabletracks belowc ontainsap laylist. (On eo ft he aut hor sap olog izesfort he other\nauthor’sm usic al tastes.) Eac he lementi si ndirec t,ap oint ert oa Track.A lt hough t he c ode\nbeloww ou ldw or kif wes tore dthe Tracksd irec tly,t he sor tfunc tionw ill swap manyp airso f\nelements, s oi tw ill r un fas teri fe ache lementi sap oint er, whichi sas inglem achinew ord,\ninstead of an ent ire Track,w hichm ig htb ee ig htw ords orm ore.\ngopl.io/ch7/sorting\ntype Track struct {\nTitle string\nArtist string\nAlbum string\nYear int\nLength time.Duration\n}\nvar tracks = []*Track{\n{\"Go\", \"Delilah\", \"From the Roots Up\", 2012, length(\"3m38s\")},\n{\"Go\", \"Moby\", \"Moby\", 1992, length(\"3m37s\")},\n{\"Go Ahead\", \"Alicia Keys\", \"As I Am\", 2007, length(\"4m36s\")},\n{\"Ready 2 Go\", \"Martin Solveig\", \"Smash\", 2011, length(\"4m24s\")},\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 205,
      "page_label": "187"
    }
  },
  {
    "page_content": "ptg16105617\n188 CHAPTER 7. INTERFACES\nfunc length(s string) time.Duration {\nd, err := time.ParseDuration(s)\nif err != nil {\npanic(s)\n}\nreturn d\n}\nThe printTracks func tionp rintst he playlist as a table .A graphic al displayw ou ldb en icer,\nbutt hisl it tle routine usest he text/tabwriter packaget op ro duce a table whose columnsa re\nne atlya lig ned a nd p adde d as s hown b elow.O bs erve t hat *tabwriter.Writer satisﬁes\nio.Writer.I tc ol lec tse achp ie ceof dat awr itt ent oi t; its Flush method for mats the ent ire ta-\nblea nd writesi tt o os.Stdout.\nfunc printTracks(tracks []*Track) {\nconst format = \"%v\\t%v\\t%v\\t%v\\t%v\\t\\n\"\ntw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2,'' ,0 )\nfmt.Fprintf(tw, format, \"Title\", \"Artist\", \"Album\", \"Year\", \"Length\")\nfmt.Fprintf(tw, format, \"-----\", \"------\", \"-----\", \"----\", \"------\")\nfor _, t := range tracks {\nfmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)\n}\ntw.Flush() // calculate column widths and print table\n}\nTo sor t thep laylistb yt he Artist ﬁeld, w ed eﬁne a ne ws lice typ e with th en ecessary Len,\nLess,a nd Swapmethods, analogou sto whatw ed id for StringSlice.\ntype byArtist []*Track\nfunc (x byArtist) Len() int {r eturn len(x) }\nfunc (x byArtist) Less(i, j int) bool { return x[i].Artist < x[j].Artist }\nfunc (x byArtist) Swap(i, j int) {x [i], x[j] = x[j], x[i] }\nTo cal ltheg ener icsort routine,w em ustﬁ rs tconv ert tracks to the newt yp e,byArtist,t hat\ndeﬁnest he order :",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 206,
      "page_label": "188"
    }
  },
  {
    "page_content": "To cal ltheg ener icsort routine,w em ustﬁ rs tconv ert tracks to the newt yp e,byArtist,t hat\ndeﬁnest he order :\nsort.Sort(byArtist(tracks))\nAf ter sor tingt he slice bya rtist, the out put fro mprintTracksis\nTitle Artist Album Year Length\n----- ------ ----- ---- ------\nGo Ahead Alicia Keys As I Am 2007 4m36s\nGo Delilah From the Roots Up 2012 3m38s\nReady 2 Go Martin Solveig Smash 2011 4m24s\nGo Moby Moby 1992 3m37s\nIf the userr equests ‘‘sort bya rtist’’as econ dtime,w e’ll sor tthet racks in r everse.W en eedn’t\ndeﬁne a ne wt yp ebyReverseArtist with ani nv erted Less method,h ow ever, since the sort\npackagep rovides a Reversefunc tiont hatt ransfor msa ny sor t order toi ts invers e.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 206,
      "page_label": "188"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.6. SORTING WITH SOR T.INTERFACE 189\nsort.Sort(sort.Reverse(byArtist(tracks)))\nAf ter reverse-s ortingt he slice bya rtist, the out put fro mprintTracksis\nTitle Artist Album Year Length\n----- ------ ----- ---- ------\nGo Moby Moby 1992 3m37s\nReady 2 Go Martin Solveig Smash 2011 4m24s\nGo Delilah From the Roots Up 2012 3m38s\nGo Ahead Alicia Keys As I Am 2007 4m36s\nThe sort.Reverse func tiond es ervesac los er lo oks ince itu sesc omposition (§6.3), whic hi s\nan importanti de a. The sort packaged eﬁnesa nu nexp orted typ ereverse,w hichi sas tr uct\nthat embeds a sort.Interface.T he Less method for reverse callst he Less method oft he\nembedde dsort.Interface value,b ut wit hthei ndices ﬂip ped,r eversingt he order oft he sor t\nresu lts.\npackage sort\ntype reverse struct{ Interface } // that is, sort.Interface\nfunc (r reverse) Less(i, j int) bool { return r.Interface.Less(j, i) }\nfunc Reverse(data Interface) Interface { return reverse{data} }\nLen and Swap,t he o ther t wo m et hodso f reverse,a re i mp licitlyp rovide d by t he o riginal\nsort.Interface value b ecause i ti sa ne mb edde d ﬁeld. T he e xp orted f unction Reverse\nreturns an ins tance oft he reversetype thatc ontainst he original sort.Interfacevalue.\nTo sor tby a dif ferentc olumn, wem ustd eﬁne a newt yp e,s ucha s byYear:\ntype byYear []*Track\nfunc (x byYear) Len() int{r eturn len(x) }\nfunc (x byYear) Less(i, j int) bool { return x[i].Year < x[j].Year }",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 207,
      "page_label": "189"
    }
  },
  {
    "page_content": "type byYear []*Track\nfunc (x byYear) Len() int{r eturn len(x) }\nfunc (x byYear) Less(i, j int) bool { return x[i].Year < x[j].Year }\nfunc (x byYear) Swap(i, j int) {x [i], x[j] = x[j], x[i] }\nAf ter s or ting tracks by y earu sing sort.Sort(byYear(tracks)), printTracks shows a\nchro nolog ical list ing:\nTitle Artist Album Year Length\n----- ------ ----- ---- ------\nGo Moby Moby 1992 3m37s\nGo Ahead Alicia Keys As I Am 2007 4m36s\nReady 2 Go Martin Solveig Smash 2011 4m24s\nGo Delilah From the Roots Up 2012 3m38s\nFo rever y slice elementt yp e ande very o rder ingf unctionw en eed,w ed eclare a n ew i mp le-\nment ation of sort.Interface.A sy ou can see,t he Lenand Swapmethodsh avei denticald ef-\ninition sfora ll slice typ es. In the next example, the con crete typ ecustomSortcombines a slice\nwith a fu nc tion, letting usd eﬁne a ne ws or t order byw riting onlyt he comparisonf unction.\nIn cidentally, the con crete typ es that implement sort.Interface aren ot a lways slices; cus-\ntomSortis a str uct typ e.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 207,
      "page_label": "189"
    }
  },
  {
    "page_content": "ptg16105617\n190 CHAPTER 7. INTERFACES\ntype customSort struct {\nt[ ]*Track\nless func(x, y *Track) bool\n}\nfunc (x customSort) Len() int {r eturn len(x.t) }\nfunc (x customSort) Less(i, j int) bool { return x.less(x.t[i], x.t[j]) }\nfunc (x customSort) Swap(i, j int) {x .t[i], x.t[j] = x.t[j], x.t[i] }\nLet’sd eﬁne a m ulti-t ier order ingf unctionw hose p rimary s or t ke y is t he Title,w hose\nsecond ary key ist he Year,a nd whose ter tiary key ist he runningt ime, Length.H ere’st he cal l\nto Sortusing an anony mou sorder ingf unction:\nsort.Sort(customSort{tracks, func(x, y *Track) bool {\nif x.Title != y.Title {\nreturn x.Title < y.Title\n}\nif x.Year != y.Year {\nreturn x.Year < y.Year\n}\nif x.Length != y.Length {\nreturn x.Length < y.Length\n}\nreturn false\n}})\nAndh ere’st he result. N ot ice thatt he tie bet weent he two tracks tit led ‘‘Go’’is bro ken in favor\nof the older one.\nTitle Artist Album Year Length\n----- ------ ----- ---- ------\nGo Moby Moby 1992 3m37s\nGo Delilah From the Roots Up 2012 3m38s\nGo Ahead Alicia Keys As I Am2007 4m36s\nReady 2 Go Martin Solveig Smash 2011 4m24s\nAlthough s or tingas equence ofl engt hn re quires O(n log n)c omparisono perat ions,t esting\nwhet her a sequence isa lready sor ted requires at most n−1c omparisons.T he IsSorted func-\ntion fro mthe sort packagec he cks thisf or us. L ike sort.Sort,i ta bstrac tsboth thes equence\nandi ts o rder ingf unctionu sing sort.Interface,b ut it n ever cal lst he Swap method:T his",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 208,
      "page_label": "190"
    }
  },
  {
    "page_content": "andi ts o rder ingf unctionu sing sort.Interface,b ut it n ever cal lst he Swap method:T his\nco de demon strates the IntsAreSortedand Intsfunc tions and the IntSlicetype:\nvalues := []int{3, 1, 4, 1}\nfmt.Println(sort.IntsAreSorted(values)) // \"false\"\nsort.Ints(values)\nfmt.Println(values) // \"[1 1 3 4]\"\nfmt.Println(sort.IntsAreSorted(values)) // \"true\"\nsort.Sort(sort.Reverse(sort.IntSlice(values)))\nfmt.Println(values) // \"[4 3 1 1]\"\nfmt.Println(sort.IntsAreSorted(values)) // \"false\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 208,
      "page_label": "190"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.7. THE HTTP.HANDLER INTERFACE 191\nFo rconv enience,t he sort packagep rovides versions ofi ts functions and typ essp eci alizedf or\n[]int, []string,a nd []float64 usingt heir natural o rder ings. F or o ther typ es, such a s\n[]int64or []uint,w e’re ono ur own,t houg hthep at his short.\nExercis e 7.8: Many GUIsp rovide a table widget w it h as tatefulm ulti-t ier sort:t he p rimary\nsort key ist he most recentlyc licke dcolumn head, the secon dar ysort key ist he secon d-most\nre centlyc licke dcolumn head, and soo n. Deﬁne a ni mp lementation of sort.Interface for\nus eby suchat able.C ompare thata ppro ach wit hrepeated sor tingu sing sort.Stable.\nExercis e 7.9:Us ethe html/template package( §4.6) t or eplace printTracks with a fu nc tion\nthat displays the tracks as an HTML table.U se the solut ion tot he pre vious exercis eto arrange\nthat eachc licko nac olumn headm akes an HTTP requestt os or tthet able.\nExercis e 7.10: The sort.Interface type c an b ea dapt edt oo ther u ses. W rite a f unction\nIsPalindrome(s sort.Interface) boolthat rep ortsw hether t he s equence s is a p alin-\ndrom e,i no ther words,r eversingt he sequence wou ldn ot change it. A ssume thatt he elements\nat indices iand jaree qu ali f !s.Less(i, j) && !s.Less(j, i).\n7.7. The http.HandlerInt erface\nIn Chapt er1 ,w es aw a glimps eof how tou se the net/http packaget oi mp lementw eb clients",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 209,
      "page_label": "191"
    }
  },
  {
    "page_content": "7.7. The http.HandlerInt erface\nIn Chapt er1 ,w es aw a glimps eof how tou se the net/http packaget oi mp lementw eb clients\n(§1.5) an ds er vers( §1.7). I nt hiss ec tion,w e’ll l ookm orec los ely a tt he s er ver API, whose\nfoundation ist he http.Handlerinterface:\nnet/http\npackage http\ntype Handler interface {\nServeHTTP(w ResponseWriter, r *Request)\n}\nfunc ListenAndServe(address string, h Handler) error\nThe ListenAndServe func tionr equires a ser ver address, sucha s \"localhost:8000\",a nd an\ninst anceo ft he Handler interface tow hicha ll requests shouldb ed ispatch ed. Itr unsf orever,\nor unt i lthes er ver fails (or fai lst os tart)w it han erro r,a lways non-ni l,w hichi tr etur ns.\nIm agine ane -commerce site wit had at abas emappingt he items for sale tot heir prices in dol-\nlars.T he program below shows the simplesti maginablei mp lementation.I tm odel sthei nv en-\ntory asam ap typ e,database,t ow hichw e’ve att ach eda ServeHTTP method sot hati ts at isﬁes\nthe http.Handlerinterface.T he handler rangeso vert he map andp rintst he items.\ngopl.io/ch7/http1\nfunc main() {\ndb := database{\"shoes\": 50, \"socks\": 5}\nlog.Fatal(http.ListenAndServe(\"localhost:8000\", db))\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 209,
      "page_label": "191"
    }
  },
  {
    "page_content": "ptg16105617\n192 CHAPTER 7. INTERFACES\ntype dollars float32\nfunc (d dollars) String() string { return fmt.Sprintf(\"$%.2f\", d) }\ntype database map[string]dollars\nfunc (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {\nfor item, price := range db {\nfmt.Fprintf(w, \"%s: %s\\n\", item, price)\n}\n}\nIf wes tart the ser ver,\n$g ob uild gopl.io/ch7/http1\n$. /http1 &\nthen connec tto itw it hthe fetch prog ramfrom Sec tion 1.5 (oraw eb brows er if you prefer),\nwe gett he fol low ing out put:\n$g ob uild gopl.io/ch1/fetch\n$. /fetch http://localhost:8000\nshoes: $50.00\nsocks: $5.00\nSo far,t he ser ver can onlyl isti ts entire inv ent ory and will dot hisf or every request, regardless\nof URL. A more realist ics er ver deﬁnesm ultipled if ferentU RLs, eac ht rigger ingad if ferent\nbehavior.L et’sc al lthee xist ing one /list anda dd anot her one cal le d/price that rep ortst he\npr ice ofas inglei tem, speciﬁed asar equestp arameter like /price?item=socks.\ngopl.io/ch7/http2\nfunc (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {\nswitch req.URL.Path {\ncase \"/list\":\nfor item, price := range db {\nfmt.Fprintf(w, \"%s: %s\\n\", item, price)\n}\ncase \"/price\":\nitem := req.URL.Query().Get(\"item\")\nprice, ok := db[item]\nif !ok {\nw.WriteHeader(http.StatusNotFound) // 404\nfmt.Fprintf(w, \"no such item: %q\\n\", item)\nreturn\n}\nfmt.Fprintf(w, \"%s\\n\", price)\ndefault:\nw.WriteHeader(http.StatusNotFound) // 404\nfmt.Fprintf(w, \"no such page: %s\\n\", req.URL)\n}\n}\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 210,
      "page_label": "192"
    }
  },
  {
    "page_content": "default:\nw.WriteHeader(http.StatusNotFound) // 404\nfmt.Fprintf(w, \"no such page: %s\\n\", req.URL)\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 210,
      "page_label": "192"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.7. THE HTTP.HANDLER INTERFACE 193\nNo wtheh andler decides w hatl og ic to e xe cut e basedo nt he p at h comp onent o ft he U RL,\nreq.URL.Path.I ft he h andler doesn’tr ecog nize thep at h, it r ep ortsa nH TTPe rror t ot he\nclientb yc al ling w.WriteHeader(http.StatusNotFound);t hism ustb ed on ebefore writing\nanyt ext to w.( In cidentally, http.ResponseWriter is a nother in terface.I ta ug ments\nio.Writer with m et hodsf or s endingH TTPr espons e he aders.) E quivalently, wec ou ldu se\nthe http.Errorut i lit yfunc tion:\nmsg := fmt.Sprintf(\"no such page: %s\\n\", req.URL)\nhttp.Error(w, msg, http.StatusNotFound) // 404\nThec as efor /price callst he URL’s Query method top arse the HTTPr equestp arametersa sa\nmap, orm orep re cis ely,am ultimapo ft yp eurl.Values(§6.2.1) f ro mthe net/urlpackage. I t\nthen ﬁnd s theﬁ rs titem parameter andl ooks upi ts price.I ft he itemw asn’tf ound,i tr ep orts\nan erro r.\nHere’s an examples essionw it hthen ew server :\n$g ob uild gopl.io/ch7/http2\n$g ob uild gopl.io/ch1/fetch\n$. /http2 &\n$. /fetch http://localhost:8000/list\nshoes: $50.00\nsocks: $5.00\n$./fetch http://localhost:8000/price?item=socks\n$5.00\n$./fetch http://localhost:8000/price?item=shoes\n$50.00\n$./fetch http://localhost:8000/price?item=hat\nno such item: \"hat\"\n$./fetch http://localhost:8000/help\nno such page: /help\nObviou sly wec ou ldk eepa ddingc as es to ServeHTTP,b ut inar ealist ica pp lic ation, it’sc on-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 211,
      "page_label": "193"
    }
  },
  {
    "page_content": "no such page: /help\nObviou sly wec ou ldk eepa ddingc as es to ServeHTTP,b ut inar ealist ica pp lic ation, it’sc on-\nvenientt od eﬁne the l og ic fore achc as e in a sep arat ef unctiono rm et hod.F ur thermore,\nre lated U RLs may n eed s imi lar logic; s everal image ﬁles may hav eU RLs o ft he f or m\n/images/*.png,f or i ns tance.F or t hese r easons, net/http prov ides ServeMux,are q uest\nmu ltipl exer,t os implif ythea ss oci ationb et weenU RLs andh andlers. A ServeMux ag gregates a\ncollec tion of http.Handlersi nt oas ingle http.Handler.A gain, wes ee thatd if ferentt yp es\nsatisf yingt he s amei nt erface are substitutabl e :t he w eb s er ver can di sp atch r equests t oa ny\nhttp.Handler,r egardlesso fw hichc on crete typ eis behindi t.\nFo r am orec omplex ap plic ation, several ServeMuxes may b ec omposedt oh andlem ore\nintr icate dispatchingr equirements. G od oesn’th aveac anonic alwe bframewor kanalogou sto\nRu by’sR ai lso rP yt hon’sD jango.T hisi sn ot tos ay thats uchf ramewor ksd on’te xist,b ut the\nbuildingb lo cks in Go ’ss tand ard l ibrar y are ﬂexi blee noug h that fram ewor ksa re o ften\nunnecessary.F ur thermore, a lt hough f ramewor ksa re c onvenienti nt he e arly ph as es of a\nproj e ct, their addition alc omplexity canm akel on g er-term maintenanceh arder.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 211,
      "page_label": "193"
    }
  },
  {
    "page_content": "ptg16105617\n194 CHAPTER 7. INTERFACES\nIn the program b elow,w ec re ate a ServeMux andu se itt oa ss oci atet he URLs w it hthec or-\nresp ondingh andlersf or the /listand /priceop erat ions,w hichh aveb eens plit int oseparate\nmethods. W et henu se the ServeMuxas the main handler in the cal lto ListenAndServe.\ngopl.io/ch7/http3\nfunc main() {\ndb := database{\"shoes\": 50, \"socks\": 5}\nmux := http.NewServeMux()\nmux.Handle(\"/list\", http.HandlerFunc(db.list))\nmux.Handle(\"/price\", http.HandlerFunc(db.price))\nlog.Fatal(http.ListenAndServe(\"localhost:8000\", mux))\n}\ntype database map[string]dollars\nfunc (db database) list(w http.ResponseWriter, req *http.Request) {\nfor item, price := range db {\nfmt.Fprintf(w, \"%s: %s\\n\", item, price)\n}\n}\nfunc (db database) price(w http.ResponseWriter, req *http.Request) {\nitem := req.URL.Query().Get(\"item\")\nprice, ok := db[item]\nif !ok {\nw.WriteHeader(http.StatusNotFound) // 404\nfmt.Fprintf(w, \"no such item: %q\\n\", item)\nreturn\n}\nfmt.Fprintf(w, \"%s\\n\", price)\n}\nLet’sf ocus ont he two cal lst o mux.Handle that reg ister the handlers. I nt he ﬁrs ton e, db.list\nis a met hod value (§6.4), t hati s, a value oft yp e\nfunc(w http.ResponseWriter, req *http.Request)\nthat, whenc al le d,i nv okest he database.list method wit hther eceiverv alue db.S o db.list\nis a functiont hati mp lements handler-li keb eh avior,b ut since ith as nom et hods, itd oesn’ts at-\nisfy the http.Handlerinterface andc an’tb ep assedd irec tly to mux.Handle.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 212,
      "page_label": "194"
    }
  },
  {
    "page_content": "isfy the http.Handlerinterface andc an’tb ep assedd irec tly to mux.Handle.\nThee xpression http.HandlerFunc(db.list) is a c onversion, n ot a f unctionc al l,s ince\nhttp.HandlerFuncis a typ e.I th as the fol low ing deﬁnition:\nnet/http\npackage http\ntype HandlerFunc func(w ResponseWriter, r *Request)\nfunc (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {\nf(w, r)\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 212,
      "page_label": "194"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.7. THE HTTP.HANDLER INTERFACE 195\nHandlerFunc demon strates som eunusualf eatureso fG o’si nt erface mechanism. I ti saf unc-\ntion t yp e that has met h odsa nd s at isﬁes an in terface, http.Handler.T he beh avior of it s\nServeHTTP method i st oc al l theu nderly ing function. HandlerFunc is t hu san adaptert hat\nlets a fun ctionv alue sat isf y an interface,w here the functiona nd the i nt erface’ss olem et hod\nhave t he s ames ig nature. I ne ffec t,t hist rick l ets a sin glet yp e such a s database satisf y the\nhttp.Handler interface several different ways: oncet hrough its list method,o ncet hrough\nits pricemethod,a nd soo n.\nBecaus e register ingah andler thi sw ay i ss oc ommon, ServeMux hasac onvenience met hod\ncalled HandleFuncthat does itf or us, sow ec an simplif ytheh andler reg ist rat ionc odet ot his:\ngopl.io/ch7/http3a\nmux.HandleFunc(\"/list\", db.list)\nmux.HandleFunc(\"/price\", db.price)\nIt’se asy tos ee f ro mthec odea bove how one wou ldc on str uct a p rogram in whic ht here are\ntwod if ferentw eb s er vers, listeningo nd if ferentp or ts, deﬁnin gd if ferentU RLs, an dd is-\npatchingt od if ferenth andlers. W ew ou ldj ustc on str uct another ServeMux andm akea nother\ncall t o ListenAndServe,p erhaps co nc urrently. B ut i nm ostp rograms, o ne w eb s er ver is\nplenty.A ls o,i t’st ypic alto deﬁne H TTPh andlersa crossm any ﬁles o fa na pp lic ation, andi t",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 213,
      "page_label": "195"
    }
  },
  {
    "page_content": "plenty.A ls o,i t’st ypic alto deﬁne H TTPh andlersa crossm any ﬁles o fa na pp lic ation, andi t\nwouldb ean uisance if t he yal lhadt ob ee xplicitlyr eg istered wit hthea pp lic ation’s ServeMux\ninst ance.\nSo,f or convenience, net/http prov ides a glo bal ServeMux inst ancec al le dDefaultServeMux\nandp ackage-le vel f unctions c al le dhttp.Handle and http.HandleFunc.T ou se Default-\nServeMuxas the ser ver’sm ain handler,w en eedn’tp assi tt o ListenAndServe; nilwi l ldo.\nThes er ver’sm ain functionc an thenb es impliﬁed to\ngopl.io/ch7/http4\nfunc main() {\ndb := database{\"shoes\": 50, \"socks\": 5}\nhttp.HandleFunc(\"/list\", db.list)\nhttp.HandleFunc(\"/price\", db.price)\nlog.Fatal(http.ListenAndServe(\"localhost:8000\", nil))\n}\nFinal ly, ani mp ortantr eminder : as wem ention edi nS ec tion 1.7, the web ser ver invo kes each\nhand ler in a new goroutine,s oh andlersm ustt akep re caution ssuch as locki n gwhen accessing\nvar iables thato ther goroutines, includingo ther requests tot he sameh andler,m ay bea ccess-\ning. W e’ll tal k ab out con cur rency int he next two chapt ers.\nExercis e 7.11: Adda ddition alh andlerss ot hatc lients can cr eate, r ead, u pdate, a nd delete\ndatabase e nt ries. F or e xample, a r equesto ft he f or m /update?item=socks&price=6 wi l l\nup datet he price ofa ni temi nt he inv ent ory and rep ort ane rror ift he itemd oesn ot exist ori f\nthep rice isi nvalid.( Warning: thisc hange int roduces conc urrentv ar iable updates.)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 213,
      "page_label": "195"
    }
  },
  {
    "page_content": "thep rice isi nvalid.( Warning: thisc hange int roduces conc urrentv ar iable updates.)\nExercis e 7.12: Change the handler for /list to print its out put asa nH TMLt able,n ot text.\nYo umayﬁ nd the html/templatepackage( §4.6) u seful.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 213,
      "page_label": "195"
    }
  },
  {
    "page_content": "ptg16105617\n196 CHAPTER 7. INTERFACES\n7.8. The errorInt erface\nSincet he b eg inningo ft hisb ook, we ’ve b eenu singa nd c re ating v alues o ft he m ysteriou s\npredeclare derror type wit houte xplainingw hati tr eallyi s. I nf ac t,it’sj usta ni nt erface typ e\nwith a singlem et hod thatr etur ns an error message:\ntype error interface {\nError() string\n}\nThes implestw ay toc re ate an error is byc al lingerrors.New,w hichr etur nsan ew error for\nag iven erro rmess age . Thee nt ire errorspackagei so nlyf ourl ines long:\npackage errors\nfunc New(text string) error { return &errorString{text} }\ntype errorString struct { text string }\nfunc (e *errorString) Error() string { return e.text }\nTheu nderly ing typ eof errorStringis a str uct,n ot a str ing ,to pro tec titsr epresent ation fro m\ninadvertent( or premedit ate d)u pdates. A nd the r easont hatt he point ert yp e*errorString,\nnot errorString alone,s at isﬁes the error interface iss ot hate very cal lto New al locatesad is-\ntinc terror inst ancet hati se qu alt on oo ther.W ew ou ldn ot wantad istinguishe der ror such\nas io.EOFto compare equ alt oo ne thatm erelyh appene dto havet he samem essage .\nfmt.Println(errors.New(\"EOF\") == errors.New(\"EOF\")) // \"false\"\nCallst o errors.New arer el ative lyi nf requentb ecause there’sac onvenientw rapperf unction,\nfmt.Errorf,t hatd oess tr ing for matting too.W eu sedi ts everal times in Chapt er5 .\npackage fmt\nimport \"errors\"\nfunc Errorf(format string, args ...interface{}) error {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 214,
      "page_label": "196"
    }
  },
  {
    "page_content": "package fmt\nimport \"errors\"\nfunc Errorf(format string, args ...interface{}) error {\nreturn errors.New(Sprintf(format, args...))\n}\nAlthough *errorString mayb et he simplestt yp eof error,i ti sf ar fro mtheo nlyo ne.F or\nexample, the syscall packagep rovides Go’sl ow-le vel systemc al l API. On many platfor ms, it\ndeﬁnesanu merict yp e Errno that sat isﬁes error,a nd o nU nix p latfor ms, Errno’s Error\nmethod doesal ooku pin a table ofs tr ings, as shown below :\npackage syscall\ntype Errno uintptr // operating system error code\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 214,
      "page_label": "196"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.9. EXAMPLE: EXPRESSION EVAL UATOR1 97\nvar errors = [...]string{\n1: \"operation not permitted\", // EPERM\n2: \"no such file or directory\", // ENOENT\n3: \"no such process\",// ESRCH\n// ...\n}\nfunc (e Errno) Error() string {\nif 0 <= int(e) && int(e) < len(errors) {\nreturn errors[e]\n}\nreturn fmt.Sprintf(\"errno %d\", e)\n}\nThef ol low ing statement cre atesa ni nt erface value h oldingt he Errno value 2,s ig nifying the\nPOSIX ENOENTcondit ion:\nvar err error = syscall.Errno(2)\nfmt.Println(err.Error()) // \"no such file or directory\"\nfmt.Println(err) // \"no such file or directory\"\nThev alue of erris shown graphic ally inF igure7 .6.\nFigure 7.6. An int erface value holdinga syscall.Errnointeger.\nErrnois ane fﬁcientr epresent ation of systemc al l er ror sdraw nfrom a ﬁnite set, andi ts at isﬁes\nthes tand ard errorinterface.W e’ll see other typ esthat sat isf ythis int erface in Sec tion 7.11.\n7.9. Example: Expression E valuator\nIn thiss ec tion,w e’ll bui ld an evaluatorf or simplea rithmetice xpressions.W e’ll use ani nt er-\nface, Expr,t or epresent a ny e xpressioni nt hisl angu age. F or n ow,t hisi nt erface n eedsn o\nmethods, but we’ll add som elater.\n// An Expr is an arithmetic expression.\ntype Expr interface{}\nOure xpressionl angu agec on sists of ﬂoating -p ointl it erals; the binar yop erator s+, -, *,a nd /;\ntheu nary operator s-x and +x;f unctionc al lspow(x,y), sin(x),a nd sqrt(x);v ar iables such",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 215,
      "page_label": "197"
    }
  },
  {
    "page_content": "theu nary operator s-x and +x;f unctionc al lspow(x,y), sin(x),a nd sqrt(x);v ar iables such\nas x and pi;a nd ofc ours eparent hes es ands tand ard operator precedence.A ll values areo f\ntype float64.H erea re som eexamplee xpressions:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 215,
      "page_label": "197"
    }
  },
  {
    "page_content": "ptg16105617\n198 CHAPTER 7. INTERFACES\nsqrt(A / pi)\npow(x, 3) + pow(y, 3)\n(F - 32) * 5 / 9\nThe ﬁve con crete typ esbelowr epresent par tic ulark inds ofe xpression. A Varrepres ents a ref-\nerence toav ar iable.( We’ll s oons ee w hy iti se xp orted.) A literal repres ents a ﬂoating-\npointc on stant.T he unary and binary typesr epresent operator expressions wit h on e or two\nop erands,w hichc an bea ny kindo f Expr.A call repres ents a functionc al l;we’ll restr ict its\nfnﬁeldt o pow, sin,o r sqrt.\ngopl.io/ch7/eval\n// A Var identifies a variable, e.g., x.\ntype Var string\n// A literal is a numeric constant, e.g., 3.141.\ntype literal float64\n// A unary represents a unary operator expression, e.g., -x.\ntype unary struct {\nop rune // one of '+', '-'\nxExpr\n}\n// A binary represents a binary operator expression, e.g., x+y.\ntype binary struct {\nop rune // one of '+', '-', '*', '/'\nx, y Expr\n}\n// A call represents a function call expression, e.g., sin(x).\ntype call struct {\nfn string // one of \"pow\", \"sin\", \"sqrt\"\nargs []Expr\n}\nTo evaluate ane xpressionc ontainingv ar iables, we’ll need a n enviro nment that maps var iable\nnamest ov alues:\ntype Env map[Var]float64\nWe’ll als one e deach kindo fe xpressiont od eﬁne an Eval method thatr etur nst he expression’s\nvalue in a g iven enviro nment.S ince every expressionm ustp rovide thism et hod,w ea dd itt o\nthe Expr interface.T he packagee xp ortso nlyt he typ esExpr, Env,a nd Var;c lients can use the",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 216,
      "page_label": "198"
    }
  },
  {
    "page_content": "the Expr interface.T he packagee xp ortso nlyt he typ esExpr, Env,a nd Var;c lients can use the\nevaluatorw it houta ccesst ot he other expressiont yp es.\ntype Expr interface {\n// Eval returns the value of this Expr in the environment env.\nEval(env Env) float64\n}\nThec on crete Eval methodsa re shown below.T he method for Var perfor msa ne nv iro nment\nlo oku p,w hichr etur nsz eroi ft he var iable isn ot deﬁne d,a nd the me thod for literal simply\nreturnst he lit eral value.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 216,
      "page_label": "198"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.9. EXAMPLE: EXPRESSION EVAL UATOR1 99\nfunc (v Var) Eval(env Env) float64 {\nreturn env[v]\n}\nfunc (l literal) Eval(_ Env) float64 {\nreturn float64(l)\n}\nThe Eval methodsf or unary and binary re cursive lye valuate their operands,t hena pp l ythe\nop erat ionop to them. W ed on’tc on sider divisions byz eroo ri nﬁnity tob ee rror s,s ince the y\nproduce a result, albeit non-ﬁnite. F inal ly, the method for callevaluatest he arguments tot he\npow, sin,o r sqrtfunc tion, thenc al lst he cor respondingf unction in the mathpackage.\nfunc (u unary) Eval(env Env) float64 {\nswitch u.op {\ncase '+':\nreturn +u.x.Eval(env)\ncase '-':\nreturn -u.x.Eval(env)\n}\npanic(fmt.Sprintf(\"unsupported unary operator: %q\", u.op))\n}\nfunc (b binary) Eval(env Env) float64 {\nswitch b.op {\ncase '+':\nreturn b.x.Eval(env) + b.y.Eval(env)\ncase '-':\nreturn b.x.Eval(env) - b.y.Eval(env)\ncase '*':\nreturn b.x.Eval(env) * b.y.Eval(env)\ncase '/':\nreturn b.x.Eval(env) / b.y.Eval(env)\n}\npanic(fmt.Sprintf(\"unsupported binary operator: %q\", b.op))\n}\nfunc (c call) Eval(env Env) float64 {\nswitch c.fn {\ncase \"pow\":\nreturn math.Pow(c.args[0].Eval(env), c.args[1].Eval(env))\ncase \"sin\":\nreturn math.Sin(c.args[0].Eval(env))\ncase \"sqrt\":\nreturn math.Sqrt(c.args[0].Eval(env))\n}\npanic(fmt.Sprintf(\"unsupported function call: %s\", c.fn))\n}\nSeveral oft hese m et hodsc an fai l. F or example, a call expressionc ou ldh avea nu nknown",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 217,
      "page_label": "199"
    }
  },
  {
    "page_content": "}\nSeveral oft hese m et hodsc an fai l. F or example, a call expressionc ou ldh avea nu nknown\nfunc tiono rt he wro ngn umbero fa rguments. It ’sa ls opossible toc on str uct a unary or binary\nexpressionw it han invalid o perator sucha s ! or < (although t he Parse func tionm ention ed\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 217,
      "page_label": "199"
    }
  },
  {
    "page_content": "ptg16105617\n200 CH\nAPTER INTERFACES7.\nbeloww ill \nnever do this). Thes e er r or scaus eEval to \npanic. O ther erro rs, like evaluating a\nVarnotp resent \nint he env iro nment,m erelyc ause Evalto \nretur nthew ro ngr esult. A ll oft hese\ner ror scouldb ed etec ted byi ns pec ting the Exprbefore \nevaluating it. That w ill bet he job oft he\nCheckmethod,w hichw\new ill shows oon, but ﬁrs tlet’st est Eval.\nTh\ne TestEval func \ntionb elow isa t esto ft he evaluator. I tu sest he testing package, \nwhich\nwe’ll explain in C hapt er1 1, but for now it’se noug hto knowt hatc al lingt.Errorf reportsa n\ner \nror.T he functionl oops overat able ofi np uts t hatd eﬁnest hree e xpressions and dif ferent\nenviro nmentsf or eacho ne.T he ﬁrs texpressionc omputest he radius ofac ircleg iven its area\nA,t he \nsecon dcomp utest he sum oft he cub eso ft wo var iablesxan\nd y,a nd \nthe thirdc onvertsa\nFahren heitt emperature Fto \nCel siu s.\nfunc TestEval(t *testing.T) {\ntests := []struct {\nexpr string\nenv \nEnv\nwant string\n}{\n{\"sqrt(A / pi)\", Env{\"A\": 87616, \"pi\": math.Pi}, \"167\"},\n{\"pow(x, 3) + pow(y, 3)\", Env{\"x\": 12, \"y\": 1}, \"1729\"},\n{\"pow(x, 3) + pow(y, 3)\", Env{\"x\": 9, \"y\": 10}, \"1729\"},\n{\"5 / 9 * (F - 32)\", Env{\"F\": -40}, \"-40\"},\n{\"5 / 9 * (F - 32)\", Env{\"F\": 32}, \"0\"},\n{\"5 / 9 * (F - 32)\", Env{\"F\": 212}, \"100\"},\n}\nvar prevExpr string\nfor _, test := range tests {\n// Print expr only when it changes.\nif test.expr != prevExpr {\nfmt.Printf(\"\\n%s\\n\", test.expr)\nprevExpr = test.expr\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 218,
      "page_label": "200"
    }
  },
  {
    "page_content": "for _, test := range tests {\n// Print expr only when it changes.\nif test.expr != prevExpr {\nfmt.Printf(\"\\n%s\\n\", test.expr)\nprevExpr = test.expr\n}\nexpr, err := Parse(test.expr)\nif err != nil {\nt.Error(err) // parse error\ncontinue\n}\ng\not := fmt.Sprintf(\"%.6g\", expr.Eval(test.env))\nfmt.Printf(\"\\t%v => %s\\n\", test.env, got)\nif got != test.want {\nt.Errorf(\"%s.Eval() in %v = %q, want %q\\n\",\ntest.expr, test.env, got, test.want)\n}\n}\n}\nFo \nr each ent ryi nt he table,t he testp arsest he expression, evaluatesi ti nt he env iro nment,a nd\npr intst he result. W ed on’th aves pace tos howt he Parsefunc \ntionh ere, but you’ll ﬁnd iti fy ou\ndown loadt he packageu sing go \nget.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 218,
      "page_label": "200"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.9. EXAMPLE: EXPRESSION EVAL UATOR2 01\nThe go testcommand( §11.1) run sap ackage’st ests:\n$g ot est -v gopl.io/ch7/eval\nThe -v ﬂag lets u ss ee the print edo ut put of the test, whichi sn or mal lys up pressedf or a s uc-\ncessf ult estl iket hiso ne.H erei st he out put of the test’s fmt.Printfst atements:\nsqrt(A / pi)\nmap[A:87616 pi:3.141592653589793] => 167\npow(x, 3) + pow(y, 3)\nmap[x:12 y:1] => 1729\nmap[x:9 y:10] => 1729\n5/9*( F-3 2)\nmap[F:-40] => -40\nmap[F:32] => 0\nmap[F:212] => 100\nFo rtunate lyt he inp uts sof ar havea ll beenw el lformed,b ut our lucki su nlikelyt ol ast. E veni n\ninterprete dlanguages, iti sc ommont oc he ckt he syntaxf or stati cer ror s,t hati s, mist akest hat\ncanb ed etec ted wit houtr unningt he p rogram. B ys ep arat ingt he s taticc he cks f ro m the\ndy namic o nes, w ec an det ec t er ror s so onera nd p er for m many che cks o nlyo ncei ns teado f\neach time an expressioni se valuate d.\nLet’sa dd anot her met hod tot he Expr interface.T he Check method che cks for statice rror sin\nan expressions yntaxt re e.W e’ll explain its varsparameter in a mom ent.\ntype Expr interface {\nEval(env Env) float64\n// Check reports errors in this Expr and adds its Vars to the set.\nCheck(vars map[Var]bool) error\n}\nThec on crete Check methodsa re shown below.E valuation of literal and Var cannot fai l,s o\nthe Check methodsf or these typ esreturn nil.T he methodsf or unary and binary ﬁrs t ch eck",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 219,
      "page_label": "201"
    }
  },
  {
    "page_content": "the Check methodsf or these typ esreturn nil.T he methodsf or unary and binary ﬁrs t ch eck\nthat the operator isv alid,t henr ec ursivelyc he ckt he operands.S imi larly,t he method for call\nﬁrs t ch eckst hatt he functioni sk nown and has t he rig htn umbero fa rguments, thenr ec ur-\nsive lyc he cks eacha rgument.\nfunc (v Var) Check(vars map[Var]bool) error {\nvars[v] = true\nreturn nil\n}\nfunc (literal) Check(vars map[Var]bool) error {\nreturn nil\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 219,
      "page_label": "201"
    }
  },
  {
    "page_content": "ptg16105617\n202 CHAPTER 7. INTERFACES\nfunc (u unary) Check(vars map[Var]bool) error {\nif !strings.ContainsRune(\"+-\", u.op) {\nreturn fmt.Errorf(\"unexpected unary op %q\", u.op)\n}\nreturn u.x.Check(vars)\n}\nfunc (b binary) Check(vars map[Var]bool) error {\nif !strings.ContainsRune(\"+-*/\", b.op) {\nreturn fmt.Errorf(\"unexpected binary op %q\", b.op)\n}\nif err := b.x.Check(vars); err != nil {\nreturn err\n}\nreturn b.y.Check(vars)\n}\nfunc (c call) Check(vars map[Var]bool) error {\narity, ok := numParams[c.fn]\nif !ok {\nreturn fmt.Errorf(\"unknown function %q\", c.fn)\n}\nif len(c.args) != arity {\nreturn fmt.Errorf(\"call to %s has %d args, want %d\",\nc.fn, len(c.args), arity)\n}\nfor _, arg := range c.args {\nif err := arg.Check(vars); err != nil {\nreturn err\n}\n}\nreturn nil\n}\nvar numParams = map[string]int{\"pow\": 2, \"sin\": 1, \"sqrt\": 1}\nWe’ve liste das elec tion of ﬂawed inp uts andt he error sthey elicit, in t wo gro ups. The Parse\nfunc tion( nots hown)r ep ortss yntaxe rror sandt he Checkfunc tionr ep ortss emantice rror s.\nx%2 unexpected '%'\nmath.Pi unexpected '.'\n!true unexpected '!'\n\"hello\" unexpected '\"'\nlog(10) unknown function \"log\"\nsqrt(1, 2) call to sqrt has 2 args, want 1\nCheck’sa rgument, a set of Vars, accum ulates t he s et o fv ar iable names f ound w it hin t he\nexpression. Eac ho ft hese var iables mustb ep resent int he env iro nment for evaluation tos uc-\nce e d.T hiss et isl og ical lyt he re sult of the cal lto Check,b ut because the method isr ec ursive, it",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 220,
      "page_label": "202"
    }
  },
  {
    "page_content": "ce e d.T hiss et isl og ical lyt he re sult of the cal lto Check,b ut because the method isr ec ursive, it\nis morec onvenientf or Check to popu lateas et passeda sapa rameter.T he clientm ustp rovide\nan empt yset in the initial cal l.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 220,
      "page_label": "202"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.9. EXAMPLE: EXPRESSION EVAL UATOR2 03\nIn Sec tion 3.2, wep lott eda f unction f(x,y) that was ﬁxe d at comp ile time. N ow thatw ec an\npars e, ch eck,a nd evaluate expressions ins tr ings, wec an bui ldaw eb app lic ationt hatr eceives\nan expressiona tr un timef ro mthec lienta nd plots the sur faceof thatf unction. W ec an use\nthe vars sett oc he ckt hatt he expressioni saf unctiono fo nlyt wo var iables,x and y—th re e,\nac tually, since we’ll provide r,t he radius,a sac onvenience.A nd we’ll use the Checkmethod to\nrejec t ill-for med expressions beforee valuation beg inss ot hatw ed on’tr ep eat those che cks dur-\ningt he 40,000 evaluation s(100&100 cells, eachw it hfour corners) oft he functiont hatf ol low.\nThe parseAndCheckfunc tionc om binest hese parsinga nd che cking steps:\ngopl.io/ch7/surface\nimport \"gopl.io/ch7/eval\"\nfunc parseAndCheck(s string) (eval.Expr, error) {\nif s == \"\" {\nreturn nil, fmt.Errorf(\"empty expression\")\n}\nexpr, err := eval.Parse(s)\nif err != nil {\nreturn nil, err\n}\nvars := make(map[eval.Var]bool)\nif err := expr.Check(vars); err != nil {\nreturn nil, err\n}\nfor v := range vars {\nif v != \"x\" && v != \"y\" && v != \"r\" {\nreturn nil, fmt.Errorf(\"undefined variable: %s\", v)\n}\n}\nreturn expr, nil\n}\nTo maket hisaw eb app lic ation, allw en eed ist he plot func tionb elow,w hichh as the fami liar\nsig natureo fa n http.HandlerFunc:\nfunc plot(w http.ResponseWriter, r *http.Request) {\nr.ParseForm()",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 221,
      "page_label": "203"
    }
  },
  {
    "page_content": "sig natureo fa n http.HandlerFunc:\nfunc plot(w http.ResponseWriter, r *http.Request) {\nr.ParseForm()\nexpr, err := parseAndCheck(r.Form.Get(\"expr\"))\nif err != nil {\nhttp.Error(w, \"bad expr: \"+err.Error(), http.StatusBadRequest)\nreturn\n}\nw.Header().Set(\"Content-Type\", \"image/svg+xml\")\nsurface(w, func(x, y float64) float64 {\nr: =m ath.Hypot(x, y) // distance from (0,0)\nreturn expr.Eval(eval.Env{\"x\": x, \"y\": y, \"r\": r})\n})\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 221,
      "page_label": "203"
    }
  },
  {
    "page_content": "ptg16105617\n204 CHAPTER 7. INTERFACES\nFigure 7.7. Thes ur facesof three functions:( a) sin(-x)*pow(1.5,-r);\n(b) pow(2,sin(y))*pow(2,sin(x))/12;( c) sin(x*y/10)/10.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 222,
      "page_label": "204"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.10. TYPE ASSERTIONS 205\nThe plot func tionp arsesa nd che cks the expressions peciﬁed int he HTTPr equesta nd usesi t\nto cre ate ana nony mou sfunc tiono ft wo var iables. Thea nony mou sfunc tionh as the sames ig-\nnature ast he ﬁxe dfunc tion f from the originals ur face-plott ing program, but it evaluatest he\nus er-supp lie d expression. Th ee nv iro nment deﬁnes x, y,a nd the r adius r.F inal ly, plot calls\nsurface,w hichi sj ustt he main func tionf ro mgopl.io/ch3/surface,m odiﬁed t ot aket he\nfunc tiont op lota nd the out putio.Writeras parameters, insteado fu singt he ﬁxe dfunc tion f\nand os.Stdout.F igure7 .7 shows three sur facesproduce dby the program.\nExercis e 7.13:Adda String method to Expr to prett y-print the syntaxt re e.C he ckt hatt he\nresu lts, whenp arseda gain, yield an equivalentt re e.\nExercis e 7.14:Deﬁne a newc on crete typ ethat sat isﬁes the Expr interface andp rovides a new\nop erat ions ucha sc omputing the minimum value o fi ts operands.S ince the Parse func tion\ndo esnotc re ate ins tances oft hisn ew typ e,t ou se ity ou will need t oc on str uct a s yntaxt re e\ndirec tly (or extendt he parser).\nExercis e 7.15: Wr ite a p rogram t hatr eads a s inglee xpressionf ro m thes tand ard i np ut,\npromptst he u sert op rovide values f or a ny v ar iables, thene valuatest he e xpressioni nt he\nresu lting env iro nment.H andlea ll error sgracef ully.\nExercis e 7.16:Wr ite a web-b ased calc ulatorp rogram.\n7.10. Type Assertions",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 223,
      "page_label": "205"
    }
  },
  {
    "page_content": "resu lting env iro nment.H andlea ll error sgracef ully.\nExercis e 7.16:Wr ite a web-b ased calc ulatorp rogram.\n7.10. Type Assertions\nA ty pea ss ertion is ano perat iona pp lie dto ani nt erface value.S yntactic ally,i tl ooks like x.(T),\nwhere x is ane xpressiono fa ni nt erface typ e andT is a typ e,c al le dthe ‘‘asserted’’type.A type\nassertionc he cks thatt he dynamic typ eof itso perandm atch est he ass erted typ e.\nTherea re two possibi lit ies. First,i ft he ass erted typ eT is a con crete typ e,t hent he typ e asser-\ntion che cks whether x’sd ynamic typ eis ident icalt o T.I ft hisc he cks ucce e ds, the resulto ft he\ntype ass ertioni s x’sd ynamic value,w hose typ eis ofc ours eT.I no ther words,at yp e assertion\nto a c on crete t yp e ext racts the c on crete v alue f ro mitso perand. I ft he che ckf ai ls, thent he\nop erat ionp anics. F or example:\nvar w io.Writer\nw=o s.Stdout\nf: =w .(*os.File) // success: f == os.Stdout\nc: =w .(*bytes.Buffer) // panic: interface holds *os.File, not *bytes.Buffer\nSecond,i fi ns teadt he a ss erted t yp e T is a ni nt erface typ e,t hent he t yp e assertionc he cks\nwhet herx’sd ynamic typ esati sﬁes T.I ft hisc he cks ucce e ds, the dynamic value isn ot ext racte d;\nther esulti ss till ani nt erface value w it hthes amet yp e andv alue comp onents, but the result\nhast he int erface typ eT.I no ther words,at yp e assertiont oa ni nt erface typ ech angest he typ e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 223,
      "page_label": "205"
    }
  },
  {
    "page_content": "hast he int erface typ eT.I no ther words,at yp e assertiont oa ni nt erface typ ech angest he typ e\nof t he e xpression, mak ingad if ferent( andu su allyl arger) set o fm et hodsa ccessible, b ut it\npres ervest he dynamic typ e andv alue comp onentsi nside the int erface value.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 223,
      "page_label": "205"
    }
  },
  {
    "page_content": "ptg16105617\n206 CHAPTER 7. INTERFACES\nAf ter the ﬁrs ttype ass ertionb elow,b ot hwand rwhold os.Stdout so eachh as a dynamic typ e\nof *os.File,b ut w,a n io.Writer,e xp oses onlyt he ﬁle’s Write method,w here as rw exp oses\nits Readmethod too.\nvar w io.Writer\nw=o s.Stdout\nrw := w.(io.ReadWriter) // success: *os.File has both Read and Write\nw=n ew(ByteCounter)\nrw = w.(io.ReadWriter) // panic: *ByteCounter has no Read method\nNo matterw hatt yp e was asserted,i ft he operandi san il i nt erface value,t he t yp e assertion\nfai ls. A type a ss ertiont oales sr estr ictivei nt erface typ e (one w it h fe wer met hods) i sr arely\nne e ded, as it beh avesj ustl ike an assig nment, except in the nil cas e.\nw=r w/ /i o.ReadWriter is assignable to io.Writer\nw=r w.(io.Writer) // fails only if rw == nil\nOf ten we’re not sureo ft he dynamic typ eof ani nt erface value,a nd we’dl iket ot estw hether it\nis som epartic ulart yp e.I ft he typ e assertiona pp earsi na na ssig nmenti nw hicht wo results are\nexp ected,s ucha st he f ol low ing d eclarat ions,t he o perat iond oesn ot p anic o nf ai lureb ut\ninsteadr etur ns an addition als econ dresu lt, a boole an indic atings uccess:\nvar w io.Writer = os.Stdout\nf, ok := w.(*os.File) // success: ok, f == os.Stdout\nb, ok := w.(*bytes.Buffer) // failure: !ok, b == nil\nThes econ dresu lti sc onvent ion allya ssig ned toav ar iable named ok.I ft he operat ionf ai le d,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 224,
      "page_label": "206"
    }
  },
  {
    "page_content": "Thes econ dresu lti sc onvent ion allya ssig ned toav ar iable named ok.I ft he operat ionf ai le d,\nok is f alse,a nd the ﬁrs t resu lti se qu alt ot he z erov alue oft he a ss erted t yp e,w hichi nt his\nexamplei san il *bytes.Buffer.\nThe ok resu lti so ften immediate lyu sedt od ecide whatt od on ext. Th ee xtende dform oft he\nifst atement makes thisq uite compact:\nif f, ok := w.(*os.File); ok {\n// ...use f...\n}\nWh ent he operando fat yp e assertioni sav ar iable,r at her thani nv ent another namef or the\nne wlo cal variable, you’ll som etimess ee the o riginaln amer eused, shadowing the original, like\nthis:\nif w, ok := w.(*os.File); ok {\n// ...use w...\n}\n7.11. Discriminating Error sw ith Type Assertions\nConsider the set ofe rror sreturned byﬁ le operat ions int he os package. I /O can fai lf or any\nnumb ero fr easons,b ut three k inds off ai lureo ften mustb eh andled d if ferently: ﬁle alr eady\nexists( forc re ate operat ions), ﬁle not found (forr eado perat ions), andp er missiond enie d.T he\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 224,
      "page_label": "206"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.11. DISCRIMINATING ERRORS WITH TYPE ASSERTIONS 207\nos packagep rovides t hese t hree h elperf unctions toc lassif y thef ai lurei ndic ated byag iven\nerrorvalue:\npackage os\nfunc IsExist(err error) bool\nfunc IsNotExist(err error) bool\nfunc IsPermission(err error) bool\nAn aïve imp lementation of on eo ft hese pre dic ates might che ckt hatt he error message con-\ntainsac er tain subst ring,\nfunc IsNotExist(err error) bool {\n// NOTE: not robust!\nreturn strings.Contains(err.Error(), \"file does not exist\")\n}\nbutb ecause t he l og ic forh andlingI /O er ro rsc an var yf ro m on e pl atfor m to a nother,t his\napproach isn ot robusta nd the s amef ai lurem ay ber ep orted wit hav ar ietyo fd if ferente rror\nmess ages. C he cking for subst rings ofe rror messagesm ay beu sefuld ur ingt esting toe ns ure\nthat functions fai l in the exp ected manner,b ut it’si nade quate for produc tionc ode.\nAm orer eliablea ppro ach ist or epresent str uctured error values usingad edic ated typ e.T he\nos packaged eﬁnesat yp ecalled PathError to des crib efai lures invo l vinga no perat iono na\nﬁle pat h, li ke Open or Delete,a nd a v ar iantc al le dLinkError to des crib efai lures ofo pera-\ntion sinvo l vingt wo ﬁle pat hs, like Symlinkand Rename.H ere’s os.PathError:\npackage os\n// PathError records an error and the operation and file path that caused it.\ntype PathError struct {\nOp string\nPath string\nErr error\n}\nfunc (e *PathError) Error() string {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 225,
      "page_label": "207"
    }
  },
  {
    "page_content": "type PathError struct {\nOp string\nPath string\nErr error\n}\nfunc (e *PathError) Error() string {\nreturn e.Op + \" \" + e.Path + \": \" + e.Err.Error()\n}\nMost clients areo bliv iou sto PathError andd ealw it hal l er ror sin a unif or mway byc al ling\ntheir Error methods. A lt hough PathError’s Error method for msam essage bys imply con-\ncatenating the ﬁelds, PathError’ss tr ucturep reserves the underly ing componentso ft he error.\nClients thatn eed tod istinguish one k indo ff ai luref ro m anot her can u se a t yp e assertiont o\ndetec tthes peciﬁct yp eof the error ;thes peciﬁct yp eprov ides mored et ailt hanas imples tr ing .\n_, err := os.Open(\"/no/such/file\")\nfmt.Println(err) // \"open /no/such/file: No such file or directory\"\nfmt.Printf(\"%#v\\n\", err)\n// Output:\n// &os.PathError{Op:\"open\", Path:\"/no/such/file\", Err:0x2}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 225,
      "page_label": "207"
    }
  },
  {
    "page_content": "ptg16105617\n208 CHAPTER 7. INTERFACES\nThat’sh ow the three helperf unctions work.F or example, IsNotExist,s hown below,r ep orts\nwhet her an er ro r is e qu alt o syscall.ENOENT (§7.8) o rt ot he d istinguishe d er ror\nos.ErrNotExist (s eeio.EOF in §5.4.2), o ri sa *PathError whos e underly ing error iso ne of\nthos etwo.\nimport (\n\"errors\"\n\"syscall\"\n)\nvar ErrNotExist = errors.New(\"file does not exist\")\n// IsNotExist returns a boolean indicating whether the error is known to\n// report that a file or directory does not exist. It is satisfied by\n// ErrNotExist as well as some syscall errors.\nfunc IsNotExist(err error) bool {\nif pe, ok := err.(*PathError); ok {\nerr = pe.Err\n}\nreturn err == syscall.ENOENT || err == ErrNotExist\n}\nAndh ere it is in action:\n_, err := os.Open(\"/no/such/file\")\nfmt.Println(os.IsNotExist(err)) // \"true\"\nOf course, PathError’ss tr ucturei sl osti ft he error message isc om bine dinto a l argers tr ing ,\nfori ns tance byac al lto fmt.Errorf.E rror dis criminat ionm ustu su allyb ed on eimmediate ly\naf ter the fai lingo perat ion, before an error isp ro pagated tot he cal ler.\n7.12. Querying Behavior sw ith Int erfaceT ype Assertions\nThel og ic belowi ss imi lar tot he p ar t of t he net/http we b server res ponsible f or w riting\nHT TP he ader ﬁel ds sucha s \"Content-type: text/html\".T he io.Writer wrepres ents the\nHT TPresp ons e;t he bytes writt ent oi ta re ult imate lys entt os om eon e’sw eb brows er.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 226,
      "page_label": "208"
    }
  },
  {
    "page_content": "HT TPresp ons e;t he bytes writt ent oi ta re ult imate lys entt os om eon e’sw eb brows er.\nfunc writeHeader(w io.Writer, contentType string) error {\nif _, err := w.Write([]byte(\"Content-Type: \")); err != nil {\nreturn err\n}\nif _, err := w.Write([]byte(contentType)); err != nil {\nreturn err\n}\n// ...\n}\nBecaus ethe Write method requires a byt es lice,a nd the v alue wew isht ow rite isas tr ing ,a\n[]byte(...) conv ersioni sr equired.T hisc onversiona llocates mem or y andm akes a co py,\nbutt he copyi st hrow naway almosti mmediate lya fter.L et’sp retend thatt hisi sac orep ar tof\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 226,
      "page_label": "208"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.12. QUERYING BEHAVIORS WITH INTERFACE TYPE ASSERTIONS 209\nthew eb s er ver andt hato ur proﬁlingh as reveale d that thi sm emor y al location iss lowing it\ndown.C an wea void allo cat ingm emor yhere?\nThe io.Writer interface tel lsu so nlyo ne fac t ab out the con crete typ ethat w holds: thatb ytes\nmayb ew ritt ent oi t. I fw el ookb ehindt he cur tainso ft he net/http package, wes ee thatt he\ndy namic typ ethat w holdsi nt hisp rogram also has a WriteString method thata llowss tr ings\nto bee fﬁcientlyw ritt ent oi t, avoidingt he need toa llocateat emporar y copy.( Thism ay seem\nli keas hoti nt he dark, but a n umbero fi mp ortantt yp es that sat isf yio.Writer also havea\nWriteStringmethod,i ncluding *bytes.Buffer, *os.Fileand *bufio.Writer.)\nWe cannot assume thata na rbit rar yio.Writer walso has the WriteString method.B ut we\ncand eﬁne a ne wi nt erface thath as justt hism et hod and use a t yp e assertiont ot estw hether\nthed ynamic typ eof wsatisﬁes thisn ew int erface.\n// writeString writes s to w.\n// If w has a WriteString method, it is invoked instead of w.Write.\nfunc writeString(w io.Writer, s string) (n int, err error) {\ntype stringWriter interface {\nWriteString(string) (n int, err error)\n}\nif sw, ok := w.(stringWriter); ok {\nreturn sw.WriteString(s) // avoid a copy\n}\nreturn w.Write([]byte(s)) // allocate temporary copy\n}\nfunc writeHeader(w io.Writer, contentType string) error {\nif _, err := writeString(w, \"Content-Type: \"); err != nil {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 227,
      "page_label": "209"
    }
  },
  {
    "page_content": "}\nfunc writeHeader(w io.Writer, contentType string) error {\nif _, err := writeString(w, \"Content-Type: \"); err != nil {\nreturn err\n}\nif _, err := writeString(w, contentType); err != nil {\nreturn err\n}\n// ...\n}\nTo avoid rep eat ingo urselves, we’ve mov edt he che cki nt otheu tilit yfunc tion writeString,\nbuti ti ss ou sefult hatt he stand ard librar y prov ides ita s io.WriteString.I ti st he recom-\nmended way tow rite a str ing toa n io.Writer.\nWh at’sc ur ious i nt hise xamplei st hatt here i sn os tand ard i nt erface t hatd eﬁnest he\nWriteString method and speciﬁes its required beh avior.F ur thermore, whether o rn ot a con-\ncretet yp esatisﬁes the stringWriter interface isd eter mined onlyb yi ts met hods, not bya ny\nde clare d re lat ions hip bet weeni ta nd the int erface typ e.W hatt hism eans ist hatt he technique\nab ove r elies o nt he a ssump tiont hat if at yp e satisﬁes t he i nt erface b elow, th en\nWriteString(s)mu sth avet he samee ffec tas Write([]byte(s)).\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 227,
      "page_label": "209"
    }
  },
  {
    "page_content": "ptg16105617\n210 CHAPTER 7. INTERFACES\ninterface {\nio.Writer\nWriteString(s string) (n int, err error)\n}\nAlthough io.WriteString do cuments its assump tion, few functions thatc al lit are likelyt o\ndo cumentt hatt he yto omake the samea ssump tion. Deﬁnin gam et hod ofap ar tic ulart yp eis\ntaken as an imp l icita ss ent f or a c er tain beh avioral co nt rac t. Ne wcomers to G o, e sp eci ally\nthos efrom a b ackg round ins tron gly typ edl angu ages, may ﬁnd thisl acko fe xpliciti nt ent ion\nunsett ling, but it i sr arelyapr oblem in prac tice.W it h thee xception of t he e mp tyi nt erface\ninterface{},i nt erface typ es ares eldoms at isﬁed byu nintended coincidence.\nThe writeString func tiona bove u sesat yp e assertiont os ee w hether a value o fag eneral\ninterface typ e also sat isﬁes a mores peciﬁci nt erface typ e,a nd ifs o, itu sest he beh avior s of the\nsp eciﬁci nt erface.T hist echnique can bep ut tog ood use whether orn ot the quer iedi nt erface\nis stand ard like io.ReadWriteror user-deﬁne dli kestringWriter.\nIt’sa ls ohow fmt.Fprintf dist inguishesv alues thats at isf yerror or fmt.Stringer from all\not her values. W it hin fmt.Fprintf,t here isa s tept hatc onvertsas ingleo perandt oas tr ing ,\nsomethingl iket his:\npackage fmt\nfunc formatOneValue(x interface{}) string {\nif err, ok := x.(error); ok {\nreturn err.Error()\n}\nif str, ok := x.(Stringer); ok {\nreturn str.String()\n}\n// ...all other types...\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 228,
      "page_label": "210"
    }
  },
  {
    "page_content": "if err, ok := x.(error); ok {\nreturn err.Error()\n}\nif str, ok := x.(Stringer); ok {\nreturn str.String()\n}\n// ...all other types...\n}\nIf xsatisﬁes either oft he two int erfaces, thatd eter mines the for matting oft he value.I fn ot,t he\ndefau ltc as ehand les allo ther typ esmore orl essu nifor mly usingr eﬂec tion;w e’ll ﬁnd out how\nin Chapt er1 2.\nAgain, thism akes the assump tiont hata ny typ e with a String method sat isﬁes the beh avioral\ncont rac tof fmt.Stringer,w hichi st or etur nas tr ing suitablef or printing .\n7.13. Type Switches\nInterfaces ar eu sedi nt wo d istinc t st yles. I nt he ﬁrs t st yle,e xemp liﬁed b y io.Reader,\nio.Writer, fmt.Stringer, sort.Interface, http.Handler,a nd error,a ni nt erface’sm et h-\nodse xpress t he s imi lar ities o ft he c on crete t yp es that sat isf ythei nt erface b ut h ide t he rep-\nresent ation det ails and int rinsic operat ions oft hose c on crete typ es. Th ee mp hasisi so nt he\nmethods, not ont he con crete typ es.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 228,
      "page_label": "210"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.13. TYPE SWITCHES 211\nThes econ dst yle exploitst he abi lit y of ani nt erface value toh oldv alues ofav ar ietyo fc on crete\ntypesa nd con siderst he int erface tob et he union of those typ es. Type ass ertions are usedt o\ndiscriminatea mong these typ esdy namic ally and tre ate achc as e dif ferently. I nt hiss ty le, the\nemph asisi so nt he con crete typ esthat sat isf ythei nt erface,n ot ont he int erface’sm et hods( if\ninde e dit has any), an dt here isn oh idingo fi nfor mat ion. We’ll des crib einterfaces usedt his\nway as di scr imi nat edu ni ons.\nIf you’re fami liar wit h objec t-oriente d prog ramming, y ou may recog nize thes e twos ty les as\nsubtypep olymor phism and ad hocp olymor phism,b ut you needn’tr emembert hose ter ms. For\nther emainder oft hisc hapt er, we’ll present examples oft he secon dst yle.\nGo’sA PI for quer yinga nS QL dat abas e,l iket hose ofo ther langu ages, lets usc le anly sep arate\ntheﬁ xe dpart ofaq uer yfrom the var iable par ts.An examplec lientm ig htl ookl iket his:\nimport \"database/sql\"\nfunc listTracks(db sql.DB, artist string, minYear, maxYear int) {\nresult, err := db.Exec(\n\"SELECT * FROM tracks WHERE artist = ? AND ? <= year AND year <= ?\",\nartist, minYear, maxYear)\n// ...\n}\nThe Exec method replaces each '?' in the quer yst ringw it han SQLl it eral denot ing the cor-\nresp ondinga rgumentv alue,w hichm ay beab oole an,an umber, a str ing ,or nil.C on str uct-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 229,
      "page_label": "211"
    }
  },
  {
    "page_content": "resp ondinga rgumentv alue,w hichm ay beab oole an,an umber, a str ing ,or nil.C on str uct-\ningq uer iesthis way helps avoidS QL inj e ction att acks, in whicha na dversary takes cont rol of\ntheq uer yby exploit ing imp rop erq uotation of inp utd at a. Wi thin Exec,w em ig ht ﬁnd a func-\ntion liket he one bel ow,w hichc onvertse acha rgumentv alue toi ts literal SQLn ot ation.\nfunc sqlQuote(x interface{}) string {\nif x == nil {\nreturn \"NULL\"\n}e lse if _, ok := x.(int); ok {\nreturn fmt.Sprintf(\"%d\", x)\n}e lse if _, ok := x.(uint); ok {\nreturn fmt.Sprintf(\"%d\", x)\n}e lse if b, ok := x.(bool); ok {\nif b {\nreturn \"TRUE\"\n}\nreturn \"FALSE\"\n}e lse if s, ok := x.(string); ok {\nreturn sqlQuoteString(s) // (not shown)\n}e lse {\npanic(fmt.Sprintf(\"unexpected type %T: %v\", x, x))\n}\n}\nA switch st atement simpliﬁes an if-else ch ain thatp er for msas er iesof value equ ality tests.\nAn analogou sty pes witch st atement simpliﬁes an if-elsech ain oft yp e assertions.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 229,
      "page_label": "211"
    }
  },
  {
    "page_content": "ptg16105617\n212 CHAPTER 7. INTERFACES\nIn its simplestf or m,at yp e sw itch looks like ano rdinar y sw itch statement inw hicht he oper-\nandi s x.(type)—th at’sl it eral lyt he key word type—an de achc as ehaso ne orm oret yp es. A\ntype switch enables a multi-way branch bas edo nt he int erface value’sd ynamic typ e.T he nil\ncase match esi f x= =nil,a nd the default case match esi fn oo ther cas e do es. At yp e sw itch\nfor sqlQuotewouldh avet hese cas es:\nswitch x.(type) {\ncase nil: // ...\ncase int, uint: // ...\ncase bool: // ...\ncase string: // ...\ndefault: // ...\n}\nAs wit han ordinar y sw itch statement (§1.8), cas es ar ec on sidered ino rder and, whenam atch\nis found,t he cas e’sb odyi se xe cut ed. C as eorder becom ess ig niﬁcant wheno ne orm orec as e\ntypesa re int erfaces, since thent here isap ossibi lit y of two cas esmatching. T he position of the\ndefaultcase rel ative tot he othersi si mmater ial.N o fallthroughis allow ed.\nNo tice thati nt he originalf unction, the log icfort he bool and string casesn eedsa ccesst o\nthev alue extrac ted byt he typ e assertion. Since thi si st ypic al,t he typ e sw itch statement has an\nextende dform that binds the ext racte dvalue toan ew var iable wit hin eachc as e:\nswitch x := x.(type) { /* ... */ }\nHere we’ve cal le dthen ew var iablesx to o;a sw it htype ass ertions,r euse ofv ar iable names is\ncommon.L ikea switch st atement,at yp e sw itch imp licitlyc re atesal exic alblock, sot he dec-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 230,
      "page_label": "212"
    }
  },
  {
    "page_content": "common.L ikea switch st atement,at yp e sw itch imp licitlyc re atesal exic alblock, sot he dec-\nlarat iono ft he newv ar iable cal le dxdo esnotc onﬂic twith a var iablexin an out erb lo ck. Each\ncasealso imp licitlyc re atesas ep aratel exic alblock.\nRe \nwrit ing sqlQuoteto use the extende dform oft yp e sw itch makes its ig niﬁcant lyc le arer :\nfunc sqlQuote(x interface{}) string {\nswitch x := x.(type) {\ncase nil:\nreturn \"NULL\"\ncase int, uint:\nreturn fmt.Sprintf(\"%d\", x) // x has type interface{} here.\ncase bool:\nif x {\nreturn \"TRUE\"\n}\nreturn \"FALSE\"\ncase string:\nreturn sqlQuoteString(x) // (not shown)\ndefault:\npanic(fmt.Sprintf(\"unexpected type %T: %v\", x, x))\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 230,
      "page_label": "212"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.14. EXAMPLE: TOKEN-BASED XML DE CODING 213\nIn thisv ersion, wit hin the blo cko fe achs ingle-t ypec as e,t he var iablex hast he samet yp e as\nthec as e.F or ins tance, x hast yp ebool within the bool case and string within the string\ncase.I na ll o ther cas es, x hast he ( interface) typ e of t he switch op erand, w hichi s inter-\nface{} in thi se xample. W hent he s amea ctioni sr equired f or multiplec as es, li keint and\nuint,t he typ e sw itch makes ite asy toc om bine them.\nAlthough sqlQuote accepts an argumento fa ny typ e,t he functionr unst oc omplet iono nlyi f\nthea rgument’st yp ematch eso ne oft he cas es in the typ e sw itch;o ther wis eit panics wit han\n‘‘unexp ected t yp e’’mess age . Although t he t yp e of x is interface{},w ec on sider i ta\ndi scr imi nat edu ni on of int, uint, bool, string,a nd nil.\n7.14. Example: Token-Based XML Decoding\nSection4 .5 showe dhowt od ecodeJ SONd ocuments into God at ast ruc tures wit hthe Marshal\nand Unmarshal func tions f ro m the encoding/json package. T he encoding/xml package\nprov ides a simi larA PI.T hisa ppro ach isc onvenientw henw ew antt oc on str uct a r epresen-\ntation of t he documentt re e,b ut that’su nnecessary f or manyp rograms. The encoding/xml\npackagea ls oprov ides a lo wer-le vel tok en-bas edAPIf or decodingX ML. I nt he token-b ased\nst yle,t he p arserc on sumes t he i np uta nd p ro duces a s treamo ft okens, p rimarily o ff our",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 231,
      "page_label": "213"
    }
  },
  {
    "page_content": "st yle,t he p arserc on sumes t he i np uta nd p ro duces a s treamo ft okens, p rimarily o ff our\nkind s— StartElement, EndElement, CharData,a nd Comment—ea ch beingac on crete typ e in\nthe encoding/xmlpackage. E achc al lto (*xml.Decoder).Tokenreturnsat oken.\nTher elevantp ar tsof the API are shown here:\nencoding/xml\npackage xml\ntype Name struct {\nLocal string // e.g., \"Title\" or \"id\"\n}\ntype Attr struct { // e.g., name=\"value\"\nName Name\nValue string\n}\n// A Token includes StartElement, EndElement, CharData,\n// and Comment, plus a few esoteric types (not shown).\ntype Token interface{}\ntype StartElement struct { // e.g., <name>\nName Name\nAttr []Attr\n}\ntype EndElement struct { Name Name } // e.g., </name>\ntype CharData []byte// e.g., <p>CharData</p>\ntype Comment []byte // e.g., <!-- Comment -->\ntype Decoder struct{ /* ... */ }\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 231,
      "page_label": "213"
    }
  },
  {
    "page_content": "ptg16105617\n214 CHAPTER 7. INTERFACES\nfunc NewDecoder(io.Reader) *Decoder\nfunc (*Decoder) Token() (Token, error) // returns next Token in sequence\nThe Token interface,w hichh as nom et hods, isa ls oan exampleo fad is criminated union. The\npurpos eof a t radition ali nt erface like io.Reader is toh ide detai lso ft he con crete typ esthat\nsatisf yit sot hatn ew imp lementation scanb ec re ate d;e achc on crete typ eis tre ate dunifor mly.\nBy contrast, the set ofc on crete typ esthat sat isf yad is criminated unioni sﬁ xe dby the desig n\nande xp osed,n ot hidden. Di scriminated uniont yp eshave few met hods; functions thato per-\nateo nt hema re express eda sa s et ofc as esusingat yp e sw itch,w it hdif ferentl og ic in eachc as e.\nThe xmlselect prog rambelowe xt racts andp rintst he text found beneath cer tain elements in\nan XML document tre e.U singt he API above ,it can do its j ob inas inglep asso vert he inp ut\nwithoute verm ater ializingt he tre e.\ngopl.io/ch7/xmlselect\n// Xmlselect prints the text of selected elements of an XML document.\npackage main\nimport (\n\"encoding/xml\"\n\"fmt\"\n\"io\"\n\"os\"\n\"strings\"\n)\nfunc main() {\ndec := xml.NewDecoder(os.Stdin)\nvar stack []string // stack of element names\nfor {\ntok, err := dec.Token()\nif err == io.EOF {\nbreak\n}e lse if err != nil {\nfmt.Fprintf(os.Stderr, \"xmlselect: %v\\n\", err)\nos.Exit(1)\n}\nswitch tok := tok.(type) {\ncase xml.StartElement:\nstack = append(stack, tok.Name.Local) // push\ncase xml.EndElement:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 232,
      "page_label": "214"
    }
  },
  {
    "page_content": "os.Exit(1)\n}\nswitch tok := tok.(type) {\ncase xml.StartElement:\nstack = append(stack, tok.Name.Local) // push\ncase xml.EndElement:\nstack = stack[:len(stack)-1] // pop\ncase xml.CharData:\nif containsAll(stack, os.Args[1:]) {\nfmt.Printf(\"%s: %s\\n\", strings.Join(stack, \" \"), tok)\n}\n}\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 232,
      "page_label": "214"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 7.14. EXAMPLE: TOKEN-BASED XML DE CODING 215\n// containsAll reports whether x contains the elements of y, in order.\nfunc containsAll(x, y []string) bool {\nfor len(y) <= len(x) {\nif len(y) == 0 {\nreturn true\n}\nif x[0] == y[0] {\ny=y [1:]\n}\nx=x [1:]\n}\nreturn false\n}\nEach timet he loopi n main encounters a StartElement,i tp ushest he element’sn ameo nt oa\nst ack,a nd for each EndElement it popst he namef ro mthes tack.T he API guarante est hatt he\nsequence of StartElement and EndElement tokens w ill b ep ro perly m atch ed, eveni ni ll-\nformed d ocuments. Commentsa re i gnored.W hen xmlselect encounters a CharData,i t\npr intst he text onlyi ft he stack containsa ll the elements named byt he command-linea rgu-\nments, in order.\nThec ommand below printst he text ofa ny h2 elements appear ingb eneath two level sof div\nelements. Its in puti st he XML speciﬁcation,i ts elf an XML document.\n$g ob uild gopl.io/ch1/fetch\n$. /fetch http://www.w3.org/TR/2006/REC-xml11-20060816 |\n./xmlselect div div h2\nhtml body div div h2: 1 Introduction\nhtml body div div h2: 2 Documents\nhtml body div div h2: 3 Logical Structures\nhtml body div div h2: 4 Physical Structures\nhtml body div div h2: 5 Conformance\nhtml body div div h2: 6 Notation\nhtml body div div h2: A References\nhtml body div div h2: B Definitions for Character Normalization\n...\nExercis e 7.17: Extend xmlselect so thate lements may b es elec ted not justb yn ame, but by",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 233,
      "page_label": "215"
    }
  },
  {
    "page_content": "...\nExercis e 7.17: Extend xmlselect so thate lements may b es elec ted not justb yn ame, but by\ntheir at tr ibutest oo,i nt he m anner o fC SS, s ot hat, f or i ns tance,a ne lementl ike\n<div id=\"page\" class=\"wide\">couldb es elec ted byam atching id or class as wel las its\nname.\nExercis e 7.18:Usingt he token-b ased decoder API, write a program thatw ill reada na rbit rar y\nXML do cument a nd c on str uct a t re e of g ener ic no des t hatr epresentsi t. N odes ar eo ft wo\nkind s: CharData no des represent text str ings, and Element no des represent named elements\nandt heir attr ibutes. Eac he lementn odeh as a slice ofc hi ldno des.\nYo umayﬁ nd the fol low ing declarat ions helpf ul.\nimport \"encoding/xml\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 233,
      "page_label": "215"
    }
  },
  {
    "page_content": "ptg16105617\n216 CHAPTER 7. INTERFACES\ntype Node interface{} // CharData or *Element\ntype CharData string\ntype Element struct {\nType xml.Name\nAttr []xml.Attr\nChildren []Node\n}\n7.15. A Fe wWordso fA dvice\nWh end esig ningan ew package, nov ice Gop rogrammerso ften start byc re ating a set ofi nt er-\nfaces ando nlyl ater deﬁne the con crete typ esthat sat isf ythem. Thi sa ppro ach results in many\ninterfaces, eacho fw hichh as onlyas inglei mp lementation.D on’td ot hat. Suc hi nt erfaces are\nunnecessary abstrac tions;t he yalso havear un-t imec ost. Y ou can restr ict whichm et hodso fa\ntype o rﬁ elds o fas tr uct a re v isible o utside a packag eu singt he e xp ort m echanism (§6.6).\nInterfaces areo nlyn eeded whent here are two orm orec on crete typ esthat mustb ed ealt wit h\nin a unifor mway.\nWe makea ne xception tot hisr ulew hena ni nt erface iss at isﬁed byas inglec on crete typ ebut\nthat typ ecannot livei nt he samep ackagea st he int erface because ofi ts dependencies. I nt hat\ncase, an int erface isag ood way tod ecouplet wo packages.\nBecaus e interfaces ar eu sed in Go o nlyw hent he y ares at isﬁed byt wo o rm oret yp es, they\nne cessarily a bstrac t away f ro m thed et ails o fa ny p ar tic ulari mp lementation.T he r esulti s\nsmal ler in terfaces w it h fe wer,s impler met h ods, o ften j usto ne a sw it h io.Writer or\nfmt.Stringer.S mall int erfaces aree asier tos at isf ywhen new typ es come along . Ag ood rule",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 234,
      "page_label": "216"
    }
  },
  {
    "page_content": "fmt.Stringer.S mall int erfaces aree asier tos at isf ywhen new typ es come along . Ag ood rule\nof thumb for int erface designi s asko nlyf or whaty ou need.\nThisc on cludes our t ouro fm et hodsa nd i nt erfaces. G oh as g re ats up por tfort he o bj e ct-\nor iente d st y le o fp rogramming, b ut t hisd oesn ot m eany ou n eed t ou se i te xc lusively. N ot\never ythingn eed b ea no bj e ct; s tand alone f unctions h avet heir p lace,a sd ou nenc apsulated\ndata typ es. Observet hatt oget her,t he examples in t he ﬁrs tﬁve chapt ers oft hisb ookc al lno\nmore thant wo dozen met hods, li ke input.Scan,a so pp osedt oo rdinar y func tionc al lsl ike\nfmt.Printf.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 234,
      "page_label": "216"
    }
  },
  {
    "page_content": "ptg16105617\n8\nGoroutines and Channels\nConc urrentp rogramming, t he e xpressiono fap rogram as a co mp osition of s everal\nautonomous activ ities, has n ever b eenm orei mp ortantt hani ti st oday.W eb ser versh andle\nre quests for thous and sof clients at once. T ablet andp hone appsr ender animat ions int he user\ninterface whi le simultane ously p er for mingc omputation a nd ne twor k re quests in t he b ack-\nground.E vent radition alb atch pro blems—re ads om edata,c ompute, write som eoutput—us e\nconc urrency toh ide the latency ofI /O operat ions and toe xploit a m oder n comp uter’sm any\nprocessors,w hiche very yearg row in numberb ut not ins peed.\nGo e nables t wo s ty les o fc on cur rentp rogramming. T hisc hapt erp resentsg oroutinesa nd\nch annel s,w hichs up por tcommu nicating sequent ial pro cesses or CSP,am odel ofc on cur rency\nin whichv alues arep assedb et weeni ndep endenta ctiv ities (goroutines) but var iables aref or\nthem ostp ar t conﬁne dto a s inglea ctiv ity.C hapt er9 c ov ers som easpectso ft he more tradi-\ntion alm odel of sh are dmemory multithre ading,w hichw ill bef ami liar if you’ve usedt hreads in\not her mainst reaml angu ages. Chapt er9 a ls opoints out som eimportanth azards and pit fal lso f\nconc urrentp rogrammingt hatw ew on’td elve int oin thisc hapt er.\nEv ent houg hGo’ss up por tforc on cur ren cy iso ne ofi ts gre ats trengt hs, reasoninga bout con-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 235,
      "page_label": "217"
    }
  },
  {
    "page_content": "Ev ent houg hGo’ss up por tforc on cur ren cy iso ne ofi ts gre ats trengt hs, reasoninga bout con-\ncurrentp rogramsi si nherentlyh arder t hana bout s equential o nes, an di nt uit ion sacquired\nfrom sequential programmingm ay at times lead u sa st ray.I ft hisi sy ourﬁ rs tencounterw it h\nconc urrency,w er ecommend spendingal it tle extra timet hin kinga bout the examples in these\ntwoc hapt ers.\n8.1. Goroutines\nIn Go, eachc on cur rentlye xe cut ing activ ity isc al le d agoro utine.C on sider a program thath as\ntwof unctions,o ne thatd oess om ecomp utation and one thatw ritess om eoutput,a nd assume\nthat neither fun ctionc al lst he other.A sequential program may cal l on efunc tiona nd then\n217\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 235,
      "page_label": "217"
    }
  },
  {
    "page_content": "ptg16105617\n218 CHAPTER 8. GOROUTINES AND CHANNELS\ncall the other,b ut inaconc ur rent prog ramwith two orm oreg oroutines, cal lst o both func tions\ncanb ea ctive at the samet ime. W e’ll see suchap rogram in a mom ent.\nIf you haveu sedo perat ings ystemt hreads ort hreads ino ther langu ages, theny ou can assume\nforn ow thatag oroutine iss imi lar toat hread, and you’ll bea blet ow rite cor rec tprog rams.\nThed if ferences bet weent hreads a nd g oroutinesa re e ss ent ial lyq uant itative , notq ualitative ,\nandw ill bed es crib ed in Sec tion 9.8.\nWh enap rogram starts, its onlyg oroutine ist he one thatc al lst he main func tion, sow ec al lit\nthe main goroutine.N ew goroutinesa re cre ate dby the go st atement.S yntactic ally,a go st ate-\nment i sa no rdinar y func tiono rm et hod c al l preﬁxe d by t he k ey word go.A go st atement\ncaus est he functiont ob ec al le d in a newly cre ate dgoro utine.T he go st atement its elf com-\npletes immediate ly:\nf() // call f(); wait for it to return\ngo f() // create a new goroutine that calls f(); don'tw ait\nIn the exampleb elow,t he main goroutine computest he 45t h Fibonacci number. S ince itu ses\nthet er r ibly inefﬁcientr ec ursivea lgor it hm, itr unsf or ana ppre ciablet ime, dur ingw hichw e’d\nli ket op rovide the userw it hav isuali ndic ationt hatt he program iss till running, byd ispl aying\nan animated textual ‘‘spinner.’’\ngopl.io/ch8/spinner\nfunc main() {\ngo spinner(100 * time.Millisecond)\nconst n = 45",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 236,
      "page_label": "218"
    }
  },
  {
    "page_content": "an animated textual ‘‘spinner.’’\ngopl.io/ch8/spinner\nfunc main() {\ngo spinner(100 * time.Millisecond)\nconst n = 45\nfibN := fib(n) // slow\nfmt.Printf(\"\\rFibonacci(%d) = %d\\n\", n, fibN)\n}\nfunc spinner(delay time.Duration) {\nfor {\nfor _, r := range `-\\|/` {\nfmt.Printf(\"\\r%c\", r)\ntime.Sleep(delay)\n}\n}\n}\nfunc fib(x int) int {\nif x < 2 {\nreturn x\n}\nreturn fib(x-1) + fib(x-2)\n}\nAf ter several secon dso fa nimat ion, the fib(45) call retur nsa nd the main func tionp rintsi ts\nresu lt:\nFibonacci(45) = 1134903170\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 236,
      "page_label": "218"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.2. EXAMPLE: CONCURRENT CLOCK SERVER 219\nThe main func tiont henr etur ns. Whent hish appens,a ll goroutinesa re abr uptlyt er minated\nandt he program exits. O ther thanb yr etur ningf ro mmain or exiting the program, there isn o\nprog rammat ic way for oneg oroutine tos topa nother,b ut asw ew ill see later,t here are ways to\ncommunic atew it hag oroutine tor equestt hati ts topi ts elf.\nNo tice how the program ise xpress eda st he composition of t wo aut onom ous activ ities, spin-\nninga nd Fib onacci co mp utation.E achi sw ritt ena sas ep aratef unctionb ut b ot h make\nprog ressc on cur rently.\n8.2. Example: ConcurrentC lock Server\nNetwor kingi san atural domain in whic ht ou se c on cur rency s ince ser verst ypic ally h andle\nmany conne ction sfrom their clients at o nce, eachc lientb einge ss ent ial lyi ndep endento ft he\not hers. I nt hiss ec tion,w e’ll int roduce the net package, whichp rovides the componentsf or\nbuildingn et wor ked c lienta nd s er ver programst hatc ommunic ateo verT CP,U DP,o rU nix\ndomain s ockets. The net/http packagew e’ve beenu sings ince Chapt er1 i sb ui lto nt op of\nfunc tions fro mthe netpackage.\nOurﬁ rs texamplei sas equential clo cks er ver thatw ritest he cur rentt imet ot he cliento ncep er\nsecond:\ngopl.io/ch8/clock1\n// Clock1 is a TCP server that periodically writes the time.\npackage main\nimport (\n\"io\"\n\"log\"\n\"net\"\n\"time\"\n)\nfunc main() {\nlistener, err := net.Listen(\"tcp\", \"localhost:8000\")\nif err != nil {",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 237,
      "page_label": "219"
    }
  },
  {
    "page_content": "package main\nimport (\n\"io\"\n\"log\"\n\"net\"\n\"time\"\n)\nfunc main() {\nlistener, err := net.Listen(\"tcp\", \"localhost:8000\")\nif err != nil {\nlog.Fatal(err)\n}\nfor {\nconn, err := listener.Accept()\nif err != nil {\nlog.Print(err) // e.g., connection aborted\ncontinue\n}\nhandleConn(conn) // handle one connection at a time\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 237,
      "page_label": "219"
    }
  },
  {
    "page_content": "ptg16105617\n220 CHAPTER 8. GOROUTINES AND CHANNELS\nfunc handleConn(c net.Conn) {\ndefer c.Close()\nfor {\n_, err := io.WriteString(c, time.Now().Format(\"15:04:05\\n\"))\nif err != nil {\nreturn // e.g., client disconnected\n}\ntime.Sleep(1 * time.Second)\n}\n}\nThe Listen func tionc re atesa net.Listener,a no bj e ctt hatl istens for incomingc onne ction s\non a n et wor k port,i nt hisc as e TCPp or t localhost:8000.T he l istener’s Accept method\nblocks un til a ni ncomingc onne ction r equesti sm ade,t henr etur nsa net.Conn objec t rep-\nresent ing the conne ction.\nThe handleConnfunc tionh andles one completec lientc onne ction.I nal oop, itw ritest he cur-\nrent time, time.Now(),t ot he client. Since net.Connsatisﬁes the io.Writerinterface,w ec an\nwr ite direc tly toi t. Th el oope nd swhen the write fai ls, mostl ikelyb ecause the clienth as dis-\nconnec ted,a tw hichp oint handleConnclos esitss ide oft he conne ction usingad efer red cal lto\nCloseandg oesb ackt ow aiting for another connec tion request.\nThe time.Time.Format method p rovides a way t of or mat dat ea nd t imei nfor mat ionb y\nexample. I ts argumenti sat empl ate i ndic atingh ow t of or mat a reference tim e, s peciﬁcally\nMon Jan 2 03:04:05PM 2006 UTC-0700.T he reference timeh as eight components( dayo ft he\nwe ek, month,d ay oft he mont h,a nd soo n). A ny col lec tion of themc an appear in the Format\nst ringi na ny order andi nan umbero ff or mats; the selec ted componentso ft he datea nd time",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 238,
      "page_label": "220"
    }
  },
  {
    "page_content": "st ringi na ny order andi nan umbero ff or mats; the selec ted componentso ft he datea nd time\nwi l lbe displ aye din the selec ted for mats. Her ew ea re justu singt he hour,m inut e ,ands econ d\nof t he t ime. T he time packaged eﬁnest empl atesf or m anys tand ard t imef or mats, suc ha s\ntime.RFC1123.T he s amem echanism i su sedi nr everse w henp arsingat imeu sing\ntime.Parse.\nTo conne ctt ot he ser ver,w e’ll need a c lientp rogram sucha s nc (‘‘netc at’’), a s tand ard utilit y\nprog ramform anipu lat ingn et wor kconnec tion s:\n$g ob uild gopl.io/ch8/clock1\n$. /clock1 &\n$n cl ocalhost 8000\n13:58:54\n13:58:55\n13:58:56\n13:58:57\n^C\nThec lientd ispl ays the times entb yt he ser ver eachs econ duntil wei nt err upt the clientw it h\nCont rol-C, whicho nU nix systems ise ch oed as ^Cby the shell. I f ncor netcatis not ins tal le d\non yours ystem, you can use telnet or thiss impleG ov ersiono f netcat that uses net.Dial\nto conne ctt oaT CP ser ver :\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 238,
      "page_label": "220"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.2. EXAMPLE: CONCURRENT CLOCK SERVER 221\ngopl.io/ch8/netcat1\n// Netcat1 is a read-only TCP client.\npackage main\nimport (\n\"io\"\n\"log\"\n\"net\"\n\"os\"\n)\nfunc main() {\nconn, err := net.Dial(\"tcp\", \"localhost:8000\")\nif err != nil {\nlog.Fatal(err)\n}\ndefer conn.Close()\nmustCopy(os.Stdout, conn)\n}\nfunc mustCopy(dst io.Writer, src io.Reader) {\nif _, err := io.Copy(dst, src); err != nil {\nlog.Fatal(err)\n}\n}\nThisp rogram reads d at a from t he c onne ction and w ritesi tt ot he s tand ard out put unt i lan\nend-of-ﬁle co ndit ion or ane rror o cc urs. The mustCopy func tioni sau tilit yus edi ns everal\nexamples in thi ss ec tion.L et’sr un t wo c lients at t he s amet imeo nd if ferentt er minals, one\nshown tot he lef t ando ne tot he rig ht:\n$g ob uild gopl.io/ch8/netcat1\n$. /netcat1\n13:58:54 $. / n e t c a t 1\n13:58:55\n13:58:56\n^C\n13:58:57\n13:58:58\n13:58:59\n^C\n$k illall clock1\nThe killallcommandi saU nix utilit ythat killsa ll pro cessesw it htheg iven name.\nThes econ dclientm ustw aitu nt i ltheﬁ rs t clienti s ﬁnishe dbecaus ethes er ver is sequ ent ial;i t\nde alsw it h on lyo ne clienta tat ime. J usto ne small change isn eeded tom aket he ser ver con-\ncurrent: addingt he go ke yword tot he cal lto handleConn caus ese achc al lto run in its o wn\ngoro utine.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 239,
      "page_label": "221"
    }
  },
  {
    "page_content": "ptg16105617\n222 CHAP\nTER GOROUTINES AND CHANNELS8.\ngopl.io/ch8/clock2\nfor {\nconn, err := listener.Accept()\nif err != nil {\nlog.Print(err) // e.g., connection aborted\ncontinue\n}\ngo handleConn(conn) // handle connections concurrently\n}\nNo w,m ul\ntiplec lients can receive the time at once:\n$g ob uild gopl.io/ch8/clock2\n$. /clock2 &\n$g\nob uild gopl.io/ch8/netcat1\n$. /netcat1\n14:02:54 $. / n e t c a t 1\n14:02:55 14:02:55\n14:02:56 14:02:56\n14:02:57 ^C\n14:02:58\n14:02:59 $. / n e t c a t 1\n14:03:00 14:03:00\n14:03:01 14:03:01\n^C 14:03:02\n^C\n$k illall clock2\nExercis e\n8.1: Mo dif yclock2 to acceptap or \nt numb er, and write a p rogram, clockwall,t hat\nac ts\nas a cliento fs everal clo cks er versa to nce, readingt he times fro meach one and displ aying\nther esults in a table ,a kint ot he w al l of c lo cks seeni ns om e bu sinesso fﬁces. I fy ou h ave\naccesst og eographic ally d istr ibute d comp uters,r un in st ances rem ot ely ; ot her wis e runl ocal\ninst ances ond if ferentp or tsw it hfaket imez on es.\n$T ./clock2 -port 8010 &Z=US/Eastern\n$ TZ\n=Asia/Tokyo  ./\nclock2 -p\nort 8020 &\n$ TZ\n=Europe/London ./clock2 -port 8030 &\n$ cl\nockwall NewYork=localhost:8010 Tokyo=localhost:8020 London=localhost:8030\nExercis e 8.2: Im\nplement a co\nn cur rent File Tran\nsfer Pro tocol (FTP) ser ver. The\n ser ver should \nint\nerpret co\nmmand s fr\nom each clien\nt suc\nh as cd to\n change direc tor y, ls to\n list a dir\nec tor y, ge\nt\nto sendt he \ncontentso faﬁle ,a nd closeto clos",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 240,
      "page_label": "222"
    }
  },
  {
    "page_content": "mmand s fr\nom each clien\nt suc\nh as cd to\n change direc tor y, ls to\n list a dir\nec tor y, ge\nt\nto sendt he \ncontentso faﬁle ,a nd closeto clos \ne thec onne ction.Y ou can use the stand ard ftp\ncomm\nand as the client, orw rite youro wn.\n8.3.\n Example: ConcurrentE cho Server\nThec lo cks er \nver usedo ne goroutine per connec tion.I nt hiss ec tion,w e’ll bui ld an ech oserver\nthat usesm ultipleg oroutinesp er connec tion.M oste ch oserversm erelyw rite whate ver the y\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 240,
      "page_label": "222"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.3. EXAMPLE: CONCURRENT ECHO SERVER 223\nre ad, whichc an bed on ewith this trivialv ersiono f handleConn:\nfunc handleConn(c net.Conn) {\nio.Copy(c, c) // NOTE: ignoring errors\nc.Close()\n}\nAm orei nt erest ing e ch o server mig ht s imulatet he r everb erations o far eale ch o,w it h the\nresp ons e loud at ﬁrs t (\"HELLO!\"), t henm oderate( \"Hello!\")a fter a de lay, t henq uiet\n(\"hello!\")b eforef adingt on ot hing, as in thisv ersiono f handleConn:\ngopl.io/ch8/reverb1\nfunc echo(c net.Conn, shout string, delay time.Duration) {\nfmt.Fprintln(c, \"\\t\", strings.ToUpper(shout))\ntime.Sleep(delay)\nfmt.Fprintln(c, \"\\t\", shout)\ntime.Sleep(delay)\nfmt.Fprintln(c, \"\\t\", strings.ToLower(shout))\n}\nfunc handleConn(c net.Conn) {\ninput := bufio.NewScanner(c)\nfor input.Scan() {\necho(c, input.Text(), 1*time.Second)\n}\n// NOTE: ignoring potential errors from input.Err()\nc.Close()\n}\nWe’ll need t ou pg radeourc lientp rogram sot hati ts ends ter minal inputt ot he ser ver whi le\nalso c opying t he s er ver respons e to t he o ut put,w hichp resentsa nother o pp ortunity t ou se\nconc urrency :\ngopl.io/ch8/netcat2\nfunc main() {\nconn, err := net.Dial(\"tcp\", \"localhost:8000\")\nif err != nil {\nlog.Fatal(err)\n}\ndefer conn.Close()\ngo mustCopy(os.Stdout, conn)\nmustCopy(conn, os.Stdin)\n}\nWhilet he m ain g oroutine r eads t he s tand ard i np uta nd s ends i tt ot he s er ver,as econ d\ngoro utine r eads a nd p rintst he s er ver’sr espons e.W hent he m ain g oroutine encou nt ers t he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 241,
      "page_label": "223"
    }
  },
  {
    "page_content": "goro utine r eads a nd p rintst he s er ver’sr espons e.W hent he m ain g oroutine encou nt ers t he\nendo ft he i np ut, f or e xample, a fter t he use rt yp es Cont rol-D ( ^D)a tt he t er minal (ort he\nequivalentC ontrol-Z onM icros oft Windows), the program stops, eveni ft he other goroutine\nst i l lhasw or kto do. ( We’ll see h ow tom aket he program waitf or bot hsides to ﬁni sh once\nwe’ve int roduce dch annel sin Sec tion 8.4.1.)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 241,
      "page_label": "223"
    }
  },
  {
    "page_content": "ptg16105617\n224 CHAPTER 8. GOROUTINES AND CHANNELS\nIn the sessionb elow,t he client’si np uti sl ef t-aligne dandt he ser ver’sr espons esa re indente d.\nThec lients houts at the ech oserver three times:\n$g ob uild gopl.io/ch8/reverb1\n$. /reverb1 &\n$g ob uild gopl.io/ch8/netcat2\n$. /netcat2\nHello?\nHELLO?\nHello?\nhello?\nIs there anybody there?\nIS THERE ANYBODY THERE?\nYooo-hooo!\nIs there anybody there?\nis there anybody there?\nYOOO-HOOO!\nYooo-hooo!\nyooo-hooo!\n^D\n$killall reverb1\nNo tice thatt he thirds hout fro mthec lienti sn ot dealt wit huntil the secon dshout has petered\nout, whichi sn ot ver yre alist ic. A re ale ch owouldc on sisto ft he comp ositi on of the three inde-\npendents houts. T os imulatei t, we’ll need m oreg oroutines. Again, al lw en eed tod oi sa dd\nthe goke yword ,this timet ot he cal lto echo:\ngopl.io/ch8/reverb2\nfunc handleConn(c net.Conn) {\ninput := bufio.NewScanner(c)\nfor input.Scan() {\ngo echo(c, input.Text(), 1*time.Second)\n}\n// NOTE: ignoring potential errors from input.Err()\nc.Close()\n}\nThea rguments tot he functions tarted by go aree valuate dwhen the go st atement its elf ise xe-\ncute d;t hu sinput.Text()is evaluate din the main goroutine.\nNo wthee ch oes arec on cur renta nd overl ap in time:\n$g ob uild gopl.io/ch8/reverb2\n$. /reverb2 &\n$. /netcat2\nIs there anybody there?\nIS THERE ANYBODY THERE?\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 242,
      "page_label": "224"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.4. CHANNELS 225\nYooo-hooo!\nIs there anybody there?\nYOOO-HOOO!\nis there anybody there?\nYooo-hooo!\nyooo-hooo!\n^D\n$killall reverb2\nAl lthat was required tom aket he ser ver use con cur rency,n ot justt oh andlec onne ction sfrom\nmu ltiplec lients but evenw it hin a singlec onne ction,w as the ins ertiono ft wo goke yword s.\nHo wever in addingt hese key words,w eh ad toc on sider caref ullyt hati ti ss afet oc al lmethods\nof net.Conn conc urrently, whichi sn ot truef or mostt yp es. We’ll dis cusst he cruci al concept\nof concur rency saf ety in the next chapt er.\n8.4. Channels\nIf g oroutinesa re t he a ctiv ities o fac on cur rentG op rogram, ch ann els aret he c onne ction s\nbetweent hem. A ch annel isac ommunic ationm echanism thatl ets one goroutine sendv alues\nto a nother g oroutine.E achc hannel i sac on duit for values o fap ar tic ulart yp e,c al le dthe\nch annel’s el ement t ype.T he t yp e of a c hannel who se e lements hav et yp e int is w ritt en\nchan int.\nTo cre ate a channel,w eu se the bui lt-inmakefunc tion:\nch := make(chan int) // ch has type 'chan int'\nAs wit hmaps, a channel isare ference to the dat ast ruc turec re ate dby make.W henw ec opya\nch annel orp asso ne asa na rgumentt oaf unction, wea re copying a r eference,s oc al ler and\ncallee refer tot he samed at ast ruc ture. A sw it hot her reference typ es,thez erov alue ofac han-\nnel is nil.\nTw och annel sof the samet yp emayb ec ompare dusing ==.T he comparisoni st ruei fb ot hare",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 243,
      "page_label": "225"
    }
  },
  {
    "page_content": "nel is nil.\nTw och annel sof the samet yp emayb ec ompare dusing ==.T he comparisoni st ruei fb ot hare\nreferences tot he samec hannel dat ast ruc ture. A ch annel may also bec ompare d to nil.\nAc hannel h as t wo p rincip alo perat ions, send and re ceive,c ol lec tive lyk nown a s\ncommu nicati ons.A send statement transmits a value f ro mon egoro utine,t hrough the chan-\nnel,t oa nother goroutine exe cut ing a c or respondingr eceive expression. B ot h op erat ions are\nwr itt enu singt he <- op erator.I nas ends tatement,t he <- separates the channel and value op-\nerands.I nar eceive expression, <-precedes the channel operand. A re ceive expressionw hose\nresu lti sn ot usedi sav alid statement.\nch <- x // a send statement\nx=< -ch // a receive expression in an assignment statement\n<-ch // ar eceive statement; result is discarded\nChannel ssupp ort a thirdo perat ion,cl ose,w hichs ets a ﬂag indic atingt hatn om orev alues will\never bes ento nt hisc hannel;s ubsequenta tt emp tst os endw ill panic. R eceive operat ions ona\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 243,
      "page_label": "225"
    }
  },
  {
    "page_content": "ptg16105617\n226 CHAPTER 8. GOROUTINES AND CHANNELS\nclos edc hannel yield the values thath aveb eens entu nt i lno more values arel ef t; anyr eceive\nop erat ions there after comp letei mmediate lya nd yield the zerov alue oft he channel’se lement\ntype.\nTo clos eac hannel,w ec al ltheb ui lt-inclosefunc tion:\nclose(ch)\nAc hannel cre ate dwith a simplec al lto make is cal le d anunbuffered ch annel,b ut make accepts\nan opt ion als econ dargument, an integerc al le dthec hannel’s capacity.I ft he cap acity isn on-\nzero, makecreatesabu ffered ch annel.\nch = make(chan int) // unbuffered channel\nch = make(chan int, 0) // unbuffered channel\nch = make(chan int, 3) // buffered channel with capacity 3\nWe’ll look at unbuf fered channel sﬁrs tandb uf fered channel sin Sec tion 8.4.4.\n8.4.1. Unbuffered Channels\nAs endo perat iono na nu nbuf fered c hannel b lo cks the s endingg oroutine u nt i lanot her\ngoro utine exe cut esaco rrespondingr eceive ont he samec hannel,a tw hichp oint the value is\ntransmitt eda nd b ot h goro utinesm ay cont inue. C onvers ely, if t he r eceive o perat ionw as\nattemp ted ﬁrs t,t he receiving goro utine isb lo cke duntil another goroutine per for msas endo n\nthes amec hannel.\nCommunic ationo vera nu nbuf fered channel causest he sendinga nd receiving goro utinest o\nsy nchro niz e.B ecause oft his, unbuffered channel sares om etimesc al le dsy nchro nou sch annel s.\nWh enav alue iss ento na nu nbuf fered c hannel,t he receipt oft he v alue happ ens before the",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 244,
      "page_label": "226"
    }
  },
  {
    "page_content": "Wh enav alue iss ento na nu nbuf fered c hannel,t he receipt oft he v alue happ ens before the\nre awakeningo ft he sen din gg oroutine.\nIn dis cussions ofc on cur rency,w henw es ay xh ap pens beforey ,w ed on’tm eanm erelyt hat x\noccurs e arlier in tim et han y;w em eant hati ti sg uarante e d to dos oa nd t hata ll i ts p rior\nef fec ts, such as updates tov ar iables, arec ompletea nd thaty ou may relyo nt hem.\nWh en x neit her happens before y nora fter y,w es ay that xi sc on cur rentw it hy.T hisd oesn’t\nme ant hat x and y aren ecessarily simultane ous,m erelyt hatw ec annot assume anythinga bout\ntheir order ing. A sw e’ll see int he next chapt er, it’sn ecessary too rder certain eventsd ur ingt he\nprog ram’se xe cut ion toa void t he p ro blemst hata rise w hent wo goro utinesa ccesst he s ame\nvar iable conc urrently.\nThec lientp rogram in Sec tion 8.3 copies inputt ot he ser ver in its main goroutine,s ot he client\nprog ram terminates as s oona st he inp uts treamc los es, even if t he backg round goroutine is\nst i l lwork ing . To maket he p rogram wai tf or t he b ackg round g oroutine t oc ompleteb efore\nexiting , we use a channel tos ynchro nize the two goro utines:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 244,
      "page_label": "226"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.4. CHANNELS 227\ngopl.io/ch8/netcat3\nfunc main() {\nconn, err := net.Dial(\"tcp\", \"localhost:8000\")\nif err != nil {\nlog.Fatal(err)\n}\ndone := make(chan struct{})\ngo func() {\nio.Copy(os.Stdout, conn) // NOTE: ignoring errors\nlog.Println(\"done\")\ndone <- struct{}{} // signal the main goroutine\n}()\nmustCopy(conn, os.Stdin)\nconn.Close()\n<-done // wait for background goroutine to finish\n}\nWh ent he u serc los es thes tand ard inp uts tream, mustCopy returnsa nd the m ain goroutine\ncalls conn.Close(),c losingb ot hhalves oft he networ kconnec tion.C losingt he write half of\nthec onne ction causest he ser ver tos ee ane nd-of-ﬁle condit ion.C losingt he readh alf causes\ntheb ackg round goroutine’sc al lto io.Copy to retur n a ‘‘re adf ro mclos edc onne ction’’er ror,\nwhichi sw hy we’ve remov edt he error log ging; Exercis e8.3 sug gests a betters olut ion.( No tice\nthat the gost atement cal lsal it eral function, a common con str uction.)\nBefore itr etur ns, the backg round goroutine logs a mes sage ,then sen ds a v alue ont he done\nch annel.T he m ain g oroutine w aits un til i th as r eceive d this v alue bef orer etur ning. A sa\nresu lt, the program always logs the \"done\"mess age beforee xiting .\nMess agess ento verc hannel s have two i mp ortanta sp ects. Eac hm essage h as a value ,b ut\nsometimest he f ac t of commu nic ationa nd the mome nt a tw hichi to cc ursa re j usta s",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 245,
      "page_label": "227"
    }
  },
  {
    "page_content": "sometimest he f ac t of commu nic ationa nd the mome nt a tw hichi to cc ursa re j usta s\nimportant. W ec al lmess ages events when wew isht os tresst hisa sp ect.W hent he event car-\nries noa ddition ali nfor mat ion, thati s, its solep ur pos eis synchro nizat ion, we’ll emp hasize this\nby usingac hannel whose elementt yp eis struct{},t houg hit’sc ommont ou se a c hannel of\nboolor intfort he samep ur pos e sincedone <- 1is shorter than done <- struct{}{}.\nExercis e 8.3:In netcat3,t he int erface value connhast he con crete typ e*net.TCPConn,w hich\nrepres ents a TCP connec tion.A TCPc onne ction con sists oft wo halvest hatm ay b ec los ed\nindep endentlyu singi ts CloseRead and CloseWrite methods. M odif ythem ain goroutine of\nnetcat3 to clos e on lyt he write half oft he conne ction sot hatt he program will c ontinuet o\npr int the ﬁnale ch oes fro mthe reverb1 server evena fter the stand ard inp uth as beenc los ed.\n(D oingt hisf or the reverb2server ish arder ;seeE xercis e8.4.)\n8.4.2. Pipelines\nChannel scanb eu sedt oc onne ctg oroutinest oget her sot hatt he out put of onei st he inp utt o\nanot her.T hisi sc al le d apip elin e.T he program below con sists oft hree goroutinesc onne cte d\nby two channel s, as shown sch ematically in Figure8 .1.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 245,
      "page_label": "227"
    }
  },
  {
    "page_content": "ptg16105617\n228 CHAPTER 8. GOROUTINES AND CHANNELS\nFigure 8.1. At hree-stage pip eline.\nTheﬁ rs tgoro utine, counter,g enerates the int egers 0,1 ,2 ,. .., ands ends themo verac hannel to\nthes econ dgoro utine, squarer,w hichr eceivese achv alue,s qu aresi t, ands ends the resulto ver\nanot her channel tot he thirdg oroutine, pr int er,w hichr eceivest he squ are dvalues andp rints\nthem. F or clarity oft hise xample, weh avei nt ent ion allyc hosenv er y simplef unctions,t houg h\nof cours e they a re too c omputation allyt rivialt ow ar rantt heir own g oroutinesi nar ealist ic\nprog ram.\ngopl.io/ch8/pipeline1\nfunc main() {\nnaturals := make(chan int)\nsquares := make(chan int)\n// Counter\ngo func() {\nfor x := 0; ; x++ {\nnaturals <- x\n}\n}()\n// Squarer\ngo func() {\nfor {\nx: =< -naturals\nsquares <- x * x\n}\n}()\n// Printer (in main goroutine)\nfor {\nfmt.Println(<-squares)\n}\n}\nAs you mig hte xp ect,t he program printst he i nﬁnite s er ies of s qu ares0 ,1 ,4 ,9 ,a nd s oo n.\nPipelines like thism ay bef ound inl on g-r unnings er ver programsw here channel sareu sedf or\nlifelon gcommunic ationb et weeng oroutinesc ontainingi nﬁnite loops. B ut what if we wantt o\nsend onlyaﬁni te numbero fv alues through the pip eline?\nIf the sender knows thatn of ur therv alues will everb es ento nac hannel,i ti su sefult oc om-\nmunic atet hisf ac t to t he r eceiverg oroutiness ot hatt he y cans topw aiting . Thisi sa ccom-\nplishe dby cl osing thec hannel usingt he bui lt-inclosefunc tion:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 246,
      "page_label": "228"
    }
  },
  {
    "page_content": "plishe dby cl osing thec hannel usingt he bui lt-inclosefunc tion:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 246,
      "page_label": "228"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.4. CHANNELS 229\nclose(naturals)\nAf ter a channel has beenc los ed, any fur thers endo perat ions oni tw ill panic. A fter the clos ed\nch annel has been drai ned,t hati s, aftert he lasts ente lementh as beenr eceive d,a ll subsequent\nre ceive operat ions will pro ceed wit houtb lo cking but will yield a zerov alue.C losingt he natu-\nralsch annel above wouldc ause the squ arer’sl oopt os pina si tr eceivesan ever-endings tream\nof zerov alues, andt os endt hese zeros tot he print er.\nTherei sn ow ay tot estd irec tly whether a channel has beenc los ed, but there isavar ian to ft he\nre ceive o perat iont hatp ro duces t wo r esults: t he r eceive d ch annel el ement, p lu s ab oole an\nvalue,c onvent ion allyc al le dok,w hichi s true foras uccessf ulr eceive and false forar eceive\non a clos eda nd drained channel.U singt hisf eature ,we can modif ythes qu arer’sl oopt os top\nwhen the naturalsch annel isd rained and clos ethe squaresch annel int ur n.\n// Squarer\ngo func() {\nfor {\nx, ok := <-naturals\nif !ok {\nbreak // channel was closed and drained\n}\nsquares <- x * x\n}\nclose(squares)\n}()\nBecaus e thes yntaxa bove i sc lumsya nd t hisp attern i sc ommon, t he l angu agel ets u su se a\nrange lo opt oi terateo verc hannel sto o.T hisi sam orec onvenients yntaxf or receiving all the\nvalues sento nac hannel and ter minat ingt he loopa fter the lasto ne.\nIn the pip elineb elow,w hent he count erg oroutine ﬁnishesi ts loop after 100 elements, itc los es",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 247,
      "page_label": "229"
    }
  },
  {
    "page_content": "In the pip elineb elow,w hent he count erg oroutine ﬁnishesi ts loop after 100 elements, itc los es\nthe naturals ch annel,c ausingt he squ arert o ﬁni sh its loop and clos ethe squares ch annel.\n(Inam orec omplex program, itm ig htm akes ense for the count era nd squ arerf unctions to\ndefer t he c al lst o close at t he outset.) Final ly, the main goroutine ﬁnishesi ts lo op and the\nprog ram exits.\ngopl.io/ch8/pipeline2\nfunc main() {\nnaturals := make(chan int)\nsquares := make(chan int)\n// Counter\ngo func() {\nfor x := 0; x < 100; x++ {\nnaturals <- x\n}\nclose(naturals)\n}()\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 247,
      "page_label": "229"
    }
  },
  {
    "page_content": "ptg16105617\n230 CHAPTER 8. GOROUTINES AND CHANNELS\n// Squarer\ngo func() {\nfor x := range naturals {\nsquares <- x * x\n}\nclose(squares)\n}()\n// Printer (in main goroutine)\nfor x := range squares {\nfmt.Println(x)\n}\n}\nYo une e dn’tc los e ever y ch annel whe ny ou’ve ﬁnishe d with i t. It ’so nlyn ecessary t oc los e a\nch annel wheni ti si mp ortantt ot el lther eceiving goro utinest hata ll dat ahave beens ent. A\nch annel t hatt he g arb agec ol lec tor d eter mines tob eu nreach ablew ill h avei ts res ources\nre claimed whether orn ot iti sc los ed. ( Don’tc onfuse t hisw it hthec los eop erat ionf or open\nﬁles. It is importantt oc al lthe Closemethod one very ﬁle wheny ou’ve ﬁnishe dwith it.)\nAt tempt ing toc los e an already-clos edc hannel causesap anic, as does closin gan il channel.\nClosingc hannel shasa nother use asab ro adc astm echanism, whichw e’ll cov er in Sec tion 8.9.\n8.4.3. Unidirectional Channel Types\nAs programsg row, iti sn atural tob re aku pl arge functions int osmal lerpieces. Our p re vious\nexampleu sedt hree goroutines, communic atingo vert wo channel s,w hichw erel ocal variables\nof main.T he program natural lyd iv ides into three functions:\nfunc counter(out chan int)\nfunc squarer(out, in chan int)\nfunc printer(in chan int)\nThe squarer func tion, sitt ing int he midd leof the pip eline, takes two parameters, the inp ut\nch annel and the o ut put channel.B ot h have t he s amet yp e,b ut t heir in tended u sesa re",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 248,
      "page_label": "230"
    }
  },
  {
    "page_content": "ch annel and the o ut put channel.B ot h have t he s amet yp e,b ut t heir in tended u sesa re\nopp osite: in is onlyt ob er eceive dfrom,a nd out is onlyt ob es entt o. T he names in and out\nconv eyt hisi nt ent ion,b ut s till,n ot hingp re vents squarer from s endingt o in or r eceiving\nfrom out.\nThisa rrangement ist ypic al.W henac hannel iss up plie d as a functionp arameter,i ti sn early\nalways wit hthei nt ent thati tb eu sede xc lusivelyf or sendingo re xc lusivelyf or receiving .\nTo documentt hisi nt ent and pre ventm isus e,t he Got yp e systemp rovides unidirec tional ch an-\nnel t yp es that expos e on lyo ne o rt he o ther o ft he s enda nd r eceive o perat ions.T he t yp e\nchan<- int,ase nd-only ch annel of int,a llowss ends but not receives. C onvers ely,t he typ e\n<-chan int,are c eive-only ch annel of int,a llowsr eceivesb ut not sends.( Thep osition of the\n<- ar row r el ative t ot he chan ke yword i sam nemonic.) Vio lation s of t hisd is cip linea re\ndetec ted atc ompi let ime.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 248,
      "page_label": "230"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.4. CHANNELS 231\nSincet he close op erat iona ss ertst hatn om ores ends will occ uron a channel,o nlyt he send-\ningg oroutine isi nap osition toc al lit,a nd for thisr easoni ti sac ompi le-t imee rror toa tt emp t\nto clos ear eceive-onlyc hannel.\nHere’st he squ aring pip elineo ncem ore, thist imew it hunidirec tion alc hannel typ es:\ngopl.io/ch8/pipeline3\nfunc counter(out chan<- int) {\nfor x := 0; x < 100; x++ {\nout <- x\n}\nclose(out)\n}\nfunc squarer(out chan<- int, in <-chan int) {\nfor v := range in {\nout <- v * v\n}\nclose(out)\n}\nfunc printer(in <-chan int) {\nfor v := range in {\nfmt.Println(v)\n}\n}\nfunc main() {\nnaturals := make(chan int)\nsquares := make(chan int)\ngo counter(naturals)\ngo squarer(squares, naturals)\nprinter(squares)\n}\nThec al lcounter(naturals) implicitlyc onverts naturals,a v alue oft yp echan int,t ot he\ntype oft he parameter, chan<- int.T he printer(squares) call doesas imi lar implicitc on-\nversiont o <-chan int.C onversions f ro m bidirec tion alt ou nidirec tion alc hannel t yp es are\npermit ted i na ny assig nment. Therei sn og oing b ack, how ever: o ncey ou haveav alue ofa\nunidirec tion alt yp e such a s chan<- int,t here i sn ow ay t oo bt ain f ro m it a v alue o ft yp e\nchan intthat referst ot he samec hannel dat ast ruc ture.\n8.4.4. Buffered Channels\nAb uf fered channel has a queue ofe lements. Th eq ueue’sm aximum size isd eter mined wheni t",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 249,
      "page_label": "231"
    }
  },
  {
    "page_content": "8.4.4. Buffered Channels\nAb uf fered channel has a queue ofe lements. Th eq ueue’sm aximum size isd eter mined wheni t\nis cre ate d,by the cap acity argumentt o make.T he statement below cre atesab uf fered channel\ncapableo fh oldingt hree string values. Figur e8 .2 isag raphic alrepres entation of ch andt he\nch annel tow hichi tr efers.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 249,
      "page_label": "231"
    }
  },
  {
    "page_content": "ptg16105617\n232 CHAPTER 8. GOROUTINES AND CHANNELS\nch = make(chan string, 3)\nFigure 8.2. An emp tyb uf fered channel.\nAs endo perat iono nab uf fered c hannel i ns ertsa ne lementa tt he b acko ft he queue,a nd a\nre ceive operat ionr emov es an elementf ro mthef ro nt. I ft he channel isf ull,t he sendo perat ion\nblocks its goroutine unt i lsp ace ism ade availableb ya nother goroutine’sr eceive . Conv ers ely,i f\nthec hannel ise mp ty, a receive operat ionb lo cks until a value iss entb ya nother goroutine.\nWe can sendu pt ot hree values ont hisc hannel wit houtt he goroutine blo cking:\nch <- \"A\"\nch <- \"B\"\nch <- \"C\"\nAt thisp oint,t he channel isf ull (Figure8 .3), andaf ourths ends tatement wou ldb lo ck.\nFigure 8.3. Af ull buf fered channel.\nIf wer eceive one value,\nfmt.Println(<-ch) // \"A\"\nthec hannel isn either full nor emp ty( Figure8 .4), soe it her a sendo perat iono rar eceive oper-\nat ionc ou ldp ro ceed wit houtb lo cking . In thisw ay,t he channel’sb uf fer decoup les the sending\nandr eceiving goro utines.\nFigure 8.4. Ap ar tiallyf ull buf fered channel.\nIn t he u nlikelye vent t hatap rogram n eedst ok nowt he c hannel’sb uf fer cap acity,i tc an be\nobtained byc al lingt he bui lt-incapfunc tion:\nfmt.Println(cap(ch)) // \"3\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 250,
      "page_label": "232"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.4. CHANNELS 233\nWh ena pp lie d to a ch annel,t he b ui lt-in len func tionr etur nst he n umbero fe lements cur-\nrent lyb uf fered.S ince in a conc urrentp rogram thisi nfor mat ioni sl ikelyt ob es tale as soona s\nit isr et rie ved,i ts value i sl imite d,buti tc ou ldc on ceivably beu sefuld ur ingf au ltd iagnosiso r\nperfor mance opt imizat ion.\nfmt.Println(len(ch)) // \"2\"\nAf ter two morer eceive operat ions the channel ise mp tya gain, andaf ourthw ou ldb lo ck:\nfmt.Println(<-ch) // \"B\"\nfmt.Println(<-ch) // \"C\"\nIn thise xample, the senda nd receive operat ions were all p er for med byt he sameg oroutine,\nbuti nr ealp rogramst he yareu su allye xe cut edb yd if ferentg oroutines. N ov ices ares om etimes\ntemp ted tou se buf fered channel swithin a sin gleg oroutine asaq ueue,l ured byt heir ple as-\ninglys imples yntax, b ut t hisi sam istake . Channel s ared eeply c onne cte d to g oroutine\nsche duling, and wit houta nother goroutine receiving fro mthec hannel,as ender—an dp erhaps\nthew hole program—ri sksb ecomingb lo cke d fore ver.I fa ll you need isas impleq ueue,m ake\non eusingas lice.\nThee xampleb elow shows an ap plic ationo fab uf fered channel.I tm akes paral lelr equests to\nthre e mi rro rs,t hati s, e quivalentb ut g eographic ally d istr ibute d servers. I ts ends t heir\nresp ons eso verab uf fered channel,t henr eceivesa nd retur nso nlyt he ﬁrs tresp ons e,w hichi s\ntheq uickest",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 251,
      "page_label": "233"
    }
  },
  {
    "page_content": "resp ons eso verab uf fered channel,t henr eceivesa nd retur nso nlyt he ﬁrs tresp ons e,w hichi s\ntheq uickest \none toa rrive . Thus mirroredQuery returnsar esulte venb eforet he two slower\nserversh aver esponded.( In cidentally, it’sq uite nor mal for several goroutinest os endv alues to\nthes amec hannel con cur rently, as in thise xample, ort or eceive fro mthes amec hannel.)\nfunc mirroredQuery() string {\nresponses := make(chan string, 3)\ngo func() { responses <- request(\"asia.gopl.io\") }()\ngo func() { responses <- request(\"europe.gopl.io\") }()\ngo func() { responses <- request(\"americas.gopl.io\") }()\nreturn <-responses // return the quickest response\n}\nfunc request(hostname string) (response string) { /* ... */ }\nHadw eu seda nu nbuf fered channel,t he two slowerg oroutinesw ou ldh aveg ot ten stuck trying\nto s endt heir res pons eso nac hannel f ro m whichn og oroutine w ill e verr eceive . Thiss it-\nuation,c al le d agoro utine leak,w ou ldb eab ug . Un likeg arb agev ar iables, leaked goroutinesa re\nnota ut omat ical lyc ol lec ted,s oi ti si mp ortantt om akes uret hatg oroutinest er minatet hem-\nselves whenn ol on g ern eeded.\nThec hoice bet weenu nbuf fered and buf fered channel s,a nd the choice ofab uf fered channel’s\ncapacity,m ay b ot h af fec t thec or rec tnesso fap rogram. U nbuf fered c hannel s give s tron g er\nsy nchro nizat iong uarante esb ecause ev er y send o perat ioni ss ynchro nize d with i ts co r-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 251,
      "page_label": "233"
    }
  },
  {
    "page_content": "sy nchro nizat iong uarante esb ecause ev er y send o perat ioni ss ynchro nize d with i ts co r-\nresp ondingr eceive;w it h buffered c hannel s,t hese o perat ions a re decoupled.A ls o,w henw e\nknow anu pp erb ound ont he numbero fv alues thatw ill bes ento nac hannel,i t’sn ot unu sual\nto c re ate a b uf fered c hannel o ft hats ize an dp er for m al l thes ends b eforet he ﬁ rs t value is\nre ceive d.F ai luret oa llocates ufﬁcientb uf fer cap acity wou ldc ause the program tod eadlock.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 251,
      "page_label": "233"
    }
  },
  {
    "page_content": "ptg16105617\n234 CHAPTER 8. GOROUTINES AND CHANNELS\nChannel buf fer ingm ay also affec tprog ramperfor mance.I magine three cooks in a cakes hop,\non ebaking ,on eicing, and one ins cribing eachc akeb eforep assingi to nt ot he next cook int he\nassemb l yline. I nak it c hen wit hlitt les pace,e achc ookt hath as ﬁnishe dac akem ustw aitf or\nthen ext cook tob ecom ere ady toa ccepti t; thisr ende zvou sis analogou sto communic ation\nov er an unbuf fered channel.\nIf there iss pace for onec akeb et weene achc ook, a co ok may place a ﬁni she dcake there and\nimmediate lys tart wor k on the next; thisi sa nalogou sto a buf fered channel wit hcapacity 1.S o\nlong ast he cooks wor kat aboutt he samer ateo na verage, mosto ft hese handovers pro ceed\nquickly, smo othingo ut t ransientd if ferences in their res pectiver ates. M ores pace bet ween\nco oks—la rgerb uf fers—ca ns mo oth o ut bi gger transien tv ar iat ions i nt heir rates w it hout\nst allingt he a ss emb l yline, s ucha sh appens w heno ne c ookt akes a s hort b re ak, t henl ater\nrushest oc atch up.\nOn the other hand, ifa ne arlier stage oft he ass emb l ylinei sc on sistent lyf astert hant he fol low-\nings tage , theb uf fer bet weent hemw ill s pend mo st o fi ts tim ef ull.C onvers ely,i ft he l ater\nst age isf aster, the buf fer will usu allyb ee mp ty. A buffer provides nob eneﬁt in thisc as e.\nThea ss emb l ylinem et aphori sau sefulo ne for channel sandg oroutines. F or example, i ft he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 252,
      "page_label": "234"
    }
  },
  {
    "page_content": "Thea ss emb l ylinem et aphori sau sefulo ne for channel sandg oroutines. F or example, i ft he\nsecond stage ism oree laborate, a singlec ookm ay not bea blet ok eepu pw it hthes up ply fro m\ntheﬁ rs tco oko rm eett he demandf ro mthet hird. T os olvet he pro blem, wec ou ldh irea nother\nco okt oh elpt he secon d,p er for mingt he samet askb ut wor kingi ndep endently. T hisi sa nalo-\ngous toc re ating another goroutine communic atingo vert he samec hannel s.\nWe don’th aves pace tos howi th ere, but the gopl.io/ch8/cake packages imulates thisc ake\nshop, wit hseveral parametersy ou can var y. I ti ncludes benchmarks( §11.4) f or a f ew oft he\nscenar ios des crib eda bove .\n8.5. Looping in Parallel\nIn thiss ec tion,w e’ll explore som ecommon con cur rency p atternsf or exe cut ing all the itera-\ntion s of a l oopi np aral lel. W e’ll c on sider t he p ro blem o fp ro ducingt humbnail-size images\nfrom a s et o ff ull-size o nes. The gopl.io/ch8/thumbnail packagep rovides an ImageFile\nfunc tiont hatc an s cale a sin glei mage . We w on’ts howi ts im plementation but it c an be\ndown loade dfrom gopl.io.\ngopl.io/ch8/thumbnail\npackage thumbnail\n// ImageFile reads an image from infile and writes\n// a thumbnail-size version of it in the same directory.\n// It returns the generated file name, e.g., \"foo.thumb.jpg\".\nfunc ImageFile(infile string) (string, error)\nThep rogram below loops overal isto fi mage ﬁle names an dp ro duces a t humbnail for each\non e:\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 252,
      "page_label": "234"
    }
  },
  {
    "page_content": "Thep rogram below loops overal isto fi mage ﬁle names an dp ro duces a t humbnail for each\non e:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 252,
      "page_label": "234"
    }
  },
  {
    "page_content": "ptg16105617\nS\nECTION 8.5. LOOPING IN PARALLEL 235\ngopl.io/ch8/thumbnail\n// makeThumbnails makes thumbnails of the specified files.\nfunc makeThumbnails(filenames []string) {\nfor _, f := range filenames {\nif _, err := thumbnail.ImageFile(f); err != nil {\nlog.Println(err)\n}\n}\n}\nObviou \nsly the order in whichw ep ro cesst he ﬁles doesn’tm atter, since eachs calingo perat ion\nis indep endento fa ll the others. P ro blemsl iket hist hatc on siste nt ire lyo fs ubproblemst hat\narec ompletelyi ndep endento fe acho ther ared es crib eda s embarrassingly paral lel.E mb arrass-\ninglyp aral lelp ro blemsa re the easiestk indt oi mp lementc on cur rentlya nd enj oyp er for mance\nthat scales linearlyw it hthea mounto fp aral lelism.\nLet’se xe cut e al l thes e op erat ions i np aral lel, t here byh idingt he l atency o ft he ﬁle I/O and\nusingm ultipleC PUsf or the i mage-s calingc omputation s.O ur ﬁrs t attemp tat a co nc urrent\nversionj usta ddsa goke \nyword . We’ll ignoree rror sforn ow and addresst heml ater.\n// NOTE: incorrect!\nfunc makeThumbnails2(filenames []string) {\nfor _, f := range filenames {\ngo thumbnail.ImageFile(f) // NOTE: ignoring errors\n}\n}\nTh\nis v\nersion r\nuns r\neally f\nast—to o fas\nt,  in  fac\nt,  s\nince  i\nt t\nakes  le\nss t\nime t\nhan t\nhe  o\nriginal,  e\nven \nw\nhen the slice of ﬁle \nnames cont ains o\nnly a s\ningle e\nlement.  I\nf t\nhere’s n\no p\naral lelism, how can \n        t\nhe c\non cur rent v\nersion p\nossibly r\nun fas\nter?  The answer is that m\nakeThumbnails2 r\neturns",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 253,
      "page_label": "235"
    }
  },
  {
    "page_content": "f t\nhere’s n\no p\naral lelism, how can \n        t\nhe c\non cur rent v\nersion p\nossibly r\nun fas\nter?  The answer is that m\nakeThumbnails2 r\neturns \nb\nefore it h\nas ﬁni\nshe d do\ning w\nhat i\nt w\nas sup pos ed t\no d\no.  I\nt s\ntarts a\nll the goroutines, one per ﬁle \nn\name, b\nut doesn’t wai\nt f\nor them t\no ﬁni\nsh.\nThere i\ns n\no dir\nec t wa\ny  t\no wai\nt un\nt i l a g\noroutine  h\nas ﬁni\nshe d, b\nut  w\ne c\nan  c\nhange  t\nhe  i\nnner \ng\noro utine  t\no r\nep ort  i\nts  c\nomp let ion t\no t\nhe  o\nut er g\noroutine  b\ny s\nending a\nn e\nvent  o\nn a s\nhare d\nch \nannel.S ince wek nowt hatt here are exac tly len(filenames) inner \ngoroutines, t he out er\ngoro utine need onlyc ount thatm anye ventsb eforei tr etur ns:\n// makeThumbnails3 makes thumbnails of the specified files in parallel.\nfunc makeThumbnails3(filenames []string) {\nch := make(chan struct{})\nfor _, f := range filenames {\ngo func(f string) {\nthumbnail.ImageFile(f) // NOTE: ignoring errors\nch <- struct{}{}\n}(f)\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 253,
      "page_label": "235"
    }
  },
  {
    "page_content": "ptg16105617\n236 CHAPTER 8. GOROUTINES AND CHANNELS\n// Wait for goroutines to complete.\nfor range filenames {\n<-ch\n}\n}\nNo tice thatw ep assedt he value of f as an explici ta rgumentt ot he lit eral functioni ns teado f\nusingt he declarat iono f ffrom the enclosing forlo op:\nfor _, f := range filenames {\ngo func() {\nthumbnail.ImageFile(f) // NOTE: incorrect!\n// ...\n}()\n}\nRe call t he p ro blem o fl oopv ar iable capture i nside an an onymou s func tion, descr ibedi n\nSection5 .6.1. A bove ,thes inglev ar iablef is share dby all the anony mou sfunc tionv alues and\nup dated bys uccessive loopi terat ions.B yt he timet he newg oroutiness tart exe cut ing the lit-\neral function, the for lo opm ay haveu pdated f ands tarted another iterat iono r( more likely)\nﬁnishe dentire ly, sow hent hese goroutinesr eadt he value of f,t he yal lobservei tt oh avet he\nvalue oft he ﬁnale lemento ft he slice.B ya ddinga ne xplicitp arameter,w ee ns ure thatw eu se\nthev alue of fthat isc ur rentw hent he gost atement ise xe cut ed.\nWh ati fw ew antt or etur n values fro meach wor ker goroutine tot he main one?I ft he cal lto\nthumbnail.ImageFile fai lst oc re ate a ﬁle,i tr etur ns an err or.T he ne xt versio no f\nmakeThumbnailsreturnst he ﬁrs ter ror it receivesf ro manyo ft he scalingo perat ions:\n// makeThumbnails4 makes thumbnails for the specified files in parallel.\n// It returns an error if any step failed.\nfunc makeThumbnails4(filenames []string) error {\nerrors := make(chan error)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 254,
      "page_label": "236"
    }
  },
  {
    "page_content": "// It returns an error if any step failed.\nfunc makeThumbnails4(filenames []string) error {\nerrors := make(chan error)\nfor _, f := range filenames {\ngo func(f string) {\n_, err := thumbnail.ImageFile(f)\nerrors <- err\n}(f)\n}\nfor range filenames {\nif err := <-errors; err != nil {\nreturn err // NOTE: incorrect: goroutine leak!\n}\n}\nreturn nil\n}\nThisf unctionh as a subtleb ug . Wh eni te ncount ers the ﬁrs tnon-ni l er ror,i tr etur nst he error\nto t he c al ler,l eaving n og oroutine d rainingt he errors ch annel.E achr emainingw or ker\ngoro utine w ill b lo ckf orever w heni tt ries t os endav alue o nt hatc hannel,a nd w ill n ever\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 254,
      "page_label": "236"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.5. LOOPING IN PARALLEL 237\nterminate. T hiss it uat ion, a goroutine leak( §8.4.4), may cau se the whole program tog et stuck\nor tor un out of memor y.\nThes implests olut ion ist ou se a b uf fered c hannel w it h sufﬁcientc ap acity t hatn ow or ker\ngoro utine w ill b lo ckw heni ts ends a m essage . (Ana lt ernat ive s olut ion ist oc re ate a nother\ngoro utine tod rain the channel whi lethem ain goroutine retur nst he ﬁrs ter ror wit houtd el ay.)\nThen ext versiono f makeThumbnails us esab uf fered channel tor etur nthen ames oft he gen-\nerated image ﬁles along wit hanye rror s.\n// makeThumbnails5 makes thumbnails for the specified files in parallel.\n// It returns the generated file names in an arbitrary order,\n// or an error if any step failed.\nfunc makeThumbnails5(filenames []string) (thumbfiles []string, err error) {\ntype item struct {\nthumbfile string\nerr error\n}\nch := make(chan item, len(filenames))\nfor _, f := range filenames {\ngo func(f string) {\nvar it item\nit.thumbfile, it.err = thumbnail.ImageFile(f)\nch <- it\n}(f)\n}\nfor range filenames {\nit := <-ch\nif it.err != nil {\nreturn nil, it.err\n}\nthumbfiles = append(thumbfiles, it.thumbfile)\n}\nreturn thumbfiles, nil\n}\nOurﬁ nalv ersiono f makeThumbnails,b elow,r etur nst he tot aln umbero fb ytes occ upied by\nthen ew ﬁles. Unlik et he pre vious versions,h ow ever, itr eceivest he ﬁle names not asas lice but\nov erac hannel ofs tr ings, sow ec annot pre dic tthen umbero fl oopi terat ions.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 255,
      "page_label": "237"
    }
  },
  {
    "page_content": "ov erac hannel ofs tr ings, sow ec annot pre dic tthen umbero fl oopi terat ions.\nTo knoww hent he lastg oroutine has ﬁnishe d(w hichm ay not bet he lasto ne tos tart), wen eed\nto increment a c ount erb eforee achg oroutine startsa nd decrement ita se achg oroutine ﬁn-\nishes. Thi sd emands a s peci al kind o fc ount er, o ne t hatc an b es afelym anipu lated f ro m\nmu ltipleg oroutinesa nd thatp rovides a way tow aitu nt i lit becom esz ero. T hisc ount ert yp eis\nknow nas sync.WaitGroup,a nd the codeb elow shows how t ou se it:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 255,
      "page_label": "237"
    }
  },
  {
    "page_content": "ptg16105617\n238 CHAPTER 8. GOROUTINES AND CHANNELS\n// makeThumbnails6 makes thumbnails for each file received from the channel.\n// It returns the number of bytes occupied by the files it creates.\nfunc makeThumbnails6(filenames <-chan string) int64 {\nsizes := make(chan int64)\nvar wg sync.WaitGroup // number of working goroutines\nfor f := range filenames {\nwg.Add(1)\n// worker\ngo func(f string) {\ndefer wg.Done()\nthumb, err := thumbnail.ImageFile(f)\nif err != nil {\nlog.Println(err)\nreturn\n}\ninfo, _ := os.Stat(thumb) // OK to ignore error\nsizes <- info.Size()\n}(f)\n}\n// closer\ngo func() {\nwg.Wait()\nclose(sizes)\n}()\nvar total int64\nfor size := range sizes {\ntotal += size\n}\nreturn total\n}\nNo tet he asy mmet ryi nt he Add and Done methods. Add,w hichi ncrementst he count er, must\nbe cal le dbefore the wor ker goroutine starts, not wit hin it; other wis ewe wouldn ot bes uret hat\nthe Addhapp ens before the ‘‘clos er’’goro utine cal lsWait.A ls o, Addtakesap arameter,b ut Done\ndo esnot; it’se quivalentt o Add(-1).W eu se defer to ens ure thatt he count eri sd ecrement ed\neven in the error cas e.T he str uctureo ft he codea bove isac ommona nd idiomaticp attern for\nlo oping inp aral lelw henw ed on’tk nowt he numbero fi terat ions.\nThe sizes ch annel c ar r ieseach ﬁle size bac kt ot he m ain g oroutine,w hichr eceivest hem\nusinga range lo opa nd c omputest he s um. Obs er ve how wec re ate a cl os er goro utine t hat",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 256,
      "page_label": "238"
    }
  },
  {
    "page_content": "usinga range lo opa nd c omputest he s um. Obs er ve how wec re ate a cl os er goro utine t hat\nwaits for the wor kerst o ﬁnish beforec losingt he sizes ch annel.T hese two operat ions,w ait\nandc los e,m ustb ec on cur rentw it hthel oopo ver sizes.C on sider the alt ernat ives: if the wait\nop erat ionw erep lace d in the main goroutine beforet he loop, itw ou ldn ever end, and ifp lace d\naf ter the loop, itw ou ldb eu nreach ables ince wit hnothingc losingt he channel,t he loopw ou ld\nne ver ter minate.\nFigure8 .5 i llustrates the s equence ofe ventsi nt he makeThumbnails6 func tion. Th ev er tic al\nlines represent goroutines. Th et hin seg ments indic ates le ep,t he thicks eg ments activity.T he\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 256,
      "page_label": "238"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.6. EXAMPLE: CONCURRENT WEB CRAWLER 239\nFigure 8.5. Thes equence ofe ventsi n makeThumbnails6.\ndi agon ala rrowsi ndic atee ventst hats ynchro nize o ne g oroutine w it h anot her.T ime ﬂow s\ndown.N ot ice how the main goroutine spend s most ofi ts timei nt he range lo opa sleep, wait-\ningf or a wor ker tos endav alue ort he clos erto clos ethec hannel.\nExercis e 8.4: Mo dif y the reverb2 server tou se a sync.WaitGroup perc onne ction toc ount\nthen umbero fa ctive echo goro utines. W heni tf al lst oz ero, clos ethew rite half oft he TCP\nconnec tion asd es crib edi nE xercis e8.3. Ver ifyt haty ourm odiﬁed netcat3 clientf ro mthat\nexercise waits for the ﬁnale ch oes ofm ultiplec on cur rents houts, evena fter the stand ard inp ut\nhasb eenc los ed.\nExercis e 8.5: Take a ne xist ing C PU-b ounds equential p rogram, suc ha st he M andelbro t\nprog ram of S ec tion 3.3 ort he 3-D sur face comp utation of S ec tion 3.2, ande xe cut e itsm ain\nlo op in paral lelu singc hannel s forc ommunic ation. H ow m uchf asterd oesi tr un o na\nmu ltiprocessorm achine? W hati st he opt imaln umbero fg oroutinest ou se?\n8.6. Example: ConcurrentW eb Crawler\nIn S ec tion 5.6, w em ade a sim plew eb c raw ler that explo re d thel in k grapho ft he w eb i n\nbreadt h-ﬁrs torder.I nt hiss ec tion,w e’ll makei tc on cur rents ot hati ndep endentc al lst o crawl\ncane xploit the I/O paral lelism availablei nt he web.T he crawl func tionr emainse xac tly asi t",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 257,
      "page_label": "239"
    }
  },
  {
    "page_content": "cane xploit the I/O paral lelism availablei nt he web.T he crawl func tionr emainse xac tly asi t\nwas in gopl.io/ch5/findlinks3:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 257,
      "page_label": "239"
    }
  },
  {
    "page_content": "ptg16105617\n240 CHAPTER 8. GOROUTINES AND CHANNELS\ngopl.io/ch8/crawl1\nfunc crawl(url string) []string {\nfmt.Println(url)\nlist, err := links.Extract(url)\nif err != nil {\nlog.Print(err)\n}\nreturn list\n}\nThem ain functionr es embles breadthFirst (§5.6). A sb efore, a wor klist records the queue of\nit ems thatn eed pro cessing, eachi temb eingal isto fU RLs toc raw l,b ut thist ime, ins teado f\nrepres enting the queue usingas lice,w eu se a c hannel.E achc al lto crawl occurs ini ts own\ngoro utine and sends the lin ksit dis cov ers backt ot he wor klist.\nfunc main() {\nworklist := make(chan []string)\n// Start with the command-line arguments.\ngo func() { worklist <- os.Args[1:] }()\n// Crawl the web concurrently.\nseen := make(map[string]bool)\nfor list := range worklist {\nfor _, link := range list {\nif !seen[link] {\nseen[link] = true\ngo func(link string) {\nworklist <- crawl(link)\n}(link)\n}\n}\n}\n}\nNo tice thatt he craw lgoro utine takes link as an explici tp arameter toa void the pro blem of\nlo opv ar iable capture weﬁ rs tsaw in Sec tion 5.6.1. A ls onotice thatt he initial sendo ft he com-\nmand-linea rguments tot he wor klist mustr un in its own goroutine toa void dead lock,as tuck\nsitu ation inw hichb ot hthem ain goroutine and a craw ler goro utine att emp tto sendt oe ach\not her whi leneit her isr eceiving . An alt ernat ive solut ion wou ldb et ou se a buf fered channel.\nThec raw leris now hig hly con cur renta nd printsas torm ofU RLs, but it h as two pro blems.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 258,
      "page_label": "240"
    }
  },
  {
    "page_content": "Thec raw leris now hig hly con cur renta nd printsas torm ofU RLs, but it h as two pro blems.\nThe ﬁrs tproblem manifests its elf as erro rmess ages in the log afteraf ew second sof operat ion:\n$g ob uild gopl.io/ch8/crawl1\n$. /crawl1 http://gopl.io/\nhttp://gopl.io/\nhttps://golang.org/help/\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 258,
      "page_label": "240"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.6. EXAMPLE: CONCURRENT WEB CRAWLER 241\nhttps://golang.org/doc/\nhttps://golang.org/blog/\n...\n2015/07/15 18:22:12 Get ...: dial tcp: lookup blog.golang.org: no such host\n2015/07/15 18:22:12 Get ...: dial tcp 23.21.222.120:443: socket:\ntoo many open files\n...\nThei nitial erro rmess age isas ur prisingr ep ort ofaD NS lookup fai luref or a reliabled om ain.\nThes ubsequente rror message reveals the cause:t he program create dso manyn et wor kcon-\nne ction sat oncet hati te xceeded t he per-pro cessl imito nt he numbero fo penﬁ les, causing\nop erat ions such as DNS lookupsa nd cal lst o net.Dialto start fai ling.\nThep rogram is to oparal lel. U nb ounde dparal lelism isr arelyag ood ide a since there isa lways\nal imiting f ac tor i nt he s ystem, suc ha st he n umbero fC PU co resf or com pute-b ound\nwork loads,t he numbero fs pind les andh eads for local disk I/O operat ions,t he bandw idt h of\nthen et wor kfors treamingd ow nlo ads, ort he ser vingc ap acity ofa w eb ser vice.T he solut ion is\nto limitt he numbero fp aral lelu seso ft he res ource tom atch t he level ofp aral lelism thati s\navai lable.A simplew ay tod ot hati no ur examplei st oe ns ure thatn om oret han n callst o\nlinks.Extract area ctivea to nce, w here n is c omfortably l esst hant he ﬁle descr ipt or\nlimit—20, say .T hisi sa nalogou sto the way a door man at a crow ded nig htclub admits a guest\non lyw hens om eot her guestl eaves.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 259,
      "page_label": "241"
    }
  },
  {
    "page_content": "limit—20, say .T hisi sa nalogou sto the way a door man at a crow ded nig htclub admits a guest\non lyw hens om eot her guestl eaves.\nWe can limitp aral lelism usingab uf fered channel ofc ap acity n to model a con cur rency primi-\ntive cal le d acounting semap hore.C on ceptu ally, eacho ft he n vac ants lots in the channel buf fer\nrepres ents a token entitlingt he holder top ro ceed.S en din gav alue into the channel acquires a\ntoken, an dr eceiving a v alue f ro m thec hannel rel easesat oken, cr eating a n ew v ac ants lot.\nThise ns urest hata tm ost n send s cano cc ur withouta ni nt erveningr eceive . (A lthough i t\nmig htb em orei nt uit ive tot re at ﬁll ed slotsi nt he channel buf fer as tokens, usingv ac ants lots\navoids the need toﬁ ll the channel buf fer afterc re ating it.) Since t he channel elementt yp eis\nnoti mp ortant, we’ll use struct{},w hichh as size zero.\nLet’sr ewrite the crawl func tions ot hatt he cal lto links.Extract is brackete dby operat ions\nto acquirea nd release a t oken, thu sensuring thata tm ost2 0c al lst oi ta re activea to ne time.\nIt’sg ood prac tice tok eept he semaphore operat ions asc los e as possiblet ot he I/O operat ion\nthey regu late.\ngopl.io/ch8/crawl2\n// tokens is a counting semaphore used to\n// enforce a limit of 20 concurrent requests.\nvar tokens = make(chan struct{}, 20)\nfunc crawl(url string) []string {\nfmt.Println(url)\ntokens <- struct{}{} // acquire a token\nlist, err := links.Extract(url)\n<-tokens // release the token",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 259,
      "page_label": "241"
    }
  },
  {
    "page_content": "fmt.Println(url)\ntokens <- struct{}{} // acquire a token\nlist, err := links.Extract(url)\n<-tokens // release the token\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 259,
      "page_label": "241"
    }
  },
  {
    "page_content": "ptg16105617\n242 CHAPTER 8. GOROUTINES AND CHANNELS\nif err != nil {\nlog.Print(err)\n}\nreturn list\n}\nThes econ d problem ist hatt he program never ter minates, evenw heni th as discov ere dal lthe\nlin ksre ach ablef ro mthei nitial URLs. (Of cour se,y ou’re unlikelyt on ot ice thisp ro blem unless\nyouc ho ose the initial URLs caref ullyo ri mp lementt he depth-limiting feature ofE xercis e8.6.)\nFo rthep rogram t ot er minate, w en eed t ob re ako ut of t he m ain lo op w hent he w or klist i s\nempt yan dno craw lgoro utinesa re active.\nfunc main() {\nworklist := make(chan []string)\nvar n int // number of pending sends to worklist\n// Start with the command-line arguments.\nn++\ngo func() { worklist <- os.Args[1:] }()\n// Crawl the web concurrently.\nseen := make(map[string]bool)\nfor ; n > 0; n-- {\nlist := <-worklist\nfor _, link := range list {\nif !seen[link] {\nseen[link] = true\nn++\ngo func(link string) {\nworklist <- crawl(link)\n}(link)\n}\n}\n}\n}\nIn thisv ersion, the count er n ke eps tracko ft he numbero fs ends tot he wor klist thata re yet to\noccur. E acht imew ek nowt hata ni temn eedst ob es entt ot he wor klist,w ei ncrement n,o nce\nbefore wes endt he initial command-linea rguments, anda gain eacht imew es tart a c raw ler\ngoro utine.T he main loop ter minates when n fal lst oz ero, since there isn om orew or kto be\ndone.\nNo wthec on cur rentc raw ler runs a bout 2 0t imes fas tert hant he b re adt h-ﬁrs t craw ler from",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 260,
      "page_label": "242"
    }
  },
  {
    "page_content": "done.\nNo wthec on cur rentc raw ler runs a bout 2 0t imes fas tert hant he b re adt h-ﬁrs t craw ler from\nSection5 .6, wit houte rror s,a nd ter minates correc tly ifi ts houldc ompletei ts task.\nThep rogram b elow s hows an al ternat ive s olut ion tot he p ro blem o fe xcessive c on cur rency.\nThisv ersionu sest he o riginal crawl func tiont hath as n oc ount ing s emaphore , butc al lsi t\nfrom oneo f2 0l on g-live dcraw lergoro utines, thu sensuring thata tm ost 20 HTTPr equests are\nac tivec on c ur rently.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 260,
      "page_label": "242"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.6. EXAMPLE: CONCURRENT WEB CRAWLER 243\ngopl.io/ch8/crawl3\nfunc main() {\nworklist := make(chan []string) // lists of URLs, may have duplicates\nunseenLinks := make(chan string) // de-duplicated URLs\n// Add command-line arguments to worklist.\ngo func() { worklist <- os.Args[1:] }()\n// Create 20 crawler goroutines to fetch each unseen link.\nfor i := 0; i < 20; i++ {\ngo func() {\nfor link := range unseenLinks {\nfoundLinks := crawl(link)\ngo func() { worklist <- foundLinks }()\n}\n}()\n}\n// The main goroutine de-duplicates worklist items\n// and sends the unseen ones to the crawlers.\nseen := make(map[string]bool)\nfor list := range worklist {\nfor _, link := range list {\nif !seen[link] {\nseen[link] = true\nunseenLinks <- link\n}\n}\n}\n}\nThec raw lergoro utinesa re all fed byt he samec hannel, unseenLinks.T he main goroutine is\nresp onsible f or d e-dup lic atingi tems i tr eceivesf ro m thew or klist,a nd the ns endinge ach\nunseen one overt he unseenLinksch annel toac raw lergoro utine.\nThe seen mapi s conﬁne d within the main goroutine;t hati s, itc an bea ccessedo nlyb yt hat\ngoro utine.L ikeo ther f or mso fi nfor mat ionh iding, c onﬁnement h elps u sr easona bout t he\ncorrec tnesso fap rogram. F or example, local var iables cann ot b em ention edb yn amef ro m\noutside the functioni nw hicht he yared eclare d;v ar iables thatd on ot escap e (§2.3.4) f ro ma\nfunc tionc annot bea ccessedf ro moutside thatf unction; ande nc apsulated ﬁelds ofa no bj e ct",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 261,
      "page_label": "243"
    }
  },
  {
    "page_content": "func tionc annot bea ccessedf ro moutside thatf unction; ande nc apsulated ﬁelds ofa no bj e ct\ncannot bea ccessede xceptb yt he methodso ft hato bj e ct. I na ll cas es, infor mat ionh idingh elps\nto limitu nintended int erac tions bet weenp ar tsof the program.\nLinksf ound by crawlares entt ot he wor klist fro mad edic ated goroutine toa void dead lock.\nTo saves pace,w eh aven ot addressedt he pro blem oft er minat ion in thise xample.\nExercis e 8.6:Addd epth-limiting tot he con cur rentc raw ler.T hati s, if the users ets -depth=3,\nthen onlyU RLs reach able by at mostt hree lin kswi l lbe fetch ed.\nExercis e 8.7: Wr ite a c on cur rentp rogram t hatc re atesal ocal mir ro rof a w eb s it e ,fetching\neach r each ablep agea nd w riting i tt oad irec tor y on the l ocal di sk.O nlyp ages w it hin t he\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 261,
      "page_label": "243"
    }
  },
  {
    "page_content": "ptg16105617\n244 CHAPTER 8. GOROUTINES AND CHANNELS\nor iginald om ain (for ins tance, golang.org)s houldb ef etch ed. URLs wit hin mirro redp ages\nshouldb ea lt ere das needed sot hatt he yrefert ot he mir rored page ,nott he original.\n8.7. Multiplexing with select\nThep rogram below doest he count dow nforar ocketl aunch.T he time.Tickfunc tionr etur ns\nac hannel onw hichi ts ends eventsp er iodic ally,a ctingl ikea m et ron om e.T he value ofe ach\neventi sat imestamp,b ut it isr arely as int erest ing ast he fac tof itsd eliver y.\ngopl.io/ch8/countdown1\nfunc main() {\nfmt.Println(\"Commencing countdown.\")\ntick := time.Tick(1 * time.Second)\nfor countdown := 10; countdown > 0; countdown-- {\nfmt.Println(countdown)\n<-tick\n}\nlaunch()\n}\nNo wlet’sa dd the abi lit yto abort the launch sequence byp ressingt he retur nke yduring the\ncountdow n.F irst,w es tart a goroutine thatt ries tor eadas ingleb ytef ro mthes tand ard inp ut\nand, ifi ts ucce e ds, sends a value onac hannel cal le dabort.\ngopl.io/ch8/countdown2\nabort := make(chan struct{})\ngo func() {\nos.Stdin.Read(make([]byte, 1)) // read a single byte\nabort <- struct{}{}\n}()\nNo weach iterat iono ft he count dow nlo opn eedst ow aitf or ane vent toa rrive ono ne oft he\ntwoc hannel s:t he tickerc hannel ife verythingi sﬁ ne (‘‘nominal’’in NASAj argon) ora na bort\neventi ft here was an ‘‘anom aly.’’We can’tj ustr eceive fro meach channel because whiche ver",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 262,
      "page_label": "244"
    }
  },
  {
    "page_content": "eventi ft here was an ‘‘anom aly.’’We can’tj ustr eceive fro meach channel because whiche ver\nop erat ionw et ry ﬁrs twi l lblocku nt i lcomp let ion. Wen eed to mu ltipl ex thes eop erat ions,a nd\nto dot hat, wen eed a select statement.\nselect {\ncase <-ch1:\n// ...\ncase x := <-ch2:\n// ...use x...\ncase ch3 <- y:\n// ...\ndefault:\n// ...\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 262,
      "page_label": "244"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.7. MULTIPLEXING WITH SELECT 245\nTheg eneral for m of a selec tst atement iss hown above . Like a switch statement,i th as a num-\nbero fc as es anda no pt ion al default.E achc as esp eciﬁes a commu nicati on (a sendo rr eceive\nop erat iono ns om ech annel)a nd ana ss oci ated blo cko fs tatements. A re ceive expressionm ay\nappear oni ts own,a si nt he ﬁrs tcase,o rw it hin a s hort var iable decl arat ion, as in the secon d\ncase;t he secon dform lets you refer tot he receive dvalue.\nA select waits until a c ommunic ationf or som e case isr eady top ro ceed.I tt henp er for ms\nthat communic ationa nd exe cut est he cas e’sa ss oci ated statements; the other communic ations\ndo not happen. A selectwith noc as es,select{},w aits forever.\nLet’sr etur nto our rocketl aunch program. The time.After func tioni mmediate lyr etur nsa\nch annel,a nd startsan ew goroutine thats ends a s inglev alue ont hatc hannel after the speci-\nﬁed time.T he selec tst atement below waits until the ﬁrs tof two eventsa rrives, either an abor t\nevento rt he event indic atingt hat1 0s econ dsh avee laps ed. I f1 0s econ dsg ob yw it hno abort,\nthel aunch pro ceeds.\nfunc main() {\n// ...create abort channel...\nfmt.Println(\"Commencing countdown. Press return to abort.\")\nselect {\ncase <-time.After(10 * time.Second):\n// Do nothing.\ncase <-abort:\nfmt.Println(\"Launch aborted!\")\nreturn\n}\nlaunch()\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 263,
      "page_label": "245"
    }
  },
  {
    "page_content": "select {\ncase <-time.After(10 * time.Second):\n// Do nothing.\ncase <-abort:\nfmt.Println(\"Launch aborted!\")\nreturn\n}\nlaunch()\n}\nThee xampleb elow ism ores ubtle. T he channel ch,w hose buf fer size is1 ,i sa lt ernatelye mp ty\nthen full,s oo nlyo ne oft he cas escanp ro ceed,e it her the sendw hen i is even, ort he receive\nwhen iis odd.I ta lways prints 02468 .\nch := make(chan int, 1)\nfor i := 0; i < 10; i++ {\nselect {\ncase x := <-ch:\nfmt.Println(x) // \"0\" \"2\" \"4\" \"6\" \"8\"\ncase ch <- i:\n}\n}\nIf multiplec as es arer eady, select pickso ne atr andom, whiche ns urest hate very channel has\nan equ alc hanceo fb eings elec ted.I ncre asingt he buf fer size oft he pre vious examplem akes its\noutput non deter minist ic, b ecause w hent he buf fer isn either full nor emp ty, the selec t st ate-\nment ﬁgurat ive lyt ossesac oin.\nLet’sm akeo ur launch program print the count dow n.T he selec tst atement below causese ach\nit erat iono ft he loopt ow aitu pt o1s econ dfor an abort,b ut nol on g er.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 263,
      "page_label": "245"
    }
  },
  {
    "page_content": "ptg16105617\n246 CHAPTER 8. GOROUTINES AND CHANNELS\ngopl.io/ch8/countdown3\nfunc main() {\n// ...create abort channel...\nfmt.Println(\"Commencing countdown. Press return to abort.\")\ntick := time.Tick(1 * time.Second)\nfor countdown := 10; countdown > 0; countdown-- {\nfmt.Println(countdown)\nselect {\ncase <-tick:\n// Do nothing.\ncase <-abort:\nfmt.Println(\"Launch aborted!\")\nreturn\n}\n}\nlaunch()\n}\nThe time.Tick func tionb eh avesa si fi tc re atesag oroutine thatc al lstime.Sleep in a lo op,\nsendinga ne vent eacht imei tw akes up. W hent he count dow nfunc tiona bove retur ns, its tops\nre ceiving eventsf ro mtick,b ut the tickerg oroutine iss till there ,tr yingi nv ain tos endo na\nch annel fro mwhichn og oroutine isr eceiving—a goro utine leak (§8.4.4).\nThe Tick func tioni sc onvenient, b ut it ’sa ppro priateo nlyw hent he t icks w ill b en eeded\nthro ughoutt he lifet imeo ft he app lic ation. Other wis e,w es houldu se thisp attern:\nticker := time.NewTicker(1 * time.Second)\n<-ticker.C // receive from the ticker'sc hannel\nticker.Stop() // cause the ticker'sg oroutine to terminate\nSometimesw ew antt ot ry tos endo rr eceive onac hannel but avoid blo cking ift he channel is\nnotr eady—a non-blocki n gcommunic ation. A sele cts tatement c an do t hatt oo.A select\nmayh avea default,w hichs peciﬁes whatt od ow henn on e of the other communic ations can\nproceed immediate ly.\nThes elec tst atement below receivesav alue fro mthe abort ch annel ift here iso ne tor eceive;",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 264,
      "page_label": "246"
    }
  },
  {
    "page_content": "proceed immediate ly.\nThes elec tst atement below receivesav alue fro mthe abort ch annel ift here iso ne tor eceive;\not her wis e it d oesn ot hing. T hisi san on-blo cking r eceive o perat ion; doingi tr ep eatedlyi s\ncalled polling ac hannel.\nselect {\ncase <-abort:\nfmt.Printf(\"Launch aborted!\\n\")\nreturn\ndefault:\n// do nothing\n}\nThez erov alue for a c hannel is nil.P erhaps sur prisingly, nil channel sares om etimesu seful.\nBecaus esend and receive operat ions onan il channel blo c kf orever,ac as e in a selec tst atement\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 264,
      "page_label": "246"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.8. EXAMPLE: CONCURRENT DIRECTOR YT RAVERSAL 247\nwhos ech annel isn il isn ever selec ted.T hisl ets usu se nil to enableo rd is ablec as esthat cor-\nresp ond tof eaturesl ikeh andlingt imeoutso rc ancellat ion, respondingt oo ther inpute vents,\nor emitt ing out put.W e’ll see ane xample in the next sec tion.\nExercis e 8.8: Usingas elec t st atement,a dd a tim eout tot he ech oserver f ro mSection8 .3 so\nthat itd is conne cts anyc lientt hats houtsn ot hingw it hin 10 secon ds.\n8.8. Example: ConcurrentD irectory Traversal\nIn thiss ec tion,w e’ll bui ld ap rogram t hatr ep ortst he disku sage ofo ne orm ored irec tor ies\nsp eciﬁed ont he command line, liket he Unix du command. M osto fi ts wor kis don eby the\nwalkDir func tionb elow,w hiche numerates the ent ries oft he direc tor ydirusingt he dirents\nhelperf unction.\ngopl.io/ch8/du1\n// walkDir recursively walks the file tree rooted at dir\n// and sends the size of each found file on fileSizes.\nfunc walkDir(dir string, fileSizes chan<- int64) {\nfor _, entry := range dirents(dir) {\nif entry.IsDir() {\nsubdir := filepath.Join(dir, entry.Name())\nwalkDir(subdir, fileSizes)\n}e lse {\nfileSizes <- entry.Size()\n}\n}\n}\n// dirents returns the entries of directory dir.\nfunc dirents(dir string) []os.FileInfo {\nentries, err := ioutil.ReadDir(dir)\nif err != nil {\nfmt.Fprintf(os.Stderr, \"du1: %v\\n\", err)\nreturn nil\n}\nreturn entries\n}\nThe ioutil.ReadDir func tionr etur nsa s lice of os.FileInfo—th es amei nfor mat iont hata",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 265,
      "page_label": "247"
    }
  },
  {
    "page_content": "return nil\n}\nreturn entries\n}\nThe ioutil.ReadDir func tionr etur nsa s lice of os.FileInfo—th es amei nfor mat iont hata\ncall to os.Stat returnsf or a single ﬁle.F or eachs ub direc tor y, walkDir re cursive lyc al lsi ts elf,\nandf or each ﬁle, walkDirsend sam essage ont he fileSizesch annel.T he mess age ist he size\nof the ﬁle in bytes.\nThem ain fun ction, s hown b elow,u sest wo go ro utines. Th eb ackg round g oroutine c al ls\nwalkDir fore achd irec tor ysp eciﬁed o nt he command linea nd ﬁnallyc los esthe fileSizes\nch annel.T he main goroutine computest he sum oft he ﬁle sizes i tr eceivesf ro mthec hannel\nand ﬁnallyp rintst he tot al.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 265,
      "page_label": "247"
    }
  },
  {
    "page_content": "ptg16105617\n248 CHAPTER 8. GOROUTINES AND CHANNELS\n// The du1 command computes the disk usage of the files in a directory.\npackage main\nimport (\n\"flag\"\n\"fmt\"\n\"io/ioutil\"\n\"os\"\n\"path/filepath\"\n)\nfunc main() {\n// Determine the initial directories.\nflag.Parse()\nroots := flag.Args()\nif len(roots) == 0 {\nroots = []string{\".\"}\n}\n// Traverse the file tree.\nfileSizes := make(chan int64)\ngo func() {\nfor _, root := range roots {\nwalkDir(root, fileSizes)\n}\nclose(fileSizes)\n}()\n// Print the results.\nvar nfiles, nbytes int64\nfor size := range fileSizes {\nnfiles++\nnbytes += size\n}\nprintDiskUsage(nfiles, nbytes)\n}\nfunc printDiskUsage(nfiles, nbytes int64) {\nfmt.Printf(\"%d files %.1f GB\\n\", nfiles, float64(nbytes)/1e9)\n}\nThisp rogram pausesf or a lon gwhileb eforep rint ing its result:\n$g ob uild gopl.io/ch8/du1\n$. /du1 $HOME /usr /bin /etc\n213201 files 62.7 GB\nThep rogram wou ldb en icer if i tk eptu si nfor med ofi ts progress. H ow ever, simply mov ing\nthe printDiskUsagecall int othel oopw ou ldc ause itt op rint thous and sof lines ofo ut put.\nThev ar ianto f du belowp rintst he tot als per iodic ally,b ut only ift he -v ﬂag iss peciﬁed since\nnota ll users will w antt os ee progressm essages. Th eb ackg round goroutine thatl oops over\nroots remainsu nchange d.T he m ain g oroutine nowu sesat ickert og eneratee ventse very\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 266,
      "page_label": "248"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.8. EXAMPLE: CONCURRENT DIRECTOR YT RAVERSAL 249\n500ms, andas elec tst atement tow aitf or eit her a ﬁle size message ,in whichc as eit updatest he\ntotals,o rat icke vent,i nw hichc as eit prints the cur rentt ot als.I ft he -v ﬂag isn ot speciﬁed,\nthe tickch annel remainsn il,a nd its cas e in the selectis effec tive lyd is abled.\ngopl.io/ch8/du2\nvar verbose = flag.Bool(\"v\", false, \"show verbose progress messages\")\nfunc main() {\n// ...start background goroutine...\n// Print the results periodically.\nvar tick <-chan time.Time\nif *verbose {\ntick = time.Tick(500 * time.Millisecond)\n}\nvar nfiles, nbytes int64\nloop:\nfor {\nselect {\ncase size, ok := <-fileSizes:\nif !ok {\nbreak loop // fileSizes was closed\n}\nnfiles++\nnbytes += size\ncase <-tick:\nprintDiskUsage(nfiles, nbytes)\n}\n}\nprintDiskUsage(nfiles, nbytes) // final totals\n}\nSincet he p rogram n ol on g eru sesa range lo op, t he ﬁrs t select case m uste xplicitlyt est\nwhet her the fileSizes ch annel has beenc los ed, usingt he two-resultf or m of receive opera-\ntion.I ft he channel has beenc los ed, the program bre aks out of t he loop. T he lab ele dbreak\nst atement bre aks out of b ot hthe select andt he for lo op; an unlabele dbreak wouldb re ak\nouto fo nlyt he select,c ausingt he loopt ob eg inthen ext iterat ion.\nThep rogram now gives usal eisure lys treamo fu pdates:\n$g ob uild gopl.io/ch8/du2\n$. /du2 -v $HOME /usr /bin /etc\n28608 files 8.3 GB\n54147 files 10.3 GB\n93591 files 15.1 GB\n127169 files 52.9 GB",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 267,
      "page_label": "249"
    }
  },
  {
    "page_content": "$g ob uild gopl.io/ch8/du2\n$. /du2 -v $HOME /usr /bin /etc\n28608 files 8.3 GB\n54147 files 10.3 GB\n93591 files 15.1 GB\n127169 files 52.9 GB\n175931 files 62.2 GB\n213201 files 62.7 GB\nHo wever,i ts till takes too lon gto ﬁnish.T here’sn or easonw hy all the cal lst o walkDircan’tb e\ndone con cur rently, there bye xploit ing paral lelism in the disks ystem. Th et hirdv ersiono f du,\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 267,
      "page_label": "249"
    }
  },
  {
    "page_content": "ptg16105617\n250 CHAPTER 8. GOROUTINES AND CHANNELS\nbelow, cre atesan ew goroutine for eachc al lto walkDir.I tu sesa sync.WaitGroup (§8.5) to\ncountt he numbero fc al lst o walkDir that ares till active, and a c los ergoro utine toc los ethe\nfileSizesch annel whent he count erd ro pst oz ero.\ngopl.io/ch8/du3\nfunc main() {\n// ...determine roots...\n// Traverse each root of the file tree in parallel.\nfileSizes := make(chan int64)\nvar n sync.WaitGroup\nfor _, root := range roots {\nn.Add(1)\ngo walkDir(root, &n, fileSizes)\n}\ngo func() {\nn.Wait()\nclose(fileSizes)\n}()\n// ...select loop...\n}\nfunc walkDir(dir string, n *sync.WaitGroup, fileSizes chan<- int64) {\ndefer n.Done()\nfor _, entry := range dirents(dir) {\nif entry.IsDir() {\nn.Add(1)\nsubdir := filepath.Join(dir, entry.Name())\ngo walkDir(subdir, n, fileSizes)\n}e lse {\nfileSizes <- entry.Size()\n}\n}\n}\nSincet hisp rogram cr eatesm anyt hous and s of gor outinesa ti ts p eak, w eh avet oc hange\ndirents to use a c ount ing semaphore top re venti tf ro mop eningt oo many ﬁles at o nce, just\nas wed id for the web craw ler in Sec tion 8.6:\n// sema is a counting semaphore for limiting concurrency in dirents.\nvar sema = make(chan struct{}, 20)\n// dirents returns the entries of directory dir.\nfunc dirents(dir string) []os.FileInfo {\nsema <- struct{}{} // acquire token\ndefer func() { <-sema }() // release token\n// ...\nThisv ersionr unss everal times fastert hant he pre vious one,t houg htherei sal ot ofv ar iabilit y\nfrom systemt os ystem.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 268,
      "page_label": "250"
    }
  },
  {
    "page_content": "// ...\nThisv ersionr unss everal times fastert hant he pre vious one,t houg htherei sal ot ofv ar iabilit y\nfrom systemt os ystem.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 268,
      "page_label": "250"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.9. CANCELLATION 251\nExercis e 8.9:Wr ite a versiono f du that comp utesa nd per iodic ally displ ays sep aratet ot als for\neach oft he rootdirec tor ies.\n8.9. Cancellation\nSometimesw en eed t oi ns truct a g oroutine t os topw hati ti sd oing , fore xample, i naw eb\nserver per for mingac omputation on beh alf ofac lientt hath as disconne cte d.\nTherei sn ow ay for oneg oroutine tot er minatea nother direc tly,s ince thatw ou ldl eave all its\nsh are d var iables in undeﬁne d st ates. I nt he r ocketl aunch p rogram (§8.7) w es entas ingle\nvalue onac hannel named abort,w hicht he count dow ngoro utine int erprete das a requestt o\nstop its elf.B ut what if we need toc ancelt wo goro utines, or an arbit rar ynumb er?\nOnep ossibi lit ymig htb et os enda sm anye ventso nt he abort ch annel ast here are goroutines\nto cancel. I fs om e of the goroutinesh avea lready ter minated thems elves, how ever, our count\nwi l lbe too l arge ,ando ur sends will get stuck.O nt he other hand, ift hose goroutinesh ave\nsp awned o ther g oroutines, our coun tw ill b et oo s mall,a nd s om e goro utinesw ill r emain\nunawareo ft he cancellat ion. Ing eneral,i t’sh ardt ok nowh ow manyg oroutinesa re wor king\non our b eh alf at an yg iven mom ent.M oreover, whenag oroutine receivesav alue f ro mthe\nabort ch annel,i tc on sumes thatv alue sot hato ther goroutinesw on’ts ee it. F or cancellat ion,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 269,
      "page_label": "251"
    }
  },
  {
    "page_content": "abort ch annel,i tc on sumes thatv alue sot hato ther goroutinesw on’ts ee it. F or cancellat ion,\nwhat w en eed i sare l iablem echanism to broadcast an e vent o verac hannel s ot hatm any\ngoro utinesc an see it as it occ ursa nd can later see thati t has occurred.\nRe call thata fter a c hannel has beenc los eda nd drained ofa ll sentv alues, subsequentr eceive\nop erat ions pro ceed immediate ly, yieldingz erov alues. W ec an exploit thist oc re ate a b ro ad-\ncast mechanism: don’ts endav alue ont he channel, cl ose it.\nWe can add cance llat iont ot he du prog ram from t he p re vious s ec tion wit h af ew s imple\nch anges. Fir st,w ec re ate a c ancellat ionc hannel onw hichn ov alues aree vers ent, but whose\nclosurei ndic ates thati ti st imef or t he p rogram t os topw hati ti sd oing . We als o deﬁne a\nut i lit yfunc tion, cancelled,t hatc he cks or poll sthec ancellat ions tate att he ins tanti ti sc al le d.\ngopl.io/ch8/du4\nvar done = make(chan struct{})\nfunc cancelled() bool {\nselect {\ncase <-done:\nreturn true\ndefault:\nreturn false\n}\n}\nNext, w ec re ate a g oroutine t hatw ill r eadf ro m thes tand ard i np ut, whic hi st ypic ally c on-\nne cte d to the ter minal.A ss oona sa ny inp uti sr ead( fori ns tance,t he userp ress est he retur n\nke y), thisg oroutine bro adc asts the cancellat ionb yc losingt he donech annel.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 269,
      "page_label": "251"
    }
  },
  {
    "page_content": "ptg16105617\n252 CHAPTER 8. GOROUTINES AND CHANNELS\n// Cancel traversal when input is detected.\ngo func() {\nos.Stdin.Read(make([]byte, 1)) // read a single byte\nclose(done)\n}()\nNo wwe need tom akeo ur goroutinesr espond tot he cancellat ion. Int he main goroutine,w e\nadd a thirdc as eto the selec tst atement thatt ries tor eceive fro mthe done ch annel.T he func-\ntion retur nsi ft hisc as eis evers elec ted,b ut beforei tr etur nsi tm ustﬁ rs tdrain the fileSizes\nch annel,d is cardinga ll values until the channel isc los ed. I td oest hist oe ns ure thata ny active\ncallst o walkDircanr un toc omplet ionw it houtg etting stuck sendingt o fileSizes.\nfor {\nselect {\ncase <-done:\n// Drain fileSizes to allow existing goroutines to finish.\nfor range fileSizes {\n// Do nothing.\n}\nreturn\ncase size, ok := <-fileSizes:\n// ...\n}\n}\nThe walkDirgoro utine pol lst he cancellat ions tatu swhen itb eg ins, andr etur nsw it houtd oing\nanyt hing if the statu sis set. Thi st ur nsa ll goroutinesc re ate daf ter cancellat ioni nt ono-ops:\nfunc walkDir(dir string, n *sync.WaitGroup, fileSizes chan<- int64) {\ndefer n.Done()\nif cancelled() {\nreturn\n}\nfor _, entry := range dirents(dir) {\n// ...\n}\n}\nIt mig htb ep roﬁtablet op ol lthec ancellat ions tatu sagain wit hin walkDir’sl oop, toa void cre-\nat ingg oroutinesa fter t he c ancellat ione vent.C ancellat ioni nv olves a trade-o ff;aq uicker\nresp ons eof ten requires morei nt rusivec hangest op rogram logic. En suring thatn oe xp ensive",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 270,
      "page_label": "252"
    }
  },
  {
    "page_content": "resp ons eof ten requires morei nt rusivec hangest op rogram logic. En suring thatn oe xp ensive\nop erat ions evero cc ur af ter the cancellat ione vent may requireu pdat ingm anyp laces in y our\nco de,b ut of tenm osto ft he b eneﬁtc an b eo bt ained b yc he cking f or c ancellat ioni naf ew\nimportantp laces.\nAl it tle proﬁlingo ft hisp rogram reveale dthat the bot tleneckw as the acquisition of a s ema-\nph ore token in dirents.T he select belowm akes thiso perat ionc ancellable andr educes the\ntypicalc ancellat ionl atency oft he program fro mhundre dso fm illis econd sto tens:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 270,
      "page_label": "252"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.10. EXAMPLE: CHAT SERVER 253\nfunc dirents(dir string) []os.FileInfo {\nselect {\ncase sema <- struct{}{}: // acquire token\ncase <-done:\nreturn nil // cancelled\n}\ndefer func() { <-sema }() // release token\n// ...read directory...\n}\nNo w,w henc ancellat iono cc urs, allt he backg round goroutinesq uicklys topa nd the mainfunc-\ntion retur ns. Of cour se,w hen main returns, a p rogram exits, s oi tc an beh ardt ot el lam ain\nfunc tiont hatc le ansu pa fter its elf fro mon ethat does n ot.T here’sah andy trick wec an use\nduring testing:i fi ns teado fr etur ningf ro mmain in the event ofc ancellat ion, wee xe cut eac al l\nto panic,t hent he runtime will dumpt he stack ofe very goroutine int he program. I ft he main\ngoro utine i st he o nlyo ne l ef t, then i th as cle aned u pa fter its elf.B ut i fo ther g oroutines\nremain, the ymayn ot haveb eenp ro perly cancelled,o rp erhaps the yhave beenc ancelled but\nthec ancellat iont akes time; a li tt lei nv est igat ionm ay bew or thw hile. T he panic dumpo ften\ncont ainss ufﬁcienti nfor mat iont od istinguish these cas es.\nExercis e 8.10:HT TPre quests may bec ancelled byc losingt he opt ion al Cancel ch annel int he\nhttp.Requestst ruc t. Mo dif ythew eb craw lerof Sec tion 8.6 tos up por tcancel lat ion.\nHint:t he http.Get conv enience fun ctiond oesn ot g ivey ou a no pp ortunity t oc ustomize a\nRequest.I ns tead, cre ate the requestu sing http.NewRequest,s et its Cancel ﬁeld, thenp er-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 271,
      "page_label": "253"
    }
  },
  {
    "page_content": "Request.I ns tead, cre ate the requestu sing http.NewRequest,s et its Cancel ﬁeld, thenp er-\nform ther equestb yc al linghttp.DefaultClient.Do(req).\nExercis e 8.11:Fo llowing the appro ach of mirroredQuery in Sec tion 8.4.4, implementav ar i-\nanto f fetch that requests s everal URLs co nc urrently. A ss oona st he ﬁrs t resp o ns ear r ives,\ncancel the other requests.\n8.10. Example: Chat Server\nWe’ll ﬁnish thisc hapt erw it hac hats er ver thatl ets several users bro adc astt extualm essagest o\neach other.T here are fourk inds ofg oroutine int hisp rogram. Ther ei so ne ins tance apie ceof\nthe main and broadcaster goro utines, andf or eachc lientc onne ction there iso ne handle-\nConn ando ne clientWriter goro utine.T he bro adc asteri sag ood illustrat iono fh ow select\nis used,s ince ith as tor espond tot hree dif ferentk inds ofm essages.\nThej ob oft he main goroutine,s hown below,i st ol istenf or and accepti ncomingn et wor kcon-\nne ction sfrom clients. F or eacho ne,i tc re atesan ew handleConn goro utine,j usta si nt he con-\ncurrente ch oserver wes aw at the start oft hisc hapt er.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 271,
      "page_label": "253"
    }
  },
  {
    "page_content": "ptg16105617\n254 CHAPTER 8. GOROUTINES AND CHANNELS\ngopl.io/ch8/chat\nfunc main() {\nlistener, err := net.Listen(\"tcp\", \"localhost:8000\")\nif err != nil {\nlog.Fatal(err)\n}\ngo broadcaster()\nfor {\nconn, err := listener.Accept()\nif err != nil {\nlog.Print(err)\ncontinue\n}\ngo handleConn(conn)\n}\n}\nNext ist he bro adc aster. I ts localv ar iableclientsre cords the cur rents et ofc onne cte d clients.\nTheo nlyi nfor mat ionr ecorde d ab out eachc lienti st he identity ofi ts out going message chan-\nnel,a bout whichm orel ater.\ntype client chan<- string // an outgoing message channel\nvar (\nentering = make(chan client)\nleaving = make(chan client)\nmessages = make(chan string) // all incoming client messages\n)\nfunc broadcaster() {\nclients := make(map[client]bool) // all connected clients\nfor {\nselect {\ncase msg := <-messages:\n// Broadcast incoming message to all\n// clients' outgoing message channels.\nfor cli := range clients {\ncli <- msg\n}\ncase cli := <-entering:\nclients[cli] = true\ncase cli := <-leaving:\ndelete(clients, cli)\nclose(cli)\n}\n}\n}\nTheb ro adc asterl istens ont he global entering and leaving ch annel sfora nnouncements of\nar r iving and dep arting clients. W heni tr eceiveso ne oft hese events, itu pdates the clients\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 272,
      "page_label": "254"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 8.10. EXAMPLE: CHAT SERVER 255\nset, an di ft he e vent w as a depar ture, i tc los es thec lient’so ut going m essage c hannel.T he\nbroadc astera ls olistensf or eventso nt he global messages ch annel,t ow hiche achc lients ends\nal litsi ncomingm essages. W hent he bro adc asterr eceiveso ne oft hese events, itb ro adc asts the\nmess age toe very conne cte d client.\nNo wlet’sl ooka tt he per-clientg oroutines. The handleConn func tionc re atesan ew out going\nmess age channel for itsc lienta nd announces the arrival oft hisc lientt ot he bro adc astero ver\nthe enteringch annel.T heni tr eads every lineo ft ext fro mthec lient, sendinge achl inet ot he\nbroadc astero vert he globali ncomingm essage channel,p reﬁxinge achm essage wit hthei den-\ntity ofi ts sender.O ncet here isn ot hingm oret or eadf ro mthec lient, handleConn announces\nthed ep arture oft he cliento vert he leavingch annel and clos esthec onne ction.\nfunc handleConn(conn net.Conn) {\nch := make(chan string) // outgoing client messages\ngo clientWriter(conn, ch)\nwho := conn.RemoteAddr().String()\nch <- \"You are \" + who\nmessages <- who + \" has arrived\"\nentering <- ch\ninput := bufio.NewScanner(conn)\nfor input.Scan() {\nmessages <- who + \": \" + input.Text()\n}\n// NOTE: ignoring potential errors from input.Err()\nleaving <- ch\nmessages <- who + \" has left\"\nconn.Close()\n}\nfunc clientWriter(conn net.Conn, ch <-chan string) {\nfor msg := range ch {\nfmt.Fprintln(conn, msg) // NOTE: ignoring network errors\n}\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 273,
      "page_label": "255"
    }
  },
  {
    "page_content": "}\nfunc clientWriter(conn net.Conn, ch <-chan string) {\nfor msg := range ch {\nfmt.Fprintln(conn, msg) // NOTE: ignoring network errors\n}\n}\nIn addition, handleConn createsa clientWriter goro utine for eachc lientt hatr eceivesm es-\nsagesb ro adc astt ot he client’so ut going message channel and w ritest hemt ot he client’sn et-\nwork conne ction.T he clientw riter’sl oopt er minates whent he bro adc asterc los esthec hannel\naf ter receiving a leavingnotiﬁcation.\nThed ispl ayb elow s hows t he s er ver in action wit h twoc lients in sep aratew indows o nt he\nsame computer, using netcatto chat:\n$g ob uild gopl.io/ch8/chat\n$g ob uild gopl.io/ch8/netcat3\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 273,
      "page_label": "255"
    }
  },
  {
    "page_content": "ptg16105617\n256 CHAPTER 8. GOROUTINES AND CHANNELS\n$. /chat &\n$. /netcat3\nYou are 127.0.0.1:64208 $. /netcat3\n127.0.0.1:64211 has arrived You are 127.0.0.1:64211\nHi!\n127.0.0.1:64208: Hi! 127.0.0.1:64208: Hi!\nHi yourself.\n127.0.0.1:64211: Hi yourself. 127.0.0.1:64211: Hi yourself.\n^C\n127.0.0.1:64208 has left\n$. /netcat3\nYou are 127.0.0.1:64216 127.0.0.1:64216 has arrived\nWelcome.\n127.0.0.1:64211: Welcome. 127.0.0.1:64211: Welcome.\n^C\n127.0.0.1:64211 has left\nWhileh osting a chats essionf or n clients, thisp rogram runs2 n+2 conc urrentlyc ommunic at-\ningg oroutines, yet i tn eedsn oe xplicitl ocking operat ions (§9.2). The clients mapi sc on-\nﬁne d to a s ingleg oroutine,t he bro adc aster, soi tc annot bea ccessedc on cur rently. T he only\nvar iables thata re share dby multipleg oroutinesa re channel sandi ns tances of net.Conn,b ot h\nof whicha re concur rency saf e.W e’ll tal kmore about conﬁnement,c on cur rency safet y,a nd the\nimplic ations ofs haring var iables acrossg oroutines in the next chapt er.\nExercis e 8.12: Make the bro adc astera nnouncet he cur rents et ofc lients toe achn ew arrival.\nThisr equires thatt he clients seta nd the entering and leaving ch annel sre cordt he client\nname too.\nExercis e 8.13: Make t he chats er ver disconne cti dlec lients, sucha st hose t hath aves entn o\nmess agesi nt he last ﬁve m inut es. Hint: cal ling conn.Close() in anot her goroutine unb locks\nac tive Readcallss uch as the one don eby input.Scan().",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 274,
      "page_label": "256"
    }
  },
  {
    "page_content": "ac tive Readcallss uch as the one don eby input.Scan().\nExercis e 8.14:Change the chats er ver’sn et wor k prot ocols ot hate achc lientp rovides its name\non ent ering . Us ethat namei ns teado ft he networ kaddressw henp reﬁxinge achm essage wit h\nitss ender’si dentity.\nExercis e 8.15:Failureo fa ny clientp rogram tor eadd at a in a timelym anner ult imate lyc auses\nal \nl clients tog et stuck.M odif ytheb ro adc astert os kipam essage rat her thanw aiti fac lient\nwr iteri sn ot ready toa ccepti t. A lt ernat ive ly, add buf fer ingt oe achc lient’so ut going message\nch annel s ot hatm ostm essagesa re not dro p ped;t he bro adc asters houldu se a n on-blo cking\nsend tot hisc hannel.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 274,
      "page_label": "256"
    }
  },
  {
    "page_content": "ptg16105617\n9\nConcurrency with\nShared Variables\nIn the pre vious chapt er, wep resent eds everal programst hatu se g oroutinesa nd channel sto\nexpress c on cur rency i nad irec t andn atural way.H ow ever, ind oing s o, w eg lossedo vera\nnumb ero fi mp ortanta nd subtlei ssues t hatp rogrammersm ustb eari nm indw henw riting\nconc urrentc ode.\nIn thisc hapt er, we’ll t akeac los er lo oka tt he mech anics ofc on cur rency.I np ar tic ular, we’ll\npointo ut som e of the pro blemsa ss oci ated wit hsh aring var iables amon gmu ltipleg oroutines,\nthea nalyticalt echniques for recog nizingt hose pro blems, andt he patternsf or solv ing them.\nFinal ly, we’ll explain som e of the technic al dif ferences bet weeng oroutinesa nd operat ings ys-\ntemt hreads.\n9.1. Rac eC onditions\nIn a sequential program, thati s, a program wit h on lyo ne goroutine,t he steps oft he program\nhapp eni nt he fami liar exec ution order deter mined byt he program logic. F or ins tance,i na\nsequence ofs tatements, the ﬁrs ton ehapp ens beforet he secon d on e,a nd soo n. I nap rogram\nwith two orm oreg oroutines, the steps wit hin eachg oroutine happeni nt he fami liar order,b ut\nin general w ed on’tk noww hether an e vent x in one goroutine happens beforea ne vent y in\nanot her goroutine,o rh appens after it, ori ss imultane ous wit h it.W henw ec annot conﬁdently\nsayt hato ne event happ ens before theo ther,t hent he events x and y are concur rent.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 275,
      "page_label": "257"
    }
  },
  {
    "page_content": "sayt hato ne event happ ens before theo ther,t hent he events x and y are concur rent.\nConsider a fun ctiont hatw or ksc or rec tly inas equential program. That fun ctioni s concur-\nrenc y-s afe if itc ontinues tow or kcorrec tly evenw henc al le d conc urrently, thati s, fro mtwoo r\nmore goroutinesw it hno addition als ynchro nizat ion. Wec an generalize thisn ot ion toas et of\n257\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 275,
      "page_label": "257"
    }
  },
  {
    "page_content": "ptg16105617\n258 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\ncollab orat ingf unctions,s ucha st he methodsa nd operat ions ofap ar tic ulart yp e.A type i s\nconc urrency-s afe if all its accessiblem et hodsa nd operat ions are con cur rency-s afe.\nWe c an mak eap rogram co nc urrency-s afew it houtm ak inge very c on crete t yp e in t hat\nprog ram conc urrency-s afe. I ndeed,c on cur rency-s afet yp es aret he exception rat her thant he\nrule,s oy ou shoulda ccessav ar iable conc urrentlyo nlyi ft he documentation for itst yp esays\nthat thisi ss afe. W ea void conc urrenta ccesst om ostv ar iables either by conﬁni n gthem toa\nsingleg oroutine orb ym aintainingah ig her-le vel invar ianto f mu tuale xclu sion.W e’ll explain\nthes eterms in thisc hapt er.\nIn contrast, exp or ted pa ckage-le vel f unctions are general lye xp ected tob ec on cur rency-s afe.\nSincep ackage-le vel var iables cannot bec onﬁne dto a s ingleg oroutine,f unctions thatm odif y\nthem muste nforce mut ual exclusion.\nTherea re manyr easons a functionm ig htn ot wor kwhen cal le d conc urrently, includingd ead-\nlo ck, live lock, an dr es ource starvat ion. Wed on’th aves pace t od is cussa ll o ft hem, s ow e’ll\nfo cus ont he most imp ortanto ne,t he ra c econdit ion.\nAr ace condit ion isas it uat ioni nw hicht he program does not givet he cor rec tresu ltf or som e\ninterleavingso ft he operat ions ofm ultipleg oroutines. Race condit ion sarep er nicious because",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 276,
      "page_label": "258"
    }
  },
  {
    "page_content": "interleavingso ft he operat ions ofm ultipleg oroutines. Race condit ion sarep er nicious because\nthey may remain latenti nap rogram anda pp ear infre quently, perhaps onlyu nder heavy load\nor w henu singc er tain comp ilers, p latfor ms, o ra rc hit ectures. Thi sm akes t hemh ardt o\nreproduce andd iagnos e.\nIt ist radition alt oe xplain the ser iousness ofr ace condit ion sthro ugh the metaph oro fﬁ nancial\nloss, sow e’ll con sider a simpleb an k accountp rogram.\n// Package bank implements a bank with only one account.\npackage bank\nvar balance int\nfunc Deposit(amount int) { balance = balance + amount }\nfunc Balance() int { return balance }\n(Wec ou ldh avew ritt ent he b odyo ft he Deposit func tiona s balance += amount,w hichi s\nequivalent, but the lon g erf or mwi l lsimplif ythee xplanation.)\nFo rap rogram thist rivial, wec an see atag lancet hata ny sequence ofc al lst o Deposit and\nBalance wi l lgive t he r ig hta nswer, t hati s, Balance wi l lreport t he s um o fa ll a mounts\npreviously dep osite d. Ho wever,i fw ec al lthes efunc tions not inas equence but con cur rently,\nBalance is n ol on g erg uarante e d to givet he r ig hta nswer. C on sider t he f ol low ing two\ngoro utines, whichr epresent two transactions onaj oint ban k account:\n// Alice:\ngo func() {\nbank.Deposit(200) // A1\nfmt.Println(\"=\", bank.Balance()) // A2\n}()\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 276,
      "page_label": "258"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.1. RACE CONDITIONS 259\n// Bob:\ngo bank.Deposit(100) // B\nAlice deposits $200, thenc he cks her bal ance,w hi leBobd ep osits $100. Sincet he steps A1 and\nA2occurc on cur rentlyw it hB,w ec annot pre dic ttheo rder in whicht he yhapp en. I nt uit ive ly, it\nmig hts eemt hatt here are o nlyt hree p ossibleo rder ings, whichw e’ll c al l ‘‘Alice ﬁrs t,’’‘‘Bob\nﬁrs t,’’and ‘‘Alice/B ob/A lice.’’Thef ol low ing table shows the value oft he balance var iable after\neach step. T he quote dst rings represent the print edb al ance slips.\nAlice first Bob first Alice/Bob/Alice\n000\nA1 200 B1 00 A1 200\nA2 \"= 200\" A1 300 B3 00\nB3 00 A2 \"= 300\" A2 \"= 300\"\nIn all cas estheﬁ nalb al ance is$ 300. Th eo nlyv ar iat ioni sw hether Alice’sb al ance slipi ncludes\nBob’st ransactiono rn ot,b ut the customers are sat isﬁed eit her way.\nButt hisi nt uit ion isw ro ng. T here isaf ourthp ossibleo ut com e,i nw hichB ob’sd ep osito cc urs\nin the midd leof Alice’sd ep osit, aftert he bal ance has beenr ead( balance + amount)b ut before\nit has beenu pdated (balance = ...), causingB ob’st ransactiont od is app ear.T hisi sb ecause\nAlice’sd ep osito perat ionA1is reallyas equence oft wo operat ions,ar eada nd a write;c al lthem\nA1rand A1w.H ere’st he pro blemat ic interleaving:\nData race\n0\nA1r 0 ... = balance + amount\nB1 00\nA1w 200 balance = ...\nA2 \"= 200\"\nAf ter A1r,t he expression balance + amountevaluatest o2 00, sot hisi st he value writt end ur-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 277,
      "page_label": "259"
    }
  },
  {
    "page_content": "B1 00\nA1w 200 balance = ...\nA2 \"= 200\"\nAf ter A1r,t he expression balance + amountevaluatest o2 00, sot hisi st he value writt end ur-\ning A1w,d espit ethei nt erveningd ep osit. The ﬁna lb al ance iso nly$ 200. Th eb an k is $ 100\nrich er at Bob’se xp ense.\nThisp rogram co nt ainsap ar tic ulark indo fr ace co ndit ion cal le d adata r ace.A data r ace\noccurs whene ver two goro utinesa ccesst he samev ar iable conc urrentlya nd atl east one oft he\naccessesi saw rite.\nThings get evenm essier if the dat a race invo l vesav ar iable ofat yp ethat isl argert hanasin gle\nmachinew ord, sucha sa ni nt erface,as tr ing ,or a s lice.T hisc odeu pdates x conc urrentlyt o\ntwos lices ofd if ferentl engt hs:\nvar x []int\ngo func() { x = make([]int, 10) }()\ngo func() { x = make([]int, 1000000) }()\nx[999999] = 1 // NOTE: undefined behavior; memory corruption possible!\nThev alue of x in the ﬁnals tatement isn ot deﬁne d;i tc ou ldb en il,o ras lice ofl engt h 10, ora\nslice ofl engt h 1,000,000. But recal lthat there are three partst oas lice: the point er, the lengt h,\nandt he cap acity.I ft he point erc om esf ro mtheﬁ rs tcall to make andt he lengt h comesf ro m\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 277,
      "page_label": "259"
    }
  },
  {
    "page_content": "ptg16105617\n260 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nthes econ d, x wouldb ea c himera, a slice whose nominal lengt his 1,000,000 but whose under-\nly ing array has only1 0e lements. I nt hise vent uality,s toring toe lement9 99,999 wou ldc lobb er\nan arbit rar y faraway memor ylo cat ion, wit hcons equences thata re imp ossible top re dic t and\nhard tod ebug andl ocalize.T hiss emanticm ineﬁeldi sc al le dun deﬁne d behavior andi sw el l\nknow nto C programmers; for tunatelyi ti sr arely as tro ubles ome in Go as in C.\nEv ent he notion thatac on cur rentp rogram isa ni nt erleaving ofs everal sequential programsi s\naf alse i nt uit ion.A sw e’ll see i nS ec tion 9.4, dat a races may hav ee vens trangero ut com es.\nMany p rogrammers—ev en s om e very c le ver ones—wi l l occasionallyo ffer j ustiﬁcation s for\nknow ndata races in t heir programs: ‘‘thec osto fm ut ual exclusioni st oo hig h,’’‘‘this log icis\non lyf or log ging,’’‘‘Id on’tm indi fI d ro psome mess ages,’’ands oo n. Th ea bs ence ofp ro blems\non a g iven comp iler andp latfor mmayg ivet hemf alse conﬁdence.A go o drule oft humb is\nthat th ere i sn os ucht hi n gas a ben ig n data r ace.S oh ow d ow ea void dat a races in our\nprog rams?\nWe’ll r ep eat the d eﬁnition,s ince i ti ss oi mp ortant: A dat a race occ ur sw hene ver t wo\ngoro utinesa ccesst he samev ar iable conc urrentlya nd atl east one oft he accessesi saw rite. I t\nfo llows fro mthis deﬁnition thatt here are three ways toa void a dat a race.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 278,
      "page_label": "260"
    }
  },
  {
    "page_content": "fo llows fro mthis deﬁnition thatt here are three ways toa void a dat a race.\nThe ﬁrs tway isn ot tow rite the var iable.C on sider the map below,w hichi sl azi lyp opu lated as\neach key isr equeste dfort he ﬁrs ttime.I f Icon is cal le dsequential ly, the program wor ksﬁ ne,\nbuti f Iconis cal le d conc urrently, there isad at a race accessingt he map.\nvar icons = make(map[string]image.Image)\nfunc loadIcon(name string) image.Image\n// NOTE: not concurrency-safe!\nfunc Icon(name string) image.Image {\nicon, ok := icons[name]\nif !ok {\nicon = loadIcon(name)\nicons[name] = icon\n}\nreturn icon\n}\nIf ins teadw ei nitialize the map wit hal lne cessary ent ries beforec re ating addition alg oroutines\nandn ever modif yit again, thena ny numbero fg oroutinesm ay safelyc al lIcon conc urrently\nsince eacho nlyr eads the map.\nvar icons = map[string]image.Image{\n\"spades.png\": loadIcon(\"spades.png\"),\n\"hearts.png\": loadIcon(\"hearts.png\"),\n\"diamonds.png\": loadIcon(\"diamonds.png\"),\n\"clubs.png\": loadIcon(\"clubs.png\"),\n}\n// Concurrency-safe.\nfunc Icon(name string) image.Image { return icons[name] }\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 278,
      "page_label": "260"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.1. RACE CONDITIONS 261\nIn t he e xamplea bove , the icons var iable isa ssig ned d ur ingp ackagei nitializat ion, which\nhapp ens before thep rogram’s main func tions tartsr unning. O ncei nitialize d,icons is never\nmo diﬁed.D at a st ruc tures thata re never m odiﬁed o ra re immut ablea re inherentlyc on cur-\nrenc y-s afea nd need nos ynchro nizat ion. But obv iou sly wec an’tu se thisa ppro ach ifu pdates\naree ss ent ial, as wit hab an k account.\nThes econ d way t oa void a dat a race i st oa void accessin gt he v ar iable fro m mu ltiple\ngoro utines. Thi si st he appro ach taken bym anyo ft he programsi nt he pre vious chapt er. F or\nexample, the main goroutine int he con cur rentw eb craw ler (§8.6) i st he soleg oroutine that\naccessest he seen map, and the broadcaster goro utine int he chats er ver (§8.10) i st he only\ngoro utine thata ccessest he clientsmap. T hese var iables areconﬁne dto a singleg oroutine.\nSinceo ther goroutinesc annot accesst he var iable direc tly,t he ymu stu se a channel tos endt he\nconﬁningg oroutine a requestt oq uer yor update the var iable.T hisi sw hati sm eant byt he Go\nmant ra ‘‘Do n ot communic ateb ys haring memor y;i ns tead, share memor y by communic at-\ning.’’Ag oroutine thatb ro kersa ccesst oac onﬁne dvar iable usingc hannel requests isc al le d a\nmoni tor goroutine fort hatv ar iable.F or example, the broadcaster goro utine monitors access\nto the clientsmap.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 279,
      "page_label": "261"
    }
  },
  {
    "page_content": "moni tor goroutine fort hatv ar iable.F or example, the broadcaster goro utine monitors access\nto the clientsmap.\nHere’st he b an k exampler ewritt enw it hthe balance var iable conﬁne dto a monit orgoro utine\ncalled teller:\ngopl.io/ch9/bank1\n// Package bank provides a concurrency-safe bank with one account.\npackage bank\nvar deposits = make(chan int) // send amount to deposit\nvar balances = make(chan int) // receive balance\nfunc Deposit(amount int) { deposits <- amount }\nfunc Balance() int {r eturn <-balances }\nfunc teller() {\nvar balance int // balance is confined to teller goroutine\nfor {\nselect {\ncase amount := <-deposits:\nbalance += amount\ncase balances <- balance:\n}\n}\n}\nfunc init() {\ngo teller() // start the monitor goroutine\n}\nEv enw henav ar iable cannot bec onﬁne dto a singleg oroutine for itse nt ire lifet ime, conﬁne-\nment may still beas olut ion tot he pro blem ofc on cur renta ccess. F or example, it’sc ommont o\nsh are a var iable bet weeng oroutinesi nap ip elineb yp assingi ts addressf ro mon est age tot he\nnext o verac hannel.I fe achs tage o ft he p ip eliner ef rainsf ro maccessingt he v ar iable after\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 279,
      "page_label": "261"
    }
  },
  {
    "page_content": "ptg16105617\n262 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nsendingi tt ot he next stage ,then alla ccessest ot he var iable ares equential.I ne ffec t,t he var i-\nable isc onﬁne dto one stage oft he pip eline, thenc onﬁne dto the next, ands oo n. Thi sd is ci-\nplinei ss om etimesc al le dserial conﬁnement.\nIn t he e xampleb elow, Cakesa re s er ial lyc onﬁne d,ﬁ rs t to the baker goro utine,t hent ot he\nicergoro utine:\ntype Cake struct{ state string }\nfunc baker(cooked chan<- *Cake) {\nfor {\ncake := new(Cake)\ncake.state = \"cooked\"\ncooked <- cake // baker never touches this cake again\n}\n}\nfunc icer(iced chan<- *Cake, cooked <-chan *Cake) {\nfor cake := range cooked {\ncake.state = \"iced\"\niced <- cake // icer never touches this cake again\n}\n}\nThet hirdw ay toa void a dat a race ist oa llow manyg oroutinest oa ccesst he var iable,b ut only\non e at a tim e. T hisa ppro ach i sk nown a s mu tuale xclu sion andi st he sub jec t of t he ne xt\nsection.\nExercis e 9.1: Addaf unction Withdraw(amount int) bool to t he gopl.io/ch9/bank1\nprog ram. Ther esults houldi ndic atew hether the transactions ucce e de dor fai le dduet oi ns uf-\nﬁcientf unds.T he mess age sentt ot he monitorg oroutine mustc ontain b ot hthea mountt o\nwithdraw andan ew channel overw hicht he monitorg oroutine can sendt he boole anresu lt\nback to Withdraw.\n9.2. Mutual Exclusion: sync.Mutex\nIn S ec tion 8.6, w eu sedab uf fered c hannel a saco unting s emap hore to e ns ure t hatn om ore",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 280,
      "page_label": "262"
    }
  },
  {
    "page_content": "9.2. Mutual Exclusion: sync.Mutex\nIn S ec tion 8.6, w eu sedab uf fered c hannel a saco unting s emap hore to e ns ure t hatn om ore\nthan 20 g oroutinesm ade sim ultane ous H TTPr equests. W it h thes amei de a, we c an u se a\nch annel ofc ap acity 1 toe ns ure thata tm osto ne goroutine accessesas hare dvar iable at a time.\nAs emaphore thatc ountso nlyt o1i sc al le d abinary semap hore.\ngopl.io/ch9/bank2\nvar (\nsema =m a k e ( c h a n  s t r u c t { } ,  1 )  / /  a  b i n a r y  s e m a p h o r e  g u a r d i n g  b a l a n c e\nbalance int\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 280,
      "page_label": "262"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.2. MUTUAL EXCLUSION: SYNC.MUTEX 263\nfunc Deposit(amount int) {\nsema <- struct{}{} // acquire token\nbalance = balance + amount\n<-sema // release token\n}\nfunc Balance() int {\nsema <- struct{}{} // acquire token\nb: =b alance\n<-sema // release token\nreturn b\n}\nThisp attern o f mu tuale xclu sion is s ou sefult hati ti ss up por ted d irec tly byt he Mutex type\nfrom t he sync package. I ts Lock method a cquires t he t oken (cal le d a lock)a nd i ts Unlock\nmethod releasesi t:\ngopl.io/ch9/bank3\nimport \"sync\"\nvar (\nmu sync.Mutex // guards balance\nbalance int\n)\nfunc Deposit(amount int) {\nmu.Lock()\nbalance = balance + amount\nmu.Unlock()\n}\nfunc Balance() int {\nmu.Lock()\nb: =b alance\nmu.Unlock()\nreturn b\n}\nEach timeag oroutine accessest he var iables oft he ban k (just balance here), itm ustc al lthe\nmu tex’s Lock method toa cquirea ne xc lusivel ock. I fs om eot her goroutine has acquired the\nlo ck, thiso perat ionw ill b lo cku nt i ltheo ther g oroutine c al ls Unlock andt he l ockb ecom es\navai lable again. Them ut ex guards thes hare dvar iables. Byc onvent ion,t he var iables guarde d\nby a m ut exa re declare dimmediate lya fter the declarat iono ft he mut exi ts elf.I fy ou deviate\nfrom this, bes uret od ocumenti t.\nTher eg iono fc odeb et ween Lock and Unlock in whichag oroutine isf re eto reada nd modif y\nthes hare dvar iables isc al le d acr iti cal sec tion.T he lockh older’sc al lto Unlock happ ens before",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 281,
      "page_label": "263"
    }
  },
  {
    "page_content": "thes hare dvar iables isc al le d acr iti cal sec tion.T he lockh older’sc al lto Unlock happ ens before\nanyo ther goroutine can acquiret he lockf or itself.I ti se ss ent ial thatt he goroutine release the\nlo cko ncei ti s ﬁnishe d,o na ll pathst hrough the function, includinge rror pat hs.\nTheb an kprog ram ab ove exemp liﬁes a common con cur rency pattern.A seto fe xp orted func-\ntion sencapsulates one orm orev ar iables sot hatt he onlyw ay toa ccesst he var iables ist hrough\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 281,
      "page_label": "263"
    }
  },
  {
    "page_content": "ptg16105617\n264 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nthes efunc tions (or met hods, for the var iables ofa no bj e ct). Eac hf unctiona cquires a m ut ex\nlo cka tt he beg inninga nd releasesi ta tt he end,t here bye ns uring thatt he shared var iables are\nnota ccessedc on cur rently. T hisa rrangement off unctions,m ut exl ock, andv ar iables isc al le d\na moni tor.( Thiso lder use oft he word ‘‘monitor’’inspired the ter m‘‘monitorg oroutine.’’Both\nus ess hare the meaningo fab ro ker thate ns uresv ar iables area ccesseds equential ly.)\nSincet he criticals ec tion sin the Depositand Balancefunc tions are sos hort—as inglel ine, no\nbranching—ca lling Unlock at the end i ss traig htfor ward. I nm orec omplex cr it icals ec tion s,\nespeci ally those inw hiche rror smu stb ed ealt wit hby retur ninge arly,i tc an beh ardt ot el lthat\ncallst o Lock and Unlock ares tr ictly paired ona ll paths. Go ’s defer st atement com est ot he\nrescue: byd efer r ingac al lto Unlock,t he criticals ec tion imp licitlye xtends tot he end o ft he\ncurrentf unction, fre eingu sf ro mhaving tor emembert oi ns ert Unlock callsi no ne orm ore\npl aces far fro mthec al lto Lock.\nfunc Balance() int {\nmu.Lock()\ndefer mu.Unlock()\nreturn balance\n}\nIn t he e xamplea bove , the Unlock exec utes af ter ther etur n st atement has r eadt he v alue of\nbalance,s ot he Balance func tioni sc on cur rency-s afe. A sa b onus,w en ol on g ern eed t he\nlo cal variable b.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 282,
      "page_label": "264"
    }
  },
  {
    "page_content": "balance,s ot he Balance func tioni sc on cur rency-s afe. A sa b onus,w en ol on g ern eed t he\nlo cal variable b.\nFurthermore, a d efer red Unlock wi l lrune veni ft he c riticals ec tion p anics, whic hm ay be\nimportant in programst hatm akeu se of recover (§5.10). A defer is marg inallym oree xp en-\nsive thana ne xplicitc al lto Unlock,b ut not enoug hto justify lessc le ar co de.A sa lways wit h\nconc urrentp rograms, fav or c larity a nd r esist p remature o pt imizat ion. W here p ossible, u se\ndeferandl et crit icals ec tion sextendt ot he end ofaf unction.\nConsider t he Withdraw func tionb elow.O ns uccess, itr educes t he b al ance byt he s peciﬁed\namount a nd r etur ns true.B ut i ft he a ccounth olds i ns ufﬁcientf unds f or t he t ransaction,\nWithdrawrestores the bal ance andr etur nsfalse.\n// NOTE: not atomic!\nfunc Withdraw(amount int) bool {\nDeposit(-amount)\nif Balance() < 0 {\nDeposit(amount)\nreturn false // insufficient funds\n}\nreturn true\n}\nThisf unctione vent ual lyg ives the cor rec tresu lt, but it has a nasty side effe ct. W hena ne xces-\nsive wit hdrawal isa tt emp ted,t he bal ance transientlyd ipsb elow zero. T hism ay cause a c on-\ncurrentw it hdrawal for a modests um tob es puriou sly rej e cte d. So ifB ob tries tob uy a sports\ncar, Alice can’tp ay f or her m or ningc of fee.T he pro blem i st hat Withdraw is n ot at o mic:i t\nconsists ofas equence oft hree sep arateo perat ions,e acho fw hicha cquires andt henr eleases\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 282,
      "page_label": "264"
    }
  },
  {
    "page_content": "consists ofas equence oft hree sep arateo perat ions,e acho fw hicha cquires andt henr eleases\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 282,
      "page_label": "264"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.2. MUTUAL EXCLUSION: SYNC.MUTEX 265\nthem ut exl ock, but not hingl ocks the whole sequence.\nIdeally, Withdraw shoulda cquiret he mut exl ocko ncea ro und the whole operat ion. How ever,\nthis att emp twon’tw or k:\n// NOTE: incorrect!\nfunc Withdraw(amount int) bool {\nmu.Lock()\ndefer mu.Unlock()\nDeposit(-amount)\nif Balance() < 0 {\nDeposit(amount)\nreturn false // insufficient funds\n}\nreturn true\n}\nDeposit tr ies t oa cquiret he m ut exl ockas econ d time b yc al ling mu.Lock(),b ut b ecause\nmu tex lo cksa re n ot re-entrant—it ’sn ot p ossiblet ol ockam ut ext hat’sa lready l ocke d—th is\nle adst oad eadlockw here not hingc an pro ceed,a nd Withdrawblocks forever.\nTherei sag ood reasonG o’sm ut exesa re not re-entrant. Th ep ur pos eof a mut exi st oe ns ure\nthat certain invar iants oft he shared var iables arem aintained atc riticalp ointsd ur ingp rogram\nexec ution.O ne oft he invar iants is‘‘no goroutine isa ccessingt he shared var iables,’’butt here\nmayb ea ddition ali nvar iants speciﬁct ot he d at a st ruc tures thatt he mut exg uard s.W hena\ngoro utine acquires a m ut exl ock, itm ay assume thatt he invar iants hold. W hi leit holds the\nlo ck, itm ay u pdatet he shar ed v ar iables sot hatt he i nvar iants aret emporar ily v iolate d.\nHo wever,w heni tr eleasest he l ock, i tm ustg uarante e that o rder has b eenr estore d andt he\ninvar iants holdo ncea gain. A lt hough a r e-entrantm ut exw ou lde ns ure t hatn oo ther",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 283,
      "page_label": "265"
    }
  },
  {
    "page_content": "invar iants holdo ncea gain. A lt hough a r e-entrantm ut exw ou lde ns ure t hatn oo ther\ngoro utinesa re a ccessingt he sh ared v ar iables, itc annot p ro tec t thea ddition ali nvar iants of\nthos e var iables.\nAc ommons olut ion ist od iv ide a functions ucha s Deposit into two:a nu nexp orted function,\ndeposit,t hata ssumest he locki sa lready helda nd doest he realw or k,a nd ane xp orted func-\ntion Deposit that acquires the lockb eforec al lingdeposit.W ec an thene xpress Withdraw in\ntermso f depositli ket his:\nfunc Withdraw(amount int) bool {\nmu.Lock()\ndefer mu.Unlock()\ndeposit(-amount)\nif balance < 0 {\ndeposit(amount)\nreturn false // insufficient funds\n}\nreturn true\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 283,
      "page_label": "265"
    }
  },
  {
    "page_content": "ptg16105617\n266 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nfunc Deposit(amount int) {\nmu.Lock()\ndefer mu.Unlock()\ndeposit(amount)\n}\nfunc Balance() int {\nmu.Lock()\ndefer mu.Unlock()\nreturn balance\n}\n// This function requires that the lock be held.\nfunc deposit(amount int) { balance += amount }\nOf course,t he deposit func tions hown h erei ss ot rivialt hatar ealist ic Withdraw func tion\nwouldn’tb ot her cal lingi t, but non ethelessi ti llustrates the princip le.\nEncapsulat ion( §6.6), b yr educingu nexp ected i nt erac tions i na p rogram, h elps u sm aintain\ndata str ucturei nvar iants. For the samer eason, encapsulat iona ls ohelps usm aintain conc ur-\nrenc yinvar iants. Wheny ou use a mut ex, makes uret hatb ot hit and the var iables itg uard sare\nnote xp orted,w hether the yarep ackage-le vel var iables ort he ﬁelds ofas tr uct.\n9.3. Read/Writ eM utexes: sync.RWMutex\nIn a ﬁto fa nxiet y af ter seeingh is $100 depositv anish wit houtat race,B ob writesap rogram to\nch eck his ban kbalanceh undredso ft imes a s econ d.H er unsi ta th om e,a tw or k,a nd onh is\nph one.T he b an k notices t hatt he incre asedt rafﬁci sd el aying d ep osits andw it hdrawals,\nbecaus eal lthe Balance re quests run s equential ly, holdingt he locke xc lusivelya nd temporar-\nilyp re venting other goroutinesf ro mrunning.\nSincet he Balance func tiono nlyn eedst o re ad thes tate oft he var iable,i tw ou ldi nf ac tbe safe",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 284,
      "page_label": "266"
    }
  },
  {
    "page_content": "ilyp re venting other goroutinesf ro mrunning.\nSincet he Balance func tiono nlyn eedst o re ad thes tate oft he var iable,i tw ou ldi nf ac tbe safe\nform ultiple Balance callst or un conc urrently, sol on gas no Deposit or Withdraw call isr un-\nning. I nt hiss cenar io we n eed a s peci al kind o fl ockt hata llowsr ead-onlyo perat ions t o\nproceed inp aral lelw it heach other,b ut write o perat ions toh avef ullye xc lusivea ccess. This\nlo cki sc al le d amu ltipl ere aders, single writer lo ck, and in Go it’sp rovide dby sync.RWMutex:\nvar mu sync.RWMutex\nvar balance int\nfunc Balance() int {\nmu.RLock() // readers lock\ndefer mu.RUnlock()\nreturn balance\n}\nThe Balance func tionn ow c al lst he RLock and RUnlock methodst oa cquirea nd rel ease a\nre aders or sh are d lo ck. The Deposit func tion, whic hi su nchange d,c al lst he mu.Lock and\nmu.Unlockmethodst oa cquirea nd release a writ er or ex clu siv elo ck.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 284,
      "page_label": "266"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.4. MEMOR YS YNCHRONIZATION 267\nAf ter thisc hange ,most ofB ob’s Balance re quests run in paral lelw it heach other and ﬁni sh\nmore quickly. T he locki sa vai lable for moreo ft he time, and Deposit re quests can pro ceed in\nat imelym anner.\nRLockcanb eu sedo nlyi ft here are now ritest os hare dvar iables in the criticals ec tion.I ng en-\neral,w es houldn ot a ssume t hat logically re ad-onlyf unctions o rm et hodsd on’ta ls o up date\nsome var iables. For example, a met hod thata pp earst ob easim plea ccessorm ig hta ls oincre-\nment ani nt ernal usage count er, oru pdateac ache sot hatr ep eat cal lsa re faster. I fi nd ou bt,\nus ean exclusive Lock.\nIt’so nlyp roﬁtablet ou se an RWMutex when mosto ft he goroutinest hata cquiret he locka re\nre aders, andt he locki su nder cont ent ion,t hati s, goroutinesr outinelyh avet ow aitt oa cquire\nit.A n RWMutex re quires morec omplex internal bookkeeping ,making its lowert hanar egu lar\nmu tex for uncontended locks.\n9.4. Memory Synchronization\nYo umayw on der why the Balance method needsm ut ual exclusion, either channel-b ased or\nmu tex-b ased.A fter all, unlike Deposit,i tc on sists onlyo fas ingleo perat ion, sot here isn o\ndangero fa nother goroutine exe cut ing ‘‘in the midd le’’of it.T here are two reasons we need a\nmu tex. The ﬁrs t is thati t’se qu allyi mp ortantt hat Balance note xe cut ein the midd leof som e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 285,
      "page_label": "267"
    }
  },
  {
    "page_content": "mu tex. The ﬁrs t is thati t’se qu allyi mp ortantt hat Balance note xe cut ein the midd leof som e\not her operat ionl ike Withdraw.T he secon d(andm ores ubtle) reasoni st hats ynchro nizat ion\nis a bout moret hanj ustt he o rder o fe xe cut ion of multipleg oroutines; sy nchronizat iona ls o\naf fec tsm emor y.\nIn a moder n comp utert here may bed ozenso fp ro cessors,e achw it h itso wn local cache oft he\nmain mem or y.F or e fﬁciency,w ritest om emor y areb uf fered w it hin eac hp ro cessora nd\nﬂushe d outt om ain mem or y on lyw henn ecessary.T he y maye venb ec ommitt edt om ain\nmemory inad if ferento rder thant he ywere writt enb yt he writing goro utine.S ynchro nizat ion\npr imitivesl ikec hannel c ommunic ations a nd m ut exo perat ions c ause t he p ro cessort oﬂ ush\nouta nd commita ll its accumulated writess ot hatt he effec tso fg oroutine exe cut ion up tot hat\npointa re guarante e d to bev isible tog oroutinesr unningo no ther pro cessors.\nConsider the possibleo ut putso ft he fol low ing snipp eto fc ode:\nvar x, y int\ngo func() {\nx=1 // A1\nfmt.Print(\"y:\", y, \" \") // A2\n}()\ngo func() {\ny=1 // B1\nfmt.Print(\"x:\", x, \" \") // B2\n}()\nSincet hese t wo go ro utinesa re c on cur renta nd a ccesss hare d var iables wit houtm ut ual\nexclusion, t here i sad at a race,s ow es houldn ot b es ur prisedt hatt he p rogram i sn ot\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 285,
      "page_label": "267"
    }
  },
  {
    "page_content": "ptg16105617\n268 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\ndeter minist ic. W em ig hte xp ect itt op rint any one oft hese fourr esults, whichc or respond to\nintuit ive int erleavingso ft he lab ele dst atementso ft he program:\ny:0 x:1\nx:0 y:1\nx:1 y:1\ny:1 x:1\nThef ourthl inec ou ldb ee xplained b yt he s equence A1,B1,A2,B2 or b y B1,A1,A2,B2,f or\nexample. H ow ever, these two out com esm ig htc om eas a sur prise:\nx:0 y:0\ny:0 x:0\nbutd ep endingo nt he c ompi ler,C PU,a nd manyo ther fac tors,t he y canh appent oo.W hat\npossible interleaving oft he fours tatementsc ou lde xplain them?\nWi thin a singleg oroutine,t he effec tso fe achs tatement are guarante e d to occ ur in the order of\nexec ution;g oroutinesa re sequ ent ial lyc onsi stent.B ut int he abs ence ofe xplicits ynchro niza-\ntion usingac hannel orm ut ex, there isn og uarante ethat eventsa re seeni nt he sameo rder by\nal lgoro utines. A lt hough goroutine A mu sto bs erve the effec tof the write x=1 before itr eads\nthev alue of y,i td oesn ot necessarily obs erve the write to y done byg oroutine B,s o A may\npr int a stale value of y.\nIt ist empt ing tot ry tou nderst and con cur rency asi fi tc or respond sto some interleaving oft he\nst atementso fe achg oroutine,b ut ast he examplea bove shows, thisi sn ot how a moder n com-\npi ler orC PU wor ks. B ecause the assig nmenta nd the Printrefert od if ferentv ar iables, a com-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 286,
      "page_label": "268"
    }
  },
  {
    "page_content": "pi ler orC PU wor ks. B ecause the assig nmenta nd the Printrefert od if ferentv ar iables, a com-\npi ler may co nclude t hatt he o rder o ft he t wo s tatementsc annot a ffec t ther esult, an ds wap\nthem. I ft he two goro utinese xe cut e on dif ferentC PUs, eachw it h itso wn cach e,wr itesb yo ne\ngoro utine are not visible tot he other goroutine’s Print until the cachesa re synchro nize dwith\nmain memor y.\nAl l thes e conc urrency p ro blemsc an b ea voide d by t he c on sistent use o fs imple, e st ablishe d\npatt erns. W here possible, conﬁne v ar iables toas ingleg oroutine;f or all other variables, use\nmu tuale xc lusion.\n9.5. Lazy Initialization: sync.Once\nIt isg ood prac tice tod efer an expensive initializat ions tepu nt i lthem om ent iti sn eeded.I ni-\ntializingav ar iable upf ro nti ncre asest he start-upl atency ofap rogram andi su nnecessary if\nexec ution doesn’ta lways reach the par tof the program thatu sest hatv ar iable.L et’sr etur nto\nthe iconsvar iable wes aw earlier in the chapt er:\nvar icons map[string]image.Image\nThisv ersiono f Iconus es lazy ini tializati on:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 286,
      "page_label": "268"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.5. LAZY INITIALIZATION: SYNC.ONCE 269\nfunc loadIcons() {\nicons = map[string]image.Image{\n\"spades.png\": loadIcon(\"spades.png\"),\n\"hearts.png\": loadIcon(\"hearts.png\"),\n\"diamonds.png\": loadIcon(\"diamonds.png\"),\n\"clubs.png\": loadIcon(\"clubs.png\"),\n}\n}\n// NOTE: not concurrency-safe!\nfunc Icon(name string) image.Image {\nif icons == nil {\nloadIcons() // one-time initialization\n}\nreturn icons[name]\n}\nFo rav ar iable accessedb yo nlyas ingleg oroutine,w ec an use the pattern above ,butt hisp at-\ntern isn ot safei f Icon is cal le d conc urrently. L iket he ban k’so riginal Deposit func tion, Icon\nconsists ofm ultiples teps: itt ests whether icons is nil,t heni tl oads the icons,t heni tu pdates\nicons to a non-ni l value.I nt uit ion mig hts ug gestt hatt he wor stp ossibleo ut com e of the race\ncondit ion above i st hatt he loadIcons func tioni sc al le dseveral times. Whi le theﬁ rs t\ngoro utine isb usyl oadingt he icons,a nother goroutine ent ering Icon wouldﬁ nd the v ar iable\nst i l lequalt o nil,a nd wou lda ls ocall loadIcons.\nButt hisi nt uit ion isa ls o wron g.( We hop e that byn ow you are developingan ew i nt uit ion\nab out con cur rency,t hati nt uit ion sab out con cur rency a re not tob et rusted!) R ecal lthed is-\ncussiono fm emor yfrom Sec tion 9.4. I nt he abs ence ofe xplicits ynchro nizat ion, the compi ler\nandC PU aref re eto reorder accessest om emor yin anyn umbero fw ays, sol on gas the beh av-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 287,
      "page_label": "269"
    }
  },
  {
    "page_content": "andC PU aref re eto reorder accessest om emor yin anyn umbero fw ays, sol on gas the beh av-\nioro fe achg oroutine iss equential lyc on sistent.O ne possibler eorder ingo ft he statementso f\nloadIconsis shown below.I ts torest he emp tym ap in the iconsvar iable beforep opu lat ingi t:\nfunc loadIcons() {\nicons = make(map[string]image.Image)\nicons[\"spades.png\"] = loadIcon(\"spades.png\")\nicons[\"hearts.png\"] = loadIcon(\"hearts.png\")\nicons[\"diamonds.png\"] = loadIcon(\"diamonds.png\")\nicons[\"clubs.png\"] = loadIcon(\"clubs.png\")\n}\nCons equently, a goroutine ﬁnding icons to ben on-ni lmayn ot assume thatt he i nitializat ion\nof the var iable isc omplete.\nThes implestc or rec tway toe ns ure thata ll goroutineso bs erve the effec tso f loadIcons is to\nsy nchro nize themu singam ut ex:\nvar mu sync.Mutex // guards icons\nvar icons map[string]image.Image\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 287,
      "page_label": "269"
    }
  },
  {
    "page_content": "ptg16105617\n270 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\n// Concurrency-safe.\nfunc Icon(name string) image.Image {\nmu.Lock()\ndefer mu.Unlock()\nif icons == nil {\nloadIcons()\n}\nreturn icons[name]\n}\nHo wever,t he costo fe nforcingm ut ual lye xc lusivea ccesst o icons is thatt wo goro utinesc an-\nnota ccesst he var iable conc urrently, eveno ncet he var iable has beens afelyi nitialize d andw ill\nne ver bem odiﬁed again. Thi ss ug gests a multiple-readersl ock:\nvar mu sync.RWMutex // guards icons\nvar icons map[string]image.Image\n// Concurrency-safe.\nfunc Icon(name string) image.Image {\nmu.RLock()\nif icons != nil {\nicon := icons[name]\nmu.RUnlock()\nreturn icon\n}\nmu.RUnlock()\n// acquire an exclusive lock\nmu.Lock()\nif icons == nil { // NOTE: must recheck for nil\nloadIcons()\n}\nicon := icons[name]\nmu.Unlock()\nreturn icon\n}\nTherea re now two criticals ec tion s.T he goroutine ﬁrs t acquires a r eader lo ck,c on sults t he\nmap, thenr eleasest he lock. I fa ne nt ryw as found (thec ommonc as e),it isr etur ned.I fn o\nentr y was found,t he goroutine acquires a w riterl ock. Ther ei sn ow ay tou pg radeas hare d\nlo ckt oa ne xc lusiveo ne wit houtﬁ rs tre leasingt he shared lock, sow em ustr eche ckt he icons\nvar iable in cas e anot her goroutine already initialize dit int he int erim.\nThep attern a bove g ives u sg re aterc on cur rency b ut i sc omplex an dt hu s er ror-pro ne.\nFo rtunate ly, the sync packagep rovides a speci alizeds olut ion tot he pro blem ofo ne-t imei ni-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 288,
      "page_label": "270"
    }
  },
  {
    "page_content": "Fo rtunate ly, the sync packagep rovides a speci alizeds olut ion tot he pro blem ofo ne-t imei ni-\ntializat ion:sync.Once.C on ceptu ally, a Once consists ofam ut exa nd a b oole an var iable that\nre cords w hether ini tializat ionh as taken p lace; t he m ut exg uard s both th eb oole an andt he\nclient’sd at a st ruc tures. Thes olem et hod, Do,a ccepts t he i nitializat ionf unctiona si ts argu-\nment.L et’su se Onceto simplif ythe Iconfunc tion:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 288,
      "page_label": "270"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.6. THE RACE DETECTOR 271\nvar loadIconsOnce sync.Once\nvar icons map[string]image.Image\n// Concurrency-safe.\nfunc Icon(name string) image.Image {\nloadIconsOnce.Do(loadIcons)\nreturn icons[name]\n}\nEach cal lto Do(loadIcons) lo cks the mut exa nd che cks the boole an var iable.I nt he ﬁrs tcall,\nin whic ht he v ar iable isf alse, Do calls loadIcons ands ets t he v ar iable tot rue. S ubsequent\ncallsd on ot hing, b ut t he m ut exs ynchro nizat ione ns urest hatt he e ffec tso f loadIcons on\nmemory (sp eciﬁcally, icons)b ecom evisiblet oa ll goroutines. Using sync.Once in thisw ay,\nwe c an av oids haring v ar iables wit h ot her g oroutinesu nt i lthey h aveb eenp ro perly c on-\nst ruc ted.\nExercis e 9.2:Re writ ethe PopCount examplef ro mSection2 .6.2 sot hati ti nitializes the looku p\ntableu sing sync.Once theﬁ rs t time iti sn eeded.( Re alist ically, the c osto fs ynchro nizat ion\nwouldb ep ro hibit ive for a small and hig hly opt imize dfunc tionl ike PopCount.)\n9.6. The Rac eD et ector\nEv enw it htheg re atest ofc are, it’sa ll too easy tom akec on cur rency mistakes. F or tunately, the\nGo runtime and toolchain aree quip ped wit has op histicate dande asy-to-use dynamic analysis\nto ol, the ra c edete ctor.\nJu sta dd the -raceﬂag toy our go build, go run,o r go testcommand. T hisc ausest he com-\npi ler tob ui ldam odiﬁed v ersiono fy oura pp lic ationo rt estw it haddition ali ns trument ation",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 289,
      "page_label": "271"
    }
  },
  {
    "page_content": "pi ler tob ui ldam odiﬁed v ersiono fy oura pp lic ationo rt estw it haddition ali ns trument ation\nthat effe ctive lyr ecords all accessest os hare dvar iables thato cc urre dduring exe cut ion,along\nwith thei dentity oft he goroutine thatr eado rw ro tet he var iable.I na ddition,t he modiﬁed\nprog \nram re cords a ll s ynchro nizat ione vents, sucha s go st atements, c hannel operat ions,a nd\ncallst o (*sync.Mutex).Lock, (*sync.WaitGroup).Wait,a nd s oo n. (Th ec ompletes et of\nsy nchro nizat ione ventsi ss peciﬁed byt he TheG oM emor yMo d el do cumentt hata ccomp anies\nthel angu ages peciﬁcation.)\nTher ace detec tor studies thiss treamo fe vents, look ing for cas es in whicho ne goroutine reads\nor writesas hare dvar iable thatw as mostr ecentlyw ritt enb yad if ferentg oroutine wit houta n\nintervenings ynchro nizat iono perat ion. Thisi ndic ates a conc urrenta ccesst ot he shared var i-\nable,a nd thu sad at a race.T he toolp rintsar ep ort thati ncludes the identity oft he var iable,\nandt he stackso fa ctivef unctionc al lsi nt he readingg oroutine and the writing goro utine.T his\nis us uallys ufﬁcientt op inpointt he p ro blem. S ec tion 9.7 co nt ainsa ne xampleo ft he r ace\ndetec tor ina ction.\nTher ace det ec tor r ep ortsa ll d at a races t hatw erea ctuallye xe cut ed. H ow ever, itc an o nly\ndetec trace condit ion sthat occ urduring a run; itc annot prove thatn on ewi l lever occ ur.F or",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 289,
      "page_label": "271"
    }
  },
  {
    "page_content": "detec trace condit ion sthat occ urduring a run; itc annot prove thatn on ewi l lever occ ur.F or\nbest results, makes uret haty ourt ests exercise yourp ackages usingc on cur rency.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 289,
      "page_label": "271"
    }
  },
  {
    "page_content": "ptg16105617\n272 CH\nAPTER CONCURRENCY WITH SHARED VARIABLES9.\nDuet\noe xt rabookkeeping ,ap rogram bui ltw it hrace detec tion needsm oret imea nd memory\nto run, but the overhe adi st olerable evenf or manyp ro duc tionj obs. F or inf requentlyo cc ur-\nring race condit ion s,l etting the race detec tor doi ts job can saveh ours ord ays ofd ebug ging.\n9.\n7. Example: ConcurrentN on-Blocking Cache\nIn \nthiss ec tion,w e’ll b ui ld a concur rentn on-blocki n gcache, an abs trac tiont hats olves a\nproblem t hata riseso ften in r eal-wor ldc on cur rentp rogramsb ut i sn ot w el l addressedb y\nexist ing librar ies. Thisi st he pro blem of memoizing af unction, thati s, cachingt he resulto fa\nfunc tions ot hati tn eed b ec ompute don lyo nce. O ur solut ion will b ec on cur rency-s afea nd\nwi l lavoidt he content ion ass oci ated wit hdesig nsb as edo nas inglel ockf or the whole cache.\nWe’ll u se t he httpGetBody func \ntionb elow asa ne xampleo ft he t yp e of f unctionw em ig ht\n           \n        \nwan\nt t\no m\nemoize. It m\nakes an HTTP GET r\nequest a\nnd r\neads t\nhe r\nesponse b\nody.  Cal ls to this \nf\nunc tion a\nre relative ly exp \nensive , s\no we’d l\nike t\no a\nvoid rep eat ing t\nhem u\nnnecessarily.\nfunc httpGetBody(url string) (interface{}, error) {\nresp, err := http.Get(url)\nif err != nil {\nreturn nil, err\n}\ndefer resp.Body.Close()\nreturn ioutil.ReadAll(resp.Body)\n}\nTh\ne ﬁnall ineh ides a minor subtlet y. ReadAllreturnst wo \nresults, a []byteanda n error,b ut\nsince",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 290,
      "page_label": "272"
    }
  },
  {
    "page_content": "return ioutil.ReadAll(resp.Body)\n}\nTh\ne ﬁnall ineh ides a minor subtlet y. ReadAllreturnst wo \nresults, a []byteanda n error,b ut\nsince \nthese a re a ssig nable tot he d eclare d resu ltt yp es of httpGetBody— interface{} an\nd\nerror,r espectively—we \ncan retur n ther esulto ft he cal lwithoutf ur thera do.W ec hose this\nreturn t yp e for httpGetBody so \nthati tc onformst ot he t yp e of f unctions t hato ur cac he is\ndesig ned tom emoize.\nHere’st he ﬁrs tdraf tof the cache:\ngopl.io/ch9/memo1\n// Package memo provides a concurrency-unsafe\n// memoization of a function of type Func.\npackage memo\n// A Memo caches the results of calling a Func.\ntype Memo struct {\nfF unc\ncache map[string]result\n}\n// Func is the type of the function to memoize.\ntype Func func(key string) (interface{}, error)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 290,
      "page_label": "272"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.7. EXAMPLE: CONCURRENT NON-BLOCKING CACHE 273\ntype result struct {\nvalue interface{}\nerr error\n}\nfunc New(f Func) *Memo {\nreturn &Memo{f: f, cache: make(map[string]result)}\n}\n// NOTE: not concurrency-safe!\nfunc (memo *Memo) Get(key string) (interface{}, error) {\nres, ok := memo.cache[key]\nif !ok {\nres.value, res.err = memo.f(key)\nmemo.cache[key] = res\n}\nreturn res.value, res.err\n}\nA Memo inst anceh olds t he f unction f to m emoize,o ft yp e Func,a nd the c ache,w hichi sa\nmappingf ro mst rings to results. Each result is simply the pair ofr esults retur ned byac al l\nto f—av alue and an error.W e’ll shows everal variation s ofMemo as the desig nprog resses, but\nal lwi l lsh are these basic aspects.\nAn e xampleo fh ow tou se Memo appearsb elow.F or e ache lementi nas treamo fi ncoming\nURLs, wec al lGet,l og gingt he latency oft he cal l andt he amounto fd at ait retur ns:\nm: =m emo.New(httpGetBody)\nfor url := range incomingURLs() {\nstart := time.Now()\nvalue, err := m.Get(url)\nif err != nil {\nlog.Print(err)\n}\nfmt.Printf(\"%s, %s, %d bytes\\n\",\nurl, time.Since(start), len(value.([]byte)))\n}\nWe can u se t he testing package( thet opic o fC hapt er1 1) t os ystematicallyi nv est igatet he\nef fec t of m emoizat ion. F ro m thet esto ut put below,w es ee t hatt he U RL s treamc ontains\ndup lic ates, andt hata lt hough t he ﬁrs t call t o (*Memo).Get fore achU RL takes hundr edso f",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 291,
      "page_label": "273"
    }
  },
  {
    "page_content": "dup lic ates, andt hata lt hough t he ﬁrs t call t o (*Memo).Get fore achU RL takes hundr edso f\nmi l lisecond s,t he secon dre questr etur nst he samea mounto fd at a in under a millis econd.\n$g ot est -v gopl.io/ch9/memo1\n=== RUN Test\nhttps://golang.org, 175.026418ms, 7537 bytes\nhttps://godoc.org, 172.686825ms, 6878 bytes\nhttps://play.golang.org, 115.762377ms, 5767 bytes\nhttp://gopl.io, 749.887242ms, 2856 bytes\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 291,
      "page_label": "273"
    }
  },
  {
    "page_content": "ptg16105617\n274 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nhttps://golang.org, 721ns, 7537 bytes\nhttps://godoc.org, 152ns, 6878 bytes\nhttps://play.golang.org, 205ns, 5767 bytes\nhttp://gopl.io, 326ns, 2856 bytes\n--- PASS: Test (1.21s)\nPASS\nok gopl.io/ch9/memo1 1.257s\nThist este xe cut esa ll cal lst o Getsequential ly.\nSinceH TTPr equests ar eag re ato pp ortunity f or p aral lelism, let’sc hange t he t ests ot hati t\nmakesa ll requests conc urrently. T he testu sesa sync.WaitGroup to waitu nt i lthel astr equest\nis completeb eforer etur ning.\nm: =m emo.New(httpGetBody)\nvar n sync.WaitGroup\nfor url := range incomingURLs() {\nn.Add(1)\ngo func(url string) {\nstart := time.Now()\nvalue, err := m.Get(url)\nif err != nil {\nlog.Print(err)\n}\nfmt.Printf(\"%s, %s, %d bytes\\n\",\nurl, time.Since(start), len(value.([]byte)))\nn.Done()\n}(url)\n}\nn.Wait()\nThet estr unsm uchf aster, but unfor tunatelyi ti su nlikelyt ow or kcorrec tly all the time. W e\nmayn ot ice unexp ected c ache m isses, o rc ache h itst hatr etur n incorrec t values, o re ven\ncrashes.\nWo rse,i ti sl ikelyt ow or kcorrec tly some of the time, sow em ay not evenn ot ice thati th as a\nproblem. B ut ifw er un itw it hthe -race ﬂag , ther ace detec tor (§9.6) o ften printsar ep ort\nsuch ast hiso ne:\n$g ot est -run=TestConcurrent -race -v gopl.io/ch9/memo1\n=== RUN TestConcurrent\n...\nWARNING: DATA RACE\nWrite by goroutine 36:\nruntime.mapassign1()\n~/go/src/runtime/hashmap.go:411 +0x0\ngopl.io/ch9/memo1.(*Memo).Get()",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 292,
      "page_label": "274"
    }
  },
  {
    "page_content": "...\nWARNING: DATA RACE\nWrite by goroutine 36:\nruntime.mapassign1()\n~/go/src/runtime/hashmap.go:411 +0x0\ngopl.io/ch9/memo1.(*Memo).Get()\n~/gobook2/src/gopl.io/ch9/memo1/memo.go:32 +0x205\n...\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 292,
      "page_label": "274"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.7. EXAMPLE: CONCURRENT NON-BLOCKING CACHE 275\nPrevious write by goroutine 35:\nruntime.mapassign1()\n~/go/src/runtime/hashmap.go:411 +0x0\ngopl.io/ch9/memo1.(*Memo).Get()\n~/gobook2/src/gopl.io/ch9/memo1/memo.go:32 +0x205\n...\nFound 1 data race(s)\nFAIL gopl.io/ch9/memo1 2.393s\nTher eference to memo.go:32 te lls us tha tt wo go ro utinesh aveu pdated t he cache map\nwithouta ny int ervenings ynchro nizat ion. Getis not con cur rency-s afe: ith as a dat a race.\n28 func (memo *Memo) Get(key string) (interface{}, error) {\n29 res, ok := memo.cache[key]\n30 if !ok {\n31 res.value, res.err = memo.f(key)\n32 memo.cache[key]=r es\n33 }\n34 return res.value, res.err\n35 }\nThes implestw ay tom aket he cache con cur rency-s afei st ou se monit or-b ased synchro niza-\ntion.A ll wen eed to do is add a m ut ext ot he Memo,a cquiret he mut exl ock at the start of Get,\nandr elease itb efore Get returns, s ot hatt he two cache op erat ions occ urwithin the critical\nsection:\ngopl.io/ch9/memo2\ntype Memo struct {\nfF unc\nmu sync.Mutex // guards cache\ncache map[string]result\n}\n// Get is concurrency-safe.\nfunc (memo *Memo) Get(key string) (value interface{}, err error) {\nmemo.mu.Lock()\nres, ok := memo.cache[key]\nif !ok {\nres.value, res.err = memo.f(key)\nmemo.cache[key] = res\n}\nmemo.mu.Unlock()\nreturn res.value, res.err\n}\nNo wther ace detec tor iss ilent, evenw henr unningt he tests conc urrently. U nfor tunatelyt his",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 293,
      "page_label": "275"
    }
  },
  {
    "page_content": "}\nmemo.mu.Unlock()\nreturn res.value, res.err\n}\nNo wther ace detec tor iss ilent, evenw henr unningt he tests conc urrently. U nfor tunatelyt his\nch ange to Memore verseso ur earlier per for mance gains. B yh oldingt he lockf or the durat iono f\neach cal lto f, Getserializes allt he I/O operat ions we int ended top aral lelize.W hatw en eed is\na non-blocki n gcach e,on ethat does not ser ialize cal lst ot he functioni tm emoizes.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 293,
      "page_label": "275"
    }
  },
  {
    "page_content": "ptg16105617\n276 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nIn the next implementation of Get,b elow,t he cal lingg oroutine acquires the lockt wice: once\nfort he l ooku p,a nd the nas econ d time f or t he u pdatei ft he l ooku p returned n ot hing. I n\nbetween, other goroutinesa re fre eto use the cache.\ngopl.io/ch9/memo3\nfunc (memo *Memo) Get(key string) (value interface{}, err error) {\nmemo.mu.Lock()\nres, ok := memo.cache[key]\nmemo.mu.Unlock()\nif !ok {\nres.value, res.err = memo.f(key)\n// Between the two critical sections, several goroutines\n// may race to compute f(key) and update the map.\nmemo.mu.Lock()\nmemo.cache[key] = res\nmemo.mu.Unlock()\n}\nreturn res.value, res.err\n}\nThep er for mance improv esa gain, but now wen ot ice thats om eURLs areb eingf etch edt wice.\nThish appens whent wo orm oreg oroutinesc al lGetfort he sameU RL at aboutt he samet ime.\nBoth con sultt he cache,ﬁ nd no v alue there ,andt henc al lthes lowf unction f.T henb ot hof\nthem updatet he map wit hther esultt he yobtained.O ne oft he results iso verwritt enb yt he\not her.\nIdeallyw e’dl iket oa void thi sr edundant w or k.T hisf eature i ss om etimesc al le ddu p licate\nsup pressi on.I nt he versiono f Memo below, eachm ap elementi sap oint ert oa n entry st ruc t.\nEach entry cont ainst he memoize dresu lto fac al lto the function f,a sb efore, but it addition-\nal lyc ontainsac hannel cal le dready.J usta fter the entry’s result hasb eens et, thisc hannel",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 294,
      "page_label": "276"
    }
  },
  {
    "page_content": "al lyc ontainsac hannel cal le dready.J usta fter the entry’s result hasb eens et, thisc hannel\nwi l lbe clos ed, to broadcast (§8.9) t oa ny other goroutinest hati ti sn ow safef or themt or ead\nther esultf ro mthe entry.\ngopl.io/ch9/memo4\ntype entry struct {\nres result\nready chan struct{} // closed when res is ready\n}\nfunc New(f Func) *Memo {\nreturn &Memo{f: f, cache: make(map[string]*entry)}\n}\ntype Memo struct {\nfF unc\nmu sync.Mutex // guards cache\ncache map[string]*entry\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 294,
      "page_label": "276"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.7. EXAMPLE: CONCURRENT NON-BLOCKING CACHE 277\nfunc (memo *Memo) Get(key string) (value interface{}, err error) {\nmemo.mu.Lock()\ne: =m emo.cache[key]\nif e == nil {\n// This is the first request for this key.\n// This goroutine becomes responsible for computing\n// the value and broadcasting the ready condition.\ne=&entry{ready: make(chan struct{})}\nmemo.cache[key] = e\nmemo.mu.Unlock()\ne.res.value, e.res.err = memo.f(key)\nclose(e.ready) // broadcast ready condition\n}e lse {\n// This is a repeat request for this key.\nmemo.mu.Unlock()\n<-e.ready // wait for ready condition\n}\nreturn e.res.value, e.res.err\n}\nAc al lto Getnowi nv olves acquir ingt he mut exl ockt hatg uard sthe cachemap, looking int he\nmapf or a poi nt er to an exi st ing entry,a llocat inga nd i ns ertingan ew entry if n on e was\nfound, thenr eleasingt he lock. I ft here was an exist ing entry,i ts value isn ot necessarily ready\nyet—an ot her g oroutine c ou lds till b ec al lingt he sl ow f unction f—so t he c al lingg oroutine\nmu stw aitf or the entry’s ‘‘re ady’’condit ion beforei tr eads the entry’s result.I td oest hisb y\nre adingav alue fro mthe readych annel,s ince thiso perat ionb lo cks until the channel isc los ed.\nIf there was noe xist ing entry,t henb yi ns ertingan ew ‘‘notr eady’’entry into the map,t he\ncurrentg oroutine b ecom esr esponsible f or i nv oking t he sl ow f unction, updat ingt he entry,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 295,
      "page_label": "277"
    }
  },
  {
    "page_content": "currentg oroutine b ecom esr esponsible f or i nv oking t he sl ow f unction, updat ingt he entry,\nandb ro adc asting the readinesso ft he new entry to any other goroutinest hatm ig ht( by then)\nbe waiting for it.\nNo tice t hatt he v ar iables e.res.value and e.res.err in t he entry ares hare d amon g\nmu ltipleg oroutines. Th eg oroutine t hatc re atest he entry sets t heir values, an do ther\ngoro utinesr eadt heir values o ncet he ‘‘re ady’’condit ion has b eenb ro adc ast. Des pit e being\naccessedb ym ultipleg oroutines, nom ut exl ocki sn ecessary.T he closingo ft he readych annel\nhapp ens before anyo ther goroutine receivest he bro adc aste vent,s ot he write to those var iables\nin the ﬁrs tgoro utine happ ens before they are read bys ubsequentg oroutines. Ther ei sn od at a\nrace.\nOurc on cur rent, dup lic ate-sup pressing, non-blo cking cache isc omplete.\nThei mp lementation of Memo ab ove u sesam ut ext og uard a m ap var iablet hati ss hare d by\neach goroutine thatc al lsGet.I t’si nt erest ing toc ontrastt hisd esig nwith ana lt ernat ive one in\nwhicht he map variablei sc onﬁne dto a moni tor goroutine to whichc al lerso f Get mu sts enda\nmess age .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 295,
      "page_label": "277"
    }
  },
  {
    "page_content": "ptg16105617\n278 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nThed eclarat ions of Func, result,a nd entryremain as before:\n// Func is the type of the function to memoize.\ntype Func func(key string) (interface{}, error)\n// A result is the result of calling a Func.\ntype result struct {\nvalue interface{}\nerr error\n}\ntype entry struct {\nres result\nready chan struct{} // closed when res is ready\n}\nHo wever,t he Memo type now con sists ofac hannel, requests,t hrough whicht he cal lerof Get\ncommunic ates wit h them onit orgoro utine.T he el ementt yp e of t he c hannel i sa request.\nUsingt hiss tr ucture, the cal lerof Get send sthem onit orgoro utine bot hthek ey,t hati s, the\nargumentt ot he memoize d func tion, anda nother channel, response,o verw hicht he result\nshouldb es entb ackw heni tb ecom esa vai lable.T hisc hannel will car ryo nlyas inglev alue.\ngopl.io/ch9/memo5\n// A request is a message requesting that the Func be applied to key.\ntype request struct {\nkey string\nresponse chan<- result // the client wants a single result\n}\ntype Memo struct{ requests chan request }\n// New returns a memoization of f. Clients must subsequently call Close.\nfunc New(f Func) *Memo {\nmemo := &Memo{requests: make(chan request)}\ngo memo.server(f)\nreturn memo\n}\nfunc (memo *Memo) Get(key string) (interface{}, error) {\nresponse := make(chan result)\nmemo.requests <- request{key, response}\nres := <-response\nreturn res.value, res.err\n}\nfunc (memo *Memo) Close() { close(memo.requests) }",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 296,
      "page_label": "278"
    }
  },
  {
    "page_content": "memo.requests <- request{key, response}\nres := <-response\nreturn res.value, res.err\n}\nfunc (memo *Memo) Close() { close(memo.requests) }\nThe Getmethod,a bove ,createsar espons ech annel,p utsi ti nt he request, sends itt ot he moni-\ntorg oroutine,t heni mmediate lyr eceivesf ro mit.\nThe cache var iable isc onﬁne dto the monitorg oroutine (*Memo).server,s hown below.T he\nmonitorr eads requests in a loop unt i lther equestc hannel isc los edb yt he Close method.F or\neach request, itc on sults the cache,c re ating and ins ertingan ew entryif non ewas found.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 296,
      "page_label": "278"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.7. EXAMPLE: CONCURRENT NON-BLOCKING CACHE 279\nfunc (memo *Memo) server(f Func) {\ncache := make(map[string]*entry)\nfor req := range memo.requests {\ne: =c ache[req.key]\nif e == nil {\n// This is the first request for this key.\ne=&entry{ready: make(chan struct{})}\ncache[req.key] = e\ngo e.call(f, req.key) // call f(key)\n}\ngo e.deliver(req.response)\n}\n}\nfunc (e *entry) call(f Func, key string) {\n// Evaluate the function.\ne.res.value, e.res.err = f(key)\n// Broadcast the ready condition.\nclose(e.ready)\n}\nfunc (e *entry) deliver(response chan<- result) {\n// Wait for the ready condition.\n<-e.ready\n// Send the result to the client.\nresponse <- e.res\n}\nIn a s imi lar manner tot he m ut ex-b ased v ersion, t he ﬁrs t re questf or a g iven k ey b ecom es\nresp onsible for cal lingt he function f on thatk ey,s toring the resulti nt he entry,a nd bro ad-\ncast ing t he r eadinesso ft he entry by c losingt he ready ch annel.T hisi sd on e by\n(*entry).call.\nAs ubsequentr equestf or the samek ey ﬁnd sthee xist ing entry in the map,w aits for the result\nto b ecom ere ady,a nd s ends t he resultt hrough t he respons e ch annel tot he clientg oroutine\nthat cal le dGet.T hisi sd on eby (*entry).deliver.T he calland delivermethodsm ustb e\ncalled int heir own goroutinest oe ns ure thatt he monitorg oroutine doesn ot stopp ro cessing\nne wre quests.\nThise xamples hows thati t’sp ossiblet ob ui ldmany con cur rents tr uctures usinge it her oft he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 297,
      "page_label": "279"
    }
  },
  {
    "page_content": "ne wre quests.\nThise xamples hows thati t’sp ossiblet ob ui ldmany con cur rents tr uctures usinge it her oft he\ntwoa ppro ach es—sh a re d var iables an dl ocks, o rc ommunic atings equential p ro cesses—\nwithoute xcessive complexity.\nIt’sn ot a lways o bv iou s whicha ppro ach i sp referable in a g iven si tu ation,b ut it ’sw or th\nknow ing h ow t he y correspond.S om etimess witchingf ro m on e approach to t he o ther can\nmake yourc odes impler.\nExercis e 9.3:Extend the Func type and the (*Memo).Get method sot hatc al lersm ay provide\nan opt ion al donech annel through whicht he y canc ancelt he operat ion( §8.9). Th er esults ofa\ncancel led Funccall shouldn ot bec ache d.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 297,
      "page_label": "279"
    }
  },
  {
    "page_content": "ptg16105617\n280 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\n9.8. Goroutines and Threads\nIn the pre vious chapt erw es aid thatt he dif ference bet weeng oroutinesa nd operat ings ystem\n(OS) threads cou ldb ei gnored unt i llater. A lt hough the dif ferences bet weent hema re ess en-\ntial lyq uant itative ,ab ig enough quant itative dif ference becom esaq ualitative one,a nd soi ti s\nwith goroutinesa nd threads.T he timeh as now com eto distinguish them.\n9.8.1. G ro wable Stacks\nEach OSt hreadh as a ﬁxe d-size blo cko fm emor y(often as large as2 MB) for its sta ck,t he wor k\narea w here i ts aves t he l ocal var iables o ff unctionc al lst hata re i np rogresso rt emporar ily\nsu spende dwhilea nother functioni sc al le d.T his ﬁxe d-size stack iss imultane ously too much\nandt oo lit tle.A 2MB stack wou ldb eah ugew aste ofm emor yforali tt leg oroutine,s ucha s\non e that mer elyw aits for a WaitGroup then clos es ac hannel.I t’sn ot u ncommonf or a G o\nprog ramto cre ate hundredso ft hous and sof goroutinesa to ne time, whichw ou ldb ei mp ossi-\nblew it hst ackst hisl arge . Yetd espit etheir size, ﬁxe d-size stacksa re not always big enough for\nthem ostc omplex an dd eeply r ec ursiveo ff unctions.C hang ing the ﬁxe d size can im prov e\nsp ace efﬁciency and allow moret hreads tob ec re ate d,or it can enable m ored eeply rec ursive\nfunc tions,b ut it cannot dob ot h.\nIn contrast, a g oroutine startsl ifew it has mall stack,t ypic al ly 2KB.A goro utine’ss tack,l ike",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 298,
      "page_label": "280"
    }
  },
  {
    "page_content": "func tions,b ut it cannot dob ot h.\nIn contrast, a g oroutine startsl ifew it has mall stack,t ypic al ly 2KB.A goro utine’ss tack,l ike\nthes tack ofa nO St hread, holds the local variables ofa ctivea nd suspended functionc al ls, but\nun li kea nO St hread, a goroutine’ss tack isn ot ﬁxe d;i tg rows ands hr inks as needed.T he size\nlimitf or a goroutine stack may bea sm ucha s1 GB,o rderso fm ag nitude largert hanat ypic al\nﬁxe d-size threads tack,t houg hof cours efe wgoro utinesu se thatm uch.\nExercis e 9.4:Cons truct a pip elinet hatc onne cts an arbit rar ynumb ero fg oroutinesw it hch an-\nnel s.W hati st he maximum numbero fp ip elines tagesy ou can create wit houtr unningo ut of\nmemory?H ow lon gdo esav alue taket ot ransitt he ent ire pip eline?\n9.8.2. Goroutine Scheduling\nOS threads are sch edu led byt he OSk er nel.E very few millis econd s,ah ardwaret imer inter-\nruptst he pro cessor, whichc ausesak er nel functionc al le dthe sche dul er to bei nv oke d.T his\nfunc tions uspend sthec ur rentlye xe cut ing threada nd saves its reg istersi nm emor y,l ooks over\nthel isto ft hreads and decides whicho ne shouldr un next, restorest hatt hread’sr eg istersf ro m\nmemory,t henr esumes the exe cut ion of thatt hread. B ecause OSt hreads are sch edu led byt he\nkernel,p assingc ontrol fro mon ethre adt oa nother requires a full cont ext switch,t hati s, sav ing\nthes tate o fo ne u sert hreadt om emor y,r estoring t he s tate o fa nother,a nd updat ingt he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 298,
      "page_label": "280"
    }
  },
  {
    "page_content": "thes tate o fo ne u sert hreadt om emor y,r estoring t he s tate o fa nother,a nd updat ingt he\nsche duler’sd at ast ruc tures. Thiso perat ioni ss low, due toi ts poorl ocality and the numbero f\nmemory accessesr equired,a nd has histor icallyo nlyg ot ten wor sea st he numbero fC PU cyc les\nre quired toa ccessm emor yhasi ncre ased.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 298,
      "page_label": "280"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 9.8. GOROUTINES AND THREADS 281\nTheG or untime containsi ts own s ch edu ler thatu sesat echnique known as m:n sch edu ling,\nbecaus e it m ultiplexes (o rs ch edu les) m goro utineso n n OS thr eads.T he j ob o ft he G o\nsche duler i sa nalogou s to t hato ft he k er nel s ch edu ler,b ut it i sc on cer ned onl yw it h the\ngoro utineso fas ingleG op rogram.\nUn liket he operat ings ystem’st hreads ch edu ler,t he Gos ch edu ler isn ot inv oke dperiodic ally\nby a h ardwaret imer,b ut imp licitlyb yc er tain Gol angu agec on str ucts. F or example, whena\ngoro utine cal lstime.Sleep or blo cks in a channel orm ut exo perat ion, the sch edu ler putsi tt o\nsleepa nd runsa nother goroutine unt i lit ist imet ow aket he ﬁrs ton e up.B ecause itd oesn’t\nne e das witch to ker nel context, res che dulingag oroutine ism uchc he apert hanr es che dulinga\nthre ad.\nExercis e 9.5: Wr ite a p rogram w it h twog oroutinest hats endm essagesb acka nd f or tho ver\ntwou nbuf fered channel sin ping-p ong fashion. H ow manyc ommunic ations per secon dcan\nthep rogram sustain?\n9.8.3. GOMAXPROCS\nTheG os ch edu ler u sesap arameter cal le dGOMAXPROCS to deter mineh ow many OS thr eads\nmayb ea ctivelye xe cut ing Goc odes imultane ously.I ts default value ist he numbero fC PUso n\nthem achine, soo nam achinew it h8C PUs, the sch edu ler will sch edu leG oc odeo nu pt o8O S\nthre ads a to nce. ( GOMAXPROCS is t he n in m:n sche duling.)G oroutinest hata re s le epingo r",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 299,
      "page_label": "281"
    }
  },
  {
    "page_content": "thre ads a to nce. ( GOMAXPROCS is t he n in m:n sche duling.)G oroutinest hata re s le epingo r\nblocke din a communic ation do not need a thread at all.G oroutinest hata re blo cke din I/O or\not her sys temc al lso ra re c al lingn on-G o func tions,d on eed a nO St hread, but GOMAXPROCS\nne e d nota ccountf or them.\nYo ucane xplicitlyc ontrol thisp arameter usingt he GOMAXPROCS enviro nment var iable ort he\nruntime.GOMAXPROCS func tion. W ec an see the effec tof GOMAXPROCS on thisl it tle program,\nwhichp rints an end lesss treamo fz eros ando nes:\nfor {\ngo fmt.Print(0)\nfmt.Print(1)\n}\n$G OMAXPROCS=1 go run hacker-cliché.go\n111111111111111111110000000000000000000011111...\n$GOMAXPROCS=2 go run hacker-cliché.go\n010101010101010101011001100101011010010100110...\nIn t he ﬁrs t run, at mos to ne g oroutine w as ex ec ute d at a tim e. I nitial ly, itw as t he m ain\ngoro utine,w hichp rintso nes. A fter a per iodo ft ime, the Gos ch edu ler put it tos le ep andw oke\nup the goroutine thatp rintsz eros, giv ing itat ur nto run ont he OSt hread. I nt he secon drun,\ntherew eret wo OSt hreads avai lable,s ob ot hgoro utinesr an simultane ously,p rint ing dig its at\nab out the samer ate. W em usts tresst hatm anyf ac tor sarei nv olved ing oroutine sch edu ling,\nandt he runtime isc on stant lye vo l ving, soy ourr esults may differf ro mtheo nesa bove .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 299,
      "page_label": "281"
    }
  },
  {
    "page_content": "The Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 299,
      "page_label": "281"
    }
  },
  {
    "page_content": "ptg16105617\n282 CHAPTER 9. CONCURRENCY WITH SHARED VARIABLES\nExercis e 9.6:Me asure how the per for mance ofac ompute-b oundp aral lelp rogram (see Exer-\ncise 8.5) varies w it hGOMAXPROCS.W hati st he opt imalv alue ony ourc omputer? H ow many\nCPUsd oesy ourc omputerh ave?\n9.8.4. Goroutines Hav eN oI dentity\nIn mosto perat ings ystems and programmingl angu ages thats up por tmu ltithre ading, the cur-\nrent threadh as a dist inc tidentity thatc an bee asi lyo bt ained asa no rdinar y value,t ypic ally an\nintegero rp oint er. T hism akes ite asy tob ui ld an abstrac tionc al le dthre ad-local storage,w hich\nis ess ent ial lyag lobalm ap keyed byt hreadi dentity,s ot hate acht hreadc an store and ret rie ve\nvalues indep endento fo ther threads.\nGoro utinesh aven on ot ion of identity thati sa ccessiblet ot he programmer.T hisi sb yd esig n,\nsince thread-lo cal storaget ends tob ea bu sed.F or example, inaw eb ser ver implemente din a\nlanguage wit hthre ad-lo cal storage, it’sc ommonf or manyf unctions toﬁ nd infor mat iona bout\ntheH TTPr equesto nw hose b eh alf t he y arec ur rentlyw or kingb yl ooking i nt hats torage.\nHo wever,j usta sw it h prog ramst hatr elye xcessive lyo ng lobalv ar iables, thisc an lead t oa n\nun healt hy ‘‘ac tiona tad istance’’in whicht he beh avior of a f unctioni sn ot deter mined byi ts\narguments alone,b ut byt he identity oft he threadi nw hichi tr uns. C on sequently, ift he iden-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 300,
      "page_label": "282"
    }
  },
  {
    "page_content": "arguments alone,b ut byt he identity oft he threadi nw hichi tr uns. C on sequently, ift he iden-\ntity oft he threads houldc hange— some wor ker threads are enliste d to help, say—th ef unction\nmisb ehavesm ysteriou sly.\nGo encourages a simpler sty leo fp rogrammingi nw hichp arameterst hata ffec ttheb eh avior of\naf unctiona re explicit. N ot onlyd oest hism akep rogramse asier tor ead, but it l ets usf re ely\nassig nsu btaskso fag iven functiont om anyd if ferentg oroutinesw it houtw or rying about their\nidentity.\nYo u’ve now learned about all the langu agef eaturesy ou need for writing Gop rograms. I nt he\nnext t wo c hapt ers,w e’ll s tepb ackt ol ooka ts om e of the p rac tices andt ools tha ts up por t\nprog rammingi nt he large:h ow tos tr uctureap ro jec tas a set o fp ackages, andh ow too bt ain,\nbuild, test,b enchmark,p roﬁle,d ocument, ands hare those packages.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 300,
      "page_label": "282"
    }
  },
  {
    "page_content": "ptg16105617\n10\nPackages and the GoT ool\nAm odest-size program today might contain 10,000 functions.Y et its author need thin k ab out\non lyaf ew oft hema nd desig neven fewer,b ecause t he vastm aj ority werew ritt enb yo thers\nandm ade availablef or reuse through pack ages.\nGo com esw it hov er1 00 stand ard packages thatp rovide the found ation sform osta pp lic ations.\nTheG oc ommunity,at hr iving ecosystemo fp ackaged esig n,sh aring ,reus e,a nd imp rov ement,\nhasp ublishe dmany more, and you can ﬁnd a searc hable index oft hema t http://godoc.org.\nIn thisc hapt er, we’ll showh ow tou se exist ing packages andc re ate new ones.\nGo a ls o comesw it h the go to ol, a sop histicate d buts imple-to-use c ommand f or m anag ing\nworksp aces ofG op ackages. Since t he beg inningo ft he book, we’ve beens howing how tou se\nthe go to olt od ow nlo ad,b ui ld,a nd run examplep rograms. I nt hisc hapt er, we’ll looka tt he\nto ol’su nderly ing con cepts andt ourm oreo fi ts cap abilit ies, whichi nclude print ing documen-\ntation and quer yingm et adat a ab out the packages in the wor ksp ace.I nt he next chapt erw e’ll\nexplore its testing features.\n10.1. I ntroduction\nThep ur pos eof any packages ystemi st om aket he desig n andm aintenanceo fl arge programs\nprac tic alby g ro uping rel ate d fe aturest oget her into u nits t hatc an b ee asi lyu nderstood a nd\nch ange d,i ndep endento ft he other packages oft he program. This mo dul arity al lows packages",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 301,
      "page_label": "283"
    }
  },
  {
    "page_content": "ch ange d,i ndep endento ft he other packages oft he program. This mo dul arity al lows packages\nto b es hare d andr eusedb yd if ferentp ro jec ts, di st ribut edw it hin an o rganizat ion, orm ade\navai lable tot he wider wor ld.\nEach packaged eﬁnesad istinc tname space thate nclos esitsi dentiﬁers. Eac hn amei sa ss oci-\nated wit hap ar tic ularp ackage, letting usc ho ose short,c le arnamesf or the typ es,func tions,\nands oo nt hatw eu se mosto ften, wit houtc re ating conﬂic tswith other par tsof the program.\n283\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 301,
      "page_label": "283"
    }
  },
  {
    "page_content": "ptg16105617\n284 CHAPTER 10. PACKAGES AND THE GO TOOL\nPackages al so p rovide encapsul ati on by c ontrol lingw hichn ames ar ev isible o re xp orted\noutside the package. R estr ictingt he visibilit y of packagem embers hides the helperf unctions\nandt yp esbehindt he package’sA PI,a llow ing the packagem aintainer toc hange the imp lemen-\ntation wit hconﬁdence thatn oc odeo utside the packagew ill bea ffec ted.R estr ictingv isibilit y\nalso hides variables sot hatc lients can acces sa nd updatet hemo nlyt hrough exp orted func-\ntion sthat preservei nt ernal invar iants ore nforce mut ual exclusion in a con cur rentp rogram.\nWh enw ec hange a ﬁle,w em ustr ecompi let he ﬁle’sp ackagea nd pot ent ial lya ll the packages\nthat dependo ni t. G oc ompi lat ioni sn ot ably fastert hanm osto ther comp ile dlanguages, even\nwhen bui ldingf ro mscratch.T here are three main reasons for the compi ler’ss peed.F irst,a ll\nimportsm ustb ee xplicitlyl iste dat the beg inningo fe achs ource ﬁle,s ot he compi ler does not\nhave tor eada nd pro cessa ne nt ire ﬁle tod eter minei ts dependencies. S econ d,t he dep enden-\ncies ofap ackagef or mad irec ted acyclic graph, andb ecause there are noc yc les, packages can\nbe compi led sep aratelya nd perhaps in paral lel. F inal ly, the obj e ctﬁ le for a compi led Gop ack-\nager ecords e xp ort i nfor mat ionn ot j ustf or t he p ackagei ts elf,b ut for it sd ep endencies too.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 302,
      "page_label": "284"
    }
  },
  {
    "page_content": "ager ecords e xp ort i nfor mat ionn ot j ustf or t he p ackagei ts elf,b ut for it sd ep endencies too.\nWh enc ompi lingap ackage, the compi ler mustr eado ne o bj e ctﬁ le for eachi mp ort but need\nnotl ookb eyon dthes e ﬁles.\n10.2. Import Paths\nEach p ackagei si dentiﬁed b yau nique s tr ing c al le dits import p at h.I mp ort p at hsa re t he\nst rings thata pp ear in importde clarat ions.\nimport (\n\"fmt\"\n\"math/rand\"\n\"encoding/json\"\n\"golang.org/x/net/html\"\n\"github.com/go-sql-driver/mysql\"\n)\nAs wem ention edi nS ec tion 2.6.1, the Gol angu ages peciﬁcation doesn’td eﬁne the meaningo f\nthes est rings orh ow tod eter mineap ackage’si mp ort pat h,butl eavest hese issues tot he tools.\nIn thisc hapt er, we’ll takead et aile d lo oka th ow the go to oli nt erprets them, since t hat’sw hat\nthem aj ority o fG op rogrammersu se f or bui lding, t esting , ands oo n. O ther t ools d oe xist,\nthough.F or example, Gop rogrammersu singG oogle’si nt ernal multi-l angu ageb ui ld system\nfo llowd if ferentr ules for naminga nd locat ingp ackages, specif yingt ests, ands oo n, thatm ore\nclos ely match the convent ion s of thats ystem.\nFo rpackages you int end tos hare orp ublish,i mp ort pat hss houldb eg loballyu nique.T oa void\nconﬂic ts,thei mp ort pat hso fa ll packages other thant hose fro mthes tand ard librar yshould\nst art wit htheI nt ernet domain nameo ft he organizat iont hato wnso rh osts the package; this",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 302,
      "page_label": "284"
    }
  },
  {
    "page_content": "st art wit htheI nt ernet domain nameo ft he organizat iont hato wnso rh osts the package; this\nalso makes itp ossiblet oﬁ nd packages. F or example, the declarat iona bove imp ortsa nH TML\npars erm aintained byt he Got eama nd a popu lar third-p arty MySQLd at abas e dr iver.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 302,
      "page_label": "284"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.4. IMPOR TD ECLARATIONS 285\n10.3. The Packag eD eclaration\nA package de clarat ioni sr equired att he start ofe very Gos ource ﬁle.I ts main pur pos eis to\ndeter minet he defau lti dentiﬁer for thatp ackage( called the pack age nam e)w heni ti si mp orted\nby another package.\nFo r example, e very ﬁle o ft he math/rand packages tartsw it h package rand,s ow heny ou\nimport thisp ackage, you can accessi ts members as rand.Int, rand.Float64,a nd soo n.\npackage main\nimport (\n\"fmt\"\n\"math/rand\"\n)\nfunc main() {\nfmt.Println(rand.Int())\n}\nConv ent ion ally, the packagen amei st he lasts eg mento ft he imp ort pat h, anda sar esult, two\npackages may hav et he s amen amee vent houg h their im port p at hsn ecessarily d if fer.F or\nexample, t he p ackages w hose i mp ort p at hsa re math/rand and crypto/rand both h avet he\nname rand.W e’ll see how tou se bot hin the samep rogram in a mom ent.\nTherea re three maj ore xception sto the ‘‘last seg ment’’conv ent ion.T he ﬁrs tis thatap ackage\ndeﬁningac ommand (an exec utableG op rogram) always has the name main,r egardlesso ft he\npackage’si mp ort pat h. Thisi sas ig nal togo build(§10.7.3) t hati tm usti nv oke the lin ker to\nmake ane xe cut able ﬁle.\nThes econ dexception ist hats om eﬁles in t he direc tor y mayh avet he sufﬁx _test on their\npackagen amei ft he ﬁle namee nd swith _test.go.S uchad irec tor ymayd eﬁne two packages:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 303,
      "page_label": "285"
    }
  },
  {
    "page_content": "packagen amei ft he ﬁle namee nd swith _test.go.S uchad irec tor ymayd eﬁne two packages:\ntheu su alo ne,p lu sanot her one c al le d anexter nal testp ackage.T he _test sufﬁxs ig nalst o\ngo testthat itm ustb ui ldboth packages, andi ti ndic ates which ﬁles belon gto eachp ackage.\nExternal \ntestp ackages areu sedt oa void cyc les in the imp ort grapha risingf ro mdep endencies\nof the test; the yarec ov ere din mored et ail in Sec tion 11.2.4.\nThet hirde xception ist hats om eto ols for dep endency managementa pp end versionn umber\nsufﬁxest op ackagei mp ort pat hs, sucha s \"gopkg.in/yaml.v2\".T he packagen amee xc ludes\nthes ufﬁx, so in thisc as eit wou ldb ej ust yaml.\n10.4. Import Declarations\nAG os ourceﬁ le may cont ain zeroo rm ore importde clarat ions immediate lya fter the package\nde clarat iona nd beforet he ﬁrs tnon-import declarat ion. Eachi mp ort declarat ionm ay specif y\nthei mp ort p at h of a s inglep ackage, o rm ultiplep ackages in a paren thesize d list.T he t wo\nformsb elow are equivalentb ut the secon dform ism orec ommon.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 303,
      "page_label": "285"
    }
  },
  {
    "page_content": "ptg16105617\n286 CHAPTER 10. PACKAGES AND THE GO TOOL\nimport \"fmt\"\nimport \"os\"\nimport (\n\"fmt\"\n\"os\"\n)\nImported packages may b eg ro upedb yi nt roducingb lank lines; suchg ro upingsu su allyi ndi-\ncate dif ferentd om ains. Th eo rder isn ot sig niﬁcant,b ut byc onvent ion the lines ofe achg ro up\nares or ted alp hab etic ally.( Both gofmtand goimportswi l lgroupa nd sor tfory ou .)\nimport (\n\"fmt\"\n\"html/template\"\n\"os\"\n\"golang.org/x/net/html\"\n\"golang.org/x/net/ipv4\"\n)\nIf w en eed t oi mp ort t wo p ackages w hose n ames ar et he s ame, l ike math/rand and\ncrypto/rand,i nt oat hirdp ackage, the imp ort declarat ionm usts pecif y an alternat ive name\nfor at least one oft hemt oa void a conﬂic t. Thisi sc al le d arenami n gimport.\nimport (\n\"crypto/rand\"\nmrand \"math/rand\" // alternative name mrand avoids conflict\n)\nThea lt ernat ive namea ffec tso nlyt he imp orting ﬁle.O ther ﬁles, e veno nesi nt he samep ack-\nage, may import the packageu singi ts default name, orad if ferentn ame.\nAr enamingi mp ort may beu sefule venw hent here isn oc onﬂic t. If the nameo ft he imp orted\npackagei su nw ieldy,a si ss om etimest he cas efora ut omat ical lyg enerated code, ana bbre viate d\nname may b em orec onvenient. Th es ames hort n ames houldb eu sedc on sistent lyt oa void\nconf usion. Cho osinga na lt ernat ive namec an helpa void conﬂic tswith commonl ocal variable\nnames. F or e xample, i naﬁle w it h many local var iables nam ed path,w em ig hti mp ort t he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 304,
      "page_label": "286"
    }
  },
  {
    "page_content": "names. F or e xample, i naﬁle w it h many local var iables nam ed path,w em ig hti mp ort t he\nst and ard \"path\"packagea s pathpkg.\nEach imp ort declarat ione st ablishesad ep endency fro mthec ur rentp ackaget ot he imp orted\npackage. T he go buildto olr ep orts an error ift hese dep endencies for mac yc le.\n10.5. Blank Imports\nIt isa ne rror toi mp ort a packagei nt oaﬁ le but not refer tot he namei td eﬁnesw it hin that ﬁle.\nHo wever,o no cc asionw em usti mp ort a packagem erelyf or the side effe cts ofd oing so: evalu-\nat iono ft he initializer expressions ofi ts package-le vel var iables ande xe cut ion of its initfunc-\ntion s(§2.6.2). T os up presst he ‘‘unus edi mp ort’’er ror wew ou ldo ther wis eencounter, wem ust\nus ear enamingi mp ort inw hicht he alt ernat ive namei s _,t he blank identiﬁer.A su su al, the\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 304,
      "page_label": "286"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.5. BLANK IMPOR TS 287\nbl ank identiﬁer can never ber eference d.\nimport _ \"image/png\" // register PNG decoder\nThisi sk nown a sabl a nk i mp ort.I ti sm osto ften u sedt oi mp lementac ompi le-t ime\nme chanism where byt he main program can enable opt ion alf eaturesb yb lank-importinga ddi-\ntion alp ackages. Fir st we’ll see how tou se it, thenw e’ll see how itw or ks.\nThes tand ard l ibrar y’s image packagee xp ortsa Decode func tiont hatr eads b ytes f ro m an\nio.Reader, ﬁgures o ut w hichi mage f or mat was u sedt oe ncodet he d at a, invo kes t he\nappropriated ecoder,t henr etur nst he resulting image.Image.U sing image.Decode,i t’se asy\nto b ui ld as implei mage c onverter t hatr eads a ni mage i no ne f or mat an dw ritesi to ut i n\nanot her :\ngopl.io/ch10/jpeg\n// The jpeg command reads a PNG image from the standard input\n// and writes it as a JPEG image to the standard output.\npackage main\nimport (\n\"fmt\"\n\"image\"\n\"image/jpeg\"\n_\"image/png\" // register PNG decoder\n\"io\"\n\"os\"\n)\nfunc main() {\nif err := toJPEG(os.Stdin, os.Stdout); err != nil {\nfmt.Fprintf(os.Stderr, \"jpeg: %v\\n\", err)\nos.Exit(1)\n}\n}\nfunc toJPEG(in io.Reader, out io.Writer) error {\nimg, kind, err := image.Decode(in)\nif err != nil {\nreturn err\n}\nfmt.Fprintln(os.Stderr, \"Input format =\", kind)\nreturn jpeg.Encode(out, img, &jpeg.Options{Quality: 95})\n}\nIf wef eed the out put ofgopl.io/ch3/mandelbrot (§3.3) t ot he converter program, itd etec ts",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 305,
      "page_label": "287"
    }
  },
  {
    "page_content": "}\nIf wef eed the out put ofgopl.io/ch3/mandelbrot (§3.3) t ot he converter program, itd etec ts\ntheP NG inp utf or mat andw ritesaJ PEGv ersiono fF igure3 .3.\n$g ob uild gopl.io/ch3/mandelbrot\n$g ob uild gopl.io/ch10/jpeg\n$. /mandelbrot | ./jpeg >mandelbrot.jpg\nInput format = png\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 305,
      "page_label": "287"
    }
  },
  {
    "page_content": "ptg16105617\n288 CH\nAPTER PACKAGES AND THE GO TOOL10.\nNo \ntice the blank imp ort of image/png.W it \nhoutt hatl ine, the program comp iles andl in ks as\nusualb ut can nol on g err ecog nizeor decodei np ut in PNG for mat:\n$g\nob uild gopl.io/ch10/jpeg\n$. /mandelbrot | ./jpeg >mandelbrot.jpg\njpeg: image: unknown format\nHere’sh ow \nitw or ks. Th es tand ard librar y prov ides deco dersf or GIF,P NG,a nd J PEG, and\nus ers may provide others, but tok eepe xe cut ables smal l,d ecodersa re not include d in an appli-\ncation unlesse xplicitlyr equeste d. The image.Decode func \ntionc on sults a table o fs up por ted\nformats. Eac he nt ryi nt he table speciﬁes fourt hings: the nameo ft he for mat; a str ing thati sa\npreﬁxo fa ll i magese ncoded t hisw ay,u sedt od etec t thee ncoding; a fun ction Decode that\nde \ncodes an enco dedi mage;a nd another function DecodeConfig that \ndeco deson lyt he image\nmetadata,s ucha si ts size an dc olor s pace.A ne nt ryi sa dde d to t he t able b yc al ling\nimage.RegisterFormat,t ypic \nally fro mwithin the packagei nitializer oft he sup por tingp ack-\nagef or eachf or mat, like thiso ne in image/png:\npackage png // image/png\nfunc Decode(r io.Reader) (image.Image, error)\nfunc DecodeConfig(r io.Reader) (image.Config, error)\nfunc init() {\nconst pngHeader = \"\\x89PNG\\r\\n\\x1a\\n\"\nimage.RegisterFormat(\"png\", pngHeader, Decode, DecodeConfig)\n}\nThee ffec \nt is thata na pp lic ationn eed onlyb lank-import the packagef or the for mat itn eedst o",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 306,
      "page_label": "288"
    }
  },
  {
    "page_content": "}\nThee ffec \nt is thata na pp lic ationn eed onlyb lank-import the packagef or the for mat itn eedst o\nmake the image.Decodefunc \ntiona blet od ecodei t.\nThe database/sql packageu sesas imi \nlar m echanism t ol et u sers i ns tal l ju stt he d at abas e\ndr ivers the y ne e d.F or example:\nimport (\n\"\ndatabase/sql\"\n_ \"\ngithub.com/lib/pq\" /\n/ e\nnable support for Postgres \n_ \"\ngithub.com/go-sql-driver/mysql\" // enable support for MySQL\n)\ndb, err = sql.Open(\"postgres\", dbname) // OK\n// OKdb, err = sql.Open(\"mysql\", dbname)\n// returns error:db, err = sql.Open(\"sqlite3\", dbname)\nunknown driver \"sqlite3\"\nExercis \ne 10.1: Extend the jpeg prog \nram so thati tc onvertsa ny sup por ted inp utf or mat toa ny\noutput for mat, using image.Decode to \ndetec tthei np utf or mat andaﬂag t os elec ttheo ut put\nformat.\nExercis e 10.2: Deﬁne a g ener ic archive ﬁle-r eadingf unctionc ap able ofr eadingZ IP ﬁles\n(archive/zip)a nd \nPOSIX tar ﬁles ( archive/tar). \nUse a r eg ist rat ionm echanism similart o\ntheo ne d es crib eda bove s ot hats up por tfore ach ﬁle f or mat can b ep lugged i nu singb lank\nimports.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 306,
      "page_label": "288"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.6. PACKAGES AND NAMING 289\n10.6. Packages and Naming\nIn thiss ec tion,w e’ll offer som eadvice onh ow tof ol low Go’sd istinc tivec onvent ion sforn am-\ningp ackages andt heir members.\nWh enc re ating a p ackage, keepi ts names hort,b ut not s os hort a st ob ec rypt ic. Th em ost\nfrequentlyu sedp ackages in the stand ard librar y aren amed bufio, bytes, flag, fmt, http, io,\njson, os, sort, sync,a nd time.\nBe d es crip tivea nd unambiguous w here possible. F or example, don’tn ameau tilit ypackage\nutil when a nam es ucha s imageutil or ioutil is speciﬁcy et still con cis e.A void cho osing\npackagen ames t hata re c ommonlyu sedf or r el ate d lo cal variables, o ry ou m ay co mp elt he\npackage’sc lients tou se renamingi mp orts, as wit hthe pathpackage.\nPackagen ames u su allyt aket he s ingu lar for m.T he s tand ard p ackages bytes, errors,a nd\nstringsus ethep lural toa void hidingt he cor respondingp re declare dtypesa nd, in the cas eof\ngo/types,t oa void conﬂic twith a key word.\nAv oid packagen ames thata lready haveo ther connot ation s.F or example, weo riginallyu sed\nthen ame tempfort he temperaturec onversionp ackagei nS ec tion 2.5, but thatd idn’tl astl on g.\nIt was a ter r iblei de abecaus e‘‘temp’’is ana lmostu nivers als ynonym for ‘‘temp orar y.’’We went\nthro ugh a brief per iodw it hthen ame temperature,b ut thatw as too lon gandd idn’ts ay w hat",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 307,
      "page_label": "289"
    }
  },
  {
    "page_content": "thro ugh a brief per iodw it hthen ame temperature,b ut thatw as too lon gandd idn’ts ay w hat\nthep ackaged id.I nt he end,i tb ecame tempconv,w hichi ss horter andp aral lelw it hstrconv.\nNo w let’st ur n to t he n amingo fp ackagem embers.S ince eac hr eference t oam embero f\nanot her packageu sesaq ualiﬁed identiﬁer sucha s fmt.Println,t he burden ofd es cribingt he\npackagem emberi sb or nee qu allyb yt he packagen amea nd the memb ern ame. W en eed not\nment ion t he c on cepto ff or matting i n Println becaus e thep ackagen ame fmt do es that\nalready.W hend esig ningap ackage, con sider how the two par tsof a qualiﬁed identiﬁer wor k\ntogether,n ot the memb ern amea lone.H erea re som ech arac ter ist ice xamples:\nbytes.Equal flag.Int http.Get json.Marshal\nWe can identify som ecommon namingp atterns. The strings packagep rovides a numbero f\nindep endentf unctions for manipu lat ings tr ings:\npackage strings\nfunc Index(needle, haystack string) int\ntype Replacer struct{ /* ... */ }\nfunc NewReplacer(oldnew ...string) *Replacer\ntype Reader struct{ /* ... */ }\nfunc NewReader(s string) *Reader\nThew ord string do es nota pp ear in an yo ft heir names. Clients refer t ot hema s\nstrings.Index, strings.Replacer,a nd soo n.\nOt her packages t hatw em ig htd es crib e as single-ty pep ackages,s ucha s html/template and\nmath/rand,e xp oseo ne princip ald at atype plu s itsm et hods, ando ften a New func tiont oc re-\natei ns tances.\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 307,
      "page_label": "289"
    }
  },
  {
    "page_content": "math/rand,e xp oseo ne princip ald at atype plu s itsm et hods, ando ften a New func tiont oc re-\natei ns tances.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 307,
      "page_label": "289"
    }
  },
  {
    "page_content": "ptg16105617\n290 CHAPTER 10. PACKAGES AND THE GO TOOL\npackage rand // \"math/rand\"\ntype Rand struct{ /* ... */ }\nfunc New(source Source) *Rand\nThisc an lead tor ep etit ion,a sin template.Template or rand.Rand,w hichi sw hy the names\nof these kinds ofp ackages areo ften especi ally short.\nAt the other extreme,t here are packages li ke net/http that haveal ot ofn ames wit houta l ot\nof str ucture, because the yperfor mac omplic ated task. Des pit ehaving overt went ytypesa nd\nmany moref unctions,t he package’sm osti mp ortantm embers havet he simplestn ames: Get,\nPost, Handle, Error, Client, Server.\n10.7. The G oT ool\nTher esto ft hisc hapt erc on cer nst he go to ol, whichi su sedf or d ow nlo ading, q uer ying,\nformatting ,building, testing ,andi ns tal lingp ackages ofG oc ode.\nThe go to olc om binest he featureso fad iverse seto ft ools int oon ecommands et. I ti sap ack-\nagem anager (analogou sto apt or rpm)t hata nswers quer ies ab out itsi nv ent ory ofp ackages,\ncomp utest heir dependencies, andd ow nlo adst hemf ro m remote version-cont rol systems.I ti s\nab ui ld systemt hatc omputesﬁ le dependencies an di nv okesc ompi lers, assemb lers, andl in k-\ners, although i ti si nt ent ion allyl essc ompletet hant he s tand ard Unix make.A nd iti sat est\ndr iver, asw ew ill see inC hapt er1 1.\nItsc ommand-linei nt erface u sest he ‘‘Sw iss a rmyk nife’’st yle,w it h ov erad ozen s ub com-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 308,
      "page_label": "290"
    }
  },
  {
    "page_content": "dr iver, asw ew ill see inC hapt er1 1.\nItsc ommand-linei nt erface u sest he ‘‘Sw iss a rmyk nife’’st yle,w it h ov erad ozen s ub com-\nmand s,s om e of whichw eh avea lready s een, li ke get, run, build,a nd fmt.Y ou c an run\ngo helpto see the index ofi ts bui lt-in document ation,b ut for reference,w e’ve liste d them ost\ncommon lyu sedc ommand sbelow:\n$g o\n...\nbuild compile packages and dependencies\nclean remove object files\ndoc show documentation for package or symbol\nenv print Go environment information\nfmt run gofmt on package sources\nget download and install packages and dependencies\ninstall compile and install packages and dependencies\nlist list packages\nrun compile and run Go program\ntest test packages\nversion print Go version\nvet run go tool vet on packages\nUse \"go help [command]\" for more information about a command.\n...\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 308,
      "page_label": "290"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.7. THE GO TOOL 291\nTo keept he need for conﬁgurat iont oa m inimum, the go to olr elies heavi lyo nc onvent ion s.\nFo r example, g iven t he nam eo faGo so urce ﬁle ,t he t oolc an ﬁnd i ts en closingp ackage,\nbecaus e each d irec tor y cont ainsas inglep ackagea nd the i mp ort p at h of a p ackagec or-\nresp ond sto the direc tor yhierarchyi nt he wor ksp ace.G iven the imp ort pat hof a package, the\nto olc an ﬁnd the c or respondingd irec tor y in whichi ts toreso bj e ctﬁ les. I tc an also ﬁnd the\nURL oft he ser ver thath osts the sourcec oder ep ository.\n10.7.1. Workspac eO rganization\nTheo nlyc onﬁgurat ionm ostu sers evern eed ist he GOPATHenviro nment var iable,w hichs peci-\nﬁes t he r ooto ft he w or ksp ace.W hens witchingt oad if ferentw or ksp ace,u sers u pdatet he\nvalue of GOPATH.F or ins tance,w es et GOPATHto $HOME/gobookwhilew or kingo nt hisb ook:\n$e xport GOPATH=$HOME/gobook\n$g og et gopl.io/...\nAf ter you dow nlo ad al lthep rogramsf or thisb ooku singt he command above , your wor ksp ace\nwi l lcont ain a hierarchyl iket hiso ne:\nGOPATH/\nsrc/\ngopl.io/\n.git/\nch1/\nhelloworld/\nmain.go\ndup/\nmain.go\n...\ngolang.org/x/net/\n.git/\nhtml/\nparse.go\nnode.go\n...\nbin/\nhelloworld\ndup\npkg/\ndarwin_amd64/\n...\nGOPATH hast hree s ub direc tor ies. The src su bdirec tor y holdss ourcec ode. E achp ackage\nresides in a dir ec tor ywhos ename rel ative to $GOPATH/src is the package’si mp ort pat h,such",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 309,
      "page_label": "291"
    }
  },
  {
    "page_content": "resides in a dir ec tor ywhos ename rel ative to $GOPATH/src is the package’si mp ort pat h,such\nas gopl.io/ch1/helloworld.O bs erve thatas ingle GOPATH worksp ace cont ainsm ultiplev er-\nsion-cont rol rep ositories beneath src,s ucha s gopl.io or golang.org.T he pkg su bdirec tor y\nis where the bui ldto ols store compi l ed packages, andt he bin su bdirec tor y holdse xe cut able\nprog ramsl ike helloworld.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 309,
      "page_label": "291"
    }
  },
  {
    "page_content": "ptg16105617\n292 CHAPTER 10. PACKAGES AND THE GO TOOL\nAs econ denviro nment var iable, GOROOT,s peciﬁes t he rootd irec tor y of the G od istr ibution,\nwhichp rovides al lt he p ackages o ft he s tand ard l ibrar y.T he d irec tor y st ruc tureb eneath\nGOROOT resemb les thato f GOPATH,s o, for example, the sourceﬁ les oft he fmt packager eside in\nthe $GOROOT/src/fmt direc tor y.U sers never need tos et GOROOT since,b yd efau lt, the go to ol\nwi l lus ethel ocat ionw here itw as inst alled.\nThe go envcommandp rintst he effec tive values oft he env iro nment var iables relevantt ot he\nto olchain, includingt he defau ltv alues for the missingo nes. GOOS sp eciﬁes the targeto perat-\nings ystem( fore xample, android, linux, darwin,o r windows)a nd GOARCHsp eciﬁes the target\nprocessora rc hit ecture, sucha s amd64, 386,o r arm.A lt hough GOPATH is the onlyv ar iable you\nmu sts et, the otherso cc asionallya pp ear in our explanation s.\n$g oe nv\nGOPATH=\"/home/gopher/gobook\"\nGOROOT=\"/usr/local/go\"\nGOARCH=\"amd64\"\nGOOS=\"darwin\"\n...\n10.7.2. D ownloading Packages\nWh enu singt he goto ol, a package’si mp ort pat h indic ates not onlyw here toﬁ nd iti nt he local\nworksp ace,b ut where toﬁ nd ito nt he Int ernet sot hat go getcanr et rie vea nd updatei t.\nThe go getcommandc an down loadas inglep ackageo ra ne nt ire subtree orr ep ository using\nthe ... notation, as in t he pre vious s ec tion.T he toola ls o comp utesa nd dow nlo adsa ll t he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 310,
      "page_label": "292"
    }
  },
  {
    "page_content": "the ... notation, as in t he pre vious s ec tion.T he toola ls o comp utesa nd dow nlo adsa ll t he\ndep endencies oft he i nitial packages, whic hi sw hy t he golang.org/x/net/html package\nappeared int he wor ksp ace in the pre vious e xample.\nOnce go gethasd ow nlo ade dthep ackages, itb ui ldst hema nd then install sthel ibrar ies and\ncommands.W e’ll l ooka tt he d et ails i nt he ne xt s ec tion,b ut a ne xamplew ill s howh ow\nst raig htfor wardt he pro cessi s. The ﬁrs t commandb elow gets the golint to ol, whichc he cks\nforc ommons ty lep ro blemsi nG os ourcec ode. T he s econ d commandr uns golint on\ngopl.io/ch2/popcount from S ec tion 2.6.2. I th elpf ullyr ep ortst hatw eh avef or g ott ent o\nwr ite a doc comment for the package:\n$g og et github.com/golang/lint/golint\n$$ GOPATH/bin/golint gopl.io/ch2/popcount\nsrc/gopl.io/ch2/popcount/main.go:1:1:\npackage comment should be of the form \"Package popcount ...\"\nThe go getcommandh as sup por tforp opu lar code-hosting sit esl ikeG itHu b,B itbucket, and\nLaunchpada nd can maket he appro priater equests tot heir version-cont rol systems.F or less\nwe ll-k now n sites, y ou m ay hav et oi ndic atew hichv ersion-cont rol p ro tocol t ou se i nt he\nimport pat h,such asG it or Mercurial.R un go help importpathfort he det ails.\nThed irec tor ies that go getcreatesa re truec lients oft he remot erepository,n ot justc opies of\ntheﬁ les, soy ou can use version-cont rol command sto see a dif fof local edits you’ve made ort o",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 310,
      "page_label": "292"
    }
  },
  {
    "page_content": "theﬁ les, soy ou can use version-cont rol command sto see a dif fof local edits you’ve made ort o\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 310,
      "page_label": "292"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.7. THE GO TOOL 293\nup datet oad if ferentr evision. F or example, the golang.org/x/netdirec tor yis a Git client:\n$c d$ GOPATH/src/golang.org/x/net\n$g it remote -v\norigin https://go.googlesource.com/net (fetch)\norigin https://go.googlesource.com/net (push)\nNo tice thatt he app arent dom ain name in the package’si mp ort pat h,golang.org,d if fersf ro m\nthea ctuald om ain nameo ft he Git ser ver,go.googlesource.com.T hisi sa f eature oft he go\nto olt hatl ets packages use a customd om ain namei nt heir import pat hwhileb eingh oste dby a\ngenerics er vice suc ha s googlesource.com or github.com.H TMLp ages beneath\nhttps://golang.org/x/net/html include the metadata shown below,w hichr edirec tst he go\nto olt ot he Git rep ository att he actualh osting sit e:\n$g ob uild gopl.io/ch1/fetch\n$. /fetch https://golang.org/x/net/html | grep go-import\n<meta name=\"go-import\"\ncontent=\"golang.org/x/net git https://go.googlesource.com/net\">\nIf you specif ythe -uﬂag ,go getwi l lensure thata ll packages itv isits, includingd ep endencies,\nareu pdated tot heir latestv ersionb eforeb eingb ui lta nd ins tal le d.W it houtt hatﬂ ag ,packages\nthat already exist local lyw ill not beu pdated.\nThe go get -ucommandg eneral lyr et rie ves the latestv ersiono fe achp ackage, whichi sc on-\nvenientw heny ou’re g etting s tarted b ut m ay b ei nappro priatef or d eploye d proj e cts, w here",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 311,
      "page_label": "293"
    }
  },
  {
    "page_content": "venientw heny ou’re g etting s tarted b ut m ay b ei nappro priatef or d eploye d proj e cts, w here\nprecis e cont rol o fd ep endencies isc riticalf or r elease h yg iene. T he u su als olut ion tot his\nproblem i st o vend or thec ode, t hati s, t om akeap ersistentl ocal co py o fa ll t he ne cessary\ndep endencies, andt ou pdatet hisc opyc aref ullya nd delib erately. P rior toG o1 .5, thisr equired\nch ang ing those p ackages’ import p at hs, soo ur co py o f golang.org/x/net/html would\nbecome gopl.io/vendor/golang.org/x/net/html.M orer ecentv ersions o ft he go to ol\nsupp ort vendoring direc tly,t houg hwe don’th aves pace tos howt he det ails here. S ee Vend or\nDire ctor ies in the out put of the go help gopathcommand.\nExercis e 10.3: Using fetch http://gopl.io/ch1/helloworld?go-get=1,ﬁ nd o ut w hich\nservice hosts the codes amples for thisb ook. (HTTP r equests fro mgo getinclude the go-get\nparameter sot hats er versc an dist inguish themf ro mordinar ybrowserr equests.)\n10.7.3. Building Packages\nThe go buildcommandc ompi les eac ha rgumentp ackage. I ft he p ackagei sal ibrar y,t he\nresu lti sd is carde d;this merelyc he cks thatt he packagei sf re eof compi lee rror s.I ft he package\nis name dmain, go buildinvo kes the lin ker toc re ate ane xe cut ablei nt he cur rentd irec tor y;\nthen ameo ft he exe cut ablei st aken fro mthel asts eg mento ft he package’si mp ort pat h.\nSincee achd irec tor ycont ainso ne package, eache xe cut ablep rogram, or comm and in Unix ter-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 311,
      "page_label": "293"
    }
  },
  {
    "page_content": "Sincee achd irec tor ycont ainso ne package, eache xe cut ablep rogram, or comm and in Unix ter-\nminolog y,r equires its own direc tor y.T hese direc tor ies ares om etimesc hi ldren ofad irec tor y\nname dcmd,s ucha st he golang.org/x/tools/cmd/godoc commandw hichs er ves Gop ack-\naged ocumentation through a web int erface (§10.7.4).\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 311,
      "page_label": "293"
    }
  },
  {
    "page_content": "ptg16105617\n294 CHAPTER 10. PACKAGES AND THE GO TOOL\nPackages may b es peciﬁed byt heir import pat hs, as wes aw abov e,o rb yar el ative direc tor y\nname,w hichm usts tart wit ha . or .. segmente veni ft hisw ou ldn ot ordinar ily ber equired.\nIf noa rgumenti sp rovide d,t he cur rentd irec tor yis assume d.T hu sthef ol low ing command s\nbuildt he samep ackage, thoug heach writest he exe cut ablet ot he direc tor yin which go build\nis run:\n$c d$ GOPATH/src/gopl.io/ch1/helloworld\n$g ob uild\nand:\n$c d anywhere\n$g ob uild gopl.io/ch1/helloworld\nand:\n$c d$ GOPATH\n$g ob uild ./src/gopl.io/ch1/helloworld\nbutn ot:\n$c d$ GOPATH\n$g ob uild src/gopl.io/ch1/helloworld\nError: cannot find package \"src/gopl.io/ch1/helloworld\".\nPackages may al so bes peciﬁed a sal isto fﬁ le names, t houg h this tends tob eu sedo nlyf or\nsmal lprog ramsa nd one-off exp eriments. Ift he packagen amei s main,t he exe cut ablen ame\ncomesf ro mtheb as enameo ft he ﬁrs t.goﬁle.\n$c at quoteargs.go\npackage main\nimport (\n\"fmt\"\n\"os\"\n)\nfunc main() {\nfmt.Printf(\"%q\\n\", os.Args[1:])\n}\n$g ob uild quoteargs.go\n$. /quoteargs one \"two three\" four\\ five\n[\"one\" \"two three\" \"four five\"]\nPartic ularlyf or throwaway programsl iket hiso ne,w ew antt or un the exe cut ablea ss oona s\nwe’ve bui lti t. The go runcommandc om binest hese two steps:\n$g or un quoteargs.go one \"two three\" four\\ five\n[\"one\" \"two three\" \"four five\"]\nThe ﬁrs t argumentt hatd oesn’te nd in .go is assume dto bet he beg inningo ft he listo fa rgu-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 312,
      "page_label": "294"
    }
  },
  {
    "page_content": "[\"one\" \"two three\" \"four five\"]\nThe ﬁrs t argumentt hatd oesn’te nd in .go is assume dto bet he beg inningo ft he listo fa rgu-\nmentst ot he Goe xe cut able.\nBy defau lt, the go buildcommandb ui ldst he requeste dpackagea nd all its dependencies, then\nthrows away al lt he compi led codee xceptt he ﬁnale xe cut able, ifa ny.B ot hthed ep endency\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 312,
      "page_label": "294"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.7. THE GO TOOL 295\nanalysisa nd the c ompi lat iona re sur prisinglyf ast, but asp ro jec tsg rowt od ozenso fp ackages\nandh undredso ft hous and sof lines ofc ode, the timet or ecompi led ep endencies can becom e\nnotice able,p ot ent ial lys everal secon ds, evenw hent hose dep endencies haven’tc hange dat all.\nThe go installcommandi sv er y simi lar togo build,e xceptt hati ts aves the compi led code\nfore achp ackagea nd c ommand i ns teado ft hrow ing i ta way.C ompi led pa ckages ares aved\nbene ath the $GOPATH/pkg direc tor y correspondingt ot he src direc tor y in whicht he source\nresides, andc ommand exe cut ables ares aved int he $GOPATH/bin direc tor y.( Many users put\n$GOPATH/bin on their exec utables earc hpath.) Thereafter, go buildand go installdo not\nrunt he compi ler for those packages andc ommand sif the yhave not change d,m ak ings ubse-\nquentb ui ldsm uchf aster. F or convenience, go build -iinst allst he packages thata re dep en-\ndencies oft he bui ldtarget.\nSincec ompi led packages varyb yp latfor manda rc hit ecture, go installsavest hemb eneath a\nsu bdirec tor ywhos ename incor porates the values oft he GOOS and GOARCH enviro nment var i-\nables. F or example, onaM ac the golang.org/x/net/html packagei sc ompi led and ins tal le d\nin the ﬁle golang.org/x/net/html.aunder $GOPATH/pkg/darwin_amd64.\nIt iss traig htfor wardt o cross-compi le aG op rogram, thati s, tob ui ld an exec utablei nt ended for",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 313,
      "page_label": "295"
    }
  },
  {
    "page_content": "It iss traig htfor wardt o cross-compi le aG op rogram, thati s, tob ui ld an exec utablei nt ended for\nad if ferento perat ings ystemo rC PU.J usts et the GOOS or GOARCH var iables dur ingt he bui ld.\nThe crossprog rampr intst he operat ings ystema nd arc hit ecturef or whichi tw as bui lt:\ngopl.io/ch10/cross\nfunc main() {\nfmt.Println(runtime.GOOS, runtime.GOARCH)\n}\nThef ol low ing command sproduce 64-bit and 32-bit exe cut ables respectively:\n$g ob uild gopl.io/ch10/cross\n$. /cross\ndarwin amd64\n$G OARCH=386 go build gopl.io/ch10/cross\n$. /cross\ndarwin 386\nSome p ackages may n eed t oc ompi led if ferentv ersions oft he c odef or c er tain platfor mso r\nprocessors,t od ealw it h low-le vel p or tabilit y issues o rt op rovide o pt imize d versions o f\nimportantr outines, f or i ns tance.I faﬁle nam ei ncludes an o perat ings ystemo rp ro cessor\narchit ecturen amel ike net_linux.go or asm_amd64.s,t hent he go to olw ill compi let he ﬁle\non lyw henb ui ldingf or thatt arget. S peci al comments cal le dbuil dtags give moreﬁ ne-g rained\ncont rol . Fo rexample, ifaﬁle co nt ainst hisc omment:\n// +build linux darwin\nbefore t he p ackaged eclarat ion( andi ts do cc omment), go buildwi l lcomp ile i to nlyw hen\nbuildingf or Linux orM ac OS X, andt hisc omment says never toc ompi let he ﬁle:\n// +build ignore\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 313,
      "page_label": "295"
    }
  },
  {
    "page_content": "ptg16105617\n296 CHAPTER 10. PACKAGES AND THE GO TOOL\nFo rmore det ails,s ee the Bu ild Const rai nts sectiono ft he go/buildpackage’sd ocumentation:\n$g od oc go/build\n10.7.4. Documenting Packages\nGo s ty les tron gly encourages good documen tation of p ackageA PIs. Eac hd eclarat iono fa n\nexp orted packagem embera nd the packaged eclarat ioni ts elf shouldb ei mmediate lyp re ceded\nby a comment explainingi ts pur pos e andu sage .\nGo doc comments area lways comp letes entences, andt he ﬁrs tsent encei su su allyas ummar y\nthat startsw it hthen ameb eingd eclare d.F unctionp arametersa nd other identiﬁersa re men-\ntion edw it houtq uotation or marku p.F or example, here’st he doc comment for fmt.Fprintf:\n// Fprintf formats according to a format specifier and writes to w.\n// It returns the number of bytes written and any write error encountered.\nfunc Fprintf(w io.Writer, format string, a ...interface{}) (int, error)\nThed et ails of Fprintf’sf or matting are explained inad oc comment ass oci ated wit hthe fmt\npackagei ts elf.A commenti mmediate lyp re cedinga package de clarat ioni sc on sidered t he\ndo c commentf or the packagea saw hole.T here mustb eo nlyo ne,t houg hit may appear in\nany ﬁle.L on g erp ackagec ommentsm ay warrantaﬁle o ft heir own; fmt’si so ver3 00 lines.\nThis ﬁle isu su allyc al le ddoc.go.\nGo o ddo cumentation need not bee xtensive ,andd ocumentation isn os ubst itute for simplicity.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 314,
      "page_label": "296"
    }
  },
  {
    "page_content": "This ﬁle isu su allyc al le ddoc.go.\nGo o ddo cumentation need not bee xtensive ,andd ocumentation isn os ubst itute for simplicity.\nIn deed,G o’sc onvent ion sfavor brevit yands implicity ind ocumentation as in all t hings, since\ndo cumentation,l ikec ode, requires maintenancet oo.M anyd eclarat ions can bee xplained in\non ewe ll-worde dsent e nce, and ift he beh avior ist ruly obv iou s,n oc omment isn eeded.\nThroughoutt he book, as space per mits, we’ve pre ceded manyd eclarat ions byd oc comments,\nbuty ou will ﬁnd bettere xamples as you brows ethes tand ard librar y.T wo tools can helpy ou\ndo that.\nThe go docto olp rintst he declarat iona nd doc comment oft he ent ity speciﬁed ont he com-\nmand line, whichm ay beap ackage:\n$g od oc time\npackage time // import \"time\"\nPackage time provides functionality for measuring and displaying time.\nconst Nanosecond Duration = 1 ...\nfunc After(d Duration) <-chan Time\nfunc Sleep(d Duration)\nfunc Since(t Time) Duration\nfunc Now() Time\ntype Duration int64\ntype Time struct { ... }\n...many more...\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 314,
      "page_label": "296"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.7. THE GO TOOL 297\nor a packagem ember:\n$g od oc time.Since\nfunc Since(t Time) Duration\nSince returns the time elapsed since t.\nIt is shorthand for time.Now().Sub(t).\nor a met hod:\n$g od oc time.Duration.Seconds\nfunc (d Duration) Seconds() float64\nSeconds returns the duration as a floating-point number of seconds.\nThet oold oesn ot need completei mp ort pat hso rc or rec tidentiﬁer cas e.T hisc ommand prints\nthed ocumentation of (*json.Decoder).Decodefrom the encoding/jsonpackage:\n$g od oc json.decode\nfunc (dec *Decoder) Decode(v interface{}) error\nDecode reads the next JSON-encoded value from its input and stores\nit in the value pointed to by v.\nThes econ dto ol, confusinglyn amed godoc,s er ves cross-lin ked HTMLp ages thatp rovide the\nsame infor mat iona s go docandm uchm ore. T he godoc server at https://golang.org/pkg\ncovers the stand ard librar y.F igure1 0.1 shows the documentation for t he time package, and\nin Sec tion 11.6 we’ll see godoc’si nt erac tived ispl ayo fe xamplep rograms. The godoc server at\nhttps://godoc.orghasas earc hable index oft hous and sof open-s ource packages.\nYo ucana ls o runa ni ns tance of godoc in y ourw or ksp ace if y ou w antt ob rows e your o wn\npackages. V isit http://localhost:8000/pkgin yourb rows erwhiler unningt hisc ommand:\n$g odoc -http :8000\nIts -analysis=type and -analysis=pointer ﬂags aug ment t he d ocumentation a nd the\nsource code wit hther esults ofa dvance dst atica nalysis.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 315,
      "page_label": "297"
    }
  },
  {
    "page_content": "Its -analysis=type and -analysis=pointer ﬂags aug ment t he d ocumentation a nd the\nsource code wit hther esults ofa dvance dst atica nalysis.\n10.7.5. I nt ernal Packages\nThep ackagei st he mo st i mp ortantm echanism f or e nc apsulat ioni nG op rograms. U nex-\nported identiﬁersa re visible onlyw it hin the samep ackage, and exp orted identiﬁersa re visible\nto the wor ld.\nSometimes, thoug h,am idd leground wou ldb eh elpf ul, a way tod eﬁne identiﬁerst hata re visi-\nblet oas mall set oft rusted packages, but not toe veryon e.F or example, whenw e’re bre aking\nup \na l arge p ackagei nt o more m anageablep ar ts, we m ay n ot w antt or evealt he i nt erfaces\nbetweent hose p ar ts to o ther packages. Or we m ay wan tt os hare u tilit y func tions a cross\nseveral packages ofap ro jec twithoute xp osingt hemm orew idely.O rp erhaps wej ustw antt o\nexp erimentw it han ew packagew it houtp remature lyc ommitt ing toi ts API, byp ut tingi t ‘‘on\nprob ation’’with a limite dseto fc lients.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 315,
      "page_label": "297"
    }
  },
  {
    "page_content": "ptg16105617\n298 CHAPTER 10. PACKAGES AND THE GO TOOL\nFigure 10.1. The timepackagei n godoc.\nTo addresst hese needs, the go buildto olt re ats a packages peci ally ifi ts import pat h cont ains\nap at h segmentn amed internal.S uchp ackages ar ec al le dinternal p ackages.A ni nt ernal\npackagem ay bei mp orted onlyb ya nother packaget hati si nside the tre e ro ote dat the parent\nof t he internal direc tor y.F or e xample, g iven t he p ackages b elow, net/http/inter-\nnal/chunked canb ei mp orted f ro m net/http/httputil or net/http,b ut n ot f ro m\nnet/url.H ow ever, net/urlmayi mp ort net/http/httputil.\nnet/http\nnet/http/internal/chunked\nnet/http/httputil\nnet/url\n10.7.6. Querying Packages\nThe go listto olr ep ortsi nfor mat iona bout avai lable packages. Ini ts simplestf or m, go list\ntestsw hether a packagei sp resent int he wor ksp ace andp rintsi ts import pat h if so:\n$g ol ist github.com/go-sql-driver/mysql\ngithub.com/go-sql-driver/mysql\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 316,
      "page_label": "298"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 10.7. THE GO TOOL 299\nAn argumentt o go listmayc ontain the ‘‘...’’wi ldc ard, whichm atch esa ny subst ringo fa\npackage’si mp ort pat h. We can use itt oe numeratea ll the packages wit hin a Gow or ksp ace:\n$g ol ist ...\narchive/tar\narchive/zip\nbufio\nbytes\ncmd/addr2line\ncmd/api\n...many more...\nor wit hin a speciﬁcs ubtree:\n$g ol ist gopl.io/ch3/...\ngopl.io/ch3/basename1\ngopl.io/ch3/basename2\ngopl.io/ch3/comma\ngopl.io/ch3/mandelbrot\ngopl.io/ch3/netflag\ngopl.io/ch3/printints\ngopl.io/ch3/surface\nor rel ate d to a par tic ulart opic:\n$g ol ist ...xml...\nencoding/xml\ngopl.io/ch7/xmlselect\nThe go listcommando bt ainst he completem et adat afore achp ackage, not justt he imp ort\npath,a nd makes thisi nfor mat iona vai lable tou sers oro ther tools inav ar ietyo ff or mats. The\n-jsonﬂag causes go listto print the ent ire record ofe achp ackage in JSONf or mat:\n$g ol ist -json hash\n{\n\"Dir\": \"/home/gopher/go/src/hash\",\n\"ImportPath\": \"hash\",\n\"Name\": \"hash\",\n\"Doc\": \"Package hash provides interfaces for hash functions.\",\n\"Target\": \"/home/gopher/go/pkg/darwin_amd64/hash.a\",\n\"Goroot\": true,\n\"Standard\": true,\n\"Root\": \"/home/gopher/go\",\n\"GoFiles\": [\n\"hash.go\"\n],\n\"Imports\": [\n\"io\"\n],\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 317,
      "page_label": "299"
    }
  },
  {
    "page_content": "ptg16105617\n300 CHAPTER 10. PACKAGES AND THE GO TOOL\n\"Deps\": [\n\"errors\",\n\"io\",\n\"runtime\",\n\"sync\",\n\"sync/atomic\",\n\"unsafe\"\n]\n}\nThe -f ﬂag lets u sers c ustomize t he o ut put for mat usin gt he t empl ate l angu ageo fp ackage\ntext/template (§4.6). Thi sc ommand p rintst he t ransitive d ep endencies oft he strconv\npackage, sep arated bys paces:\n$g ol ist -f '{{join .Deps \" \"}}' strconv\nerrors math runtime unicode/utf8 unsafe\nandt hisc ommand printst he direc timportso fe achp ackagei nt he compress su btree oft he\nst and ard librar y:\n$g ol ist -f '{{.ImportPath}} -> {{join .Imports \" \"}}' compress/...\ncompress/bzip2 -> bufio io sort\ncompress/flate -> bufio fmt io math sort strconv\ncompress/gzip -> bufio compress/flate errors fmt hash hash/crc32 io time\ncompress/lzw -> bufio errors fmt io\ncompress/zlib -> bufio compress/flate errors fmt hash hash/adler32 io\nThe go listcommandi su sefulf or b ot h on e-off i nt erac tiveq uer ies andf or bui ld andt est\nautomation scr ipts. We ’ll use ita gain in S ec tion 11.2.4. F or morei nfor mat ion, includingt he\nseto fa vai lable ﬁelds and their meaning, see the out put ofgo help list.\nIn thisc hapt er, we’ve explained all the imp ortants ub command sof the goto ol—excep to ne.I n\nthen ext chapt er, we’ll see how the go testcommandi su sedf or testing Gop rograms.\nExercis e 10.4:Cons truct a toolt hatr ep ortst he set ofa ll packages in the wor ksp ace thatt ran-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 318,
      "page_label": "300"
    }
  },
  {
    "page_content": "Exercis e 10.4:Cons truct a toolt hatr ep ortst he set ofa ll packages in the wor ksp ace thatt ran-\nsitive lyd ep endo nt he p ackages s peciﬁed b yt he a rguments. Hint: y ou w ill need t or un\ngo listtwice,o ncef or the initial packages ando ncef or all packages. Y ou may wantt op arse\nitsJ SONo ut put usingt he encoding/jsonpackage( §4.5).\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 318,
      "page_label": "300"
    }
  },
  {
    "page_content": "ptg16105617\n11\nTesting\nMaur iceWi l kes, the develop ero fE DSAC, the ﬁrs tstored-program comp uter, had a s tartling\ninsig htw hi leclimbing the stairso fh is lab orator yin 1949. In Memoir sof a ComputerP ione er,\nhe recal le d,‘‘Ther ealizat ionc ameo verm ew it hfull force thatag ood par tof the remainder of\nmy lifew as going tob es pent inﬁ ndinge rror sin myo wn programs.’’Sure lye very program-\nmero fast ored-program comp uters ince t henc an sy mp athize w it hWi l kes, t houg h perh aps\nnotw it houts om ebemu sement at his naïvetéa bout the difﬁcult ies ofs of twarec on str uction.\nProg ramst oday aref ar largera nd more complex thani nW ilkes’st ime, ofc ours e,andag re at\nde al of e ffor t hasb eens pent o nt echniques t om aket hisc omplexity m anageable. T wo\nte chniques in par tic ulars tand out for t heir ef fe ctiveness.T he ﬁrs t is routine p eerr evie w of\nprog ramsb eforet he yared eploye d.T he secon d,t he subjec tof thisc hapt er, ist esting .\nTest ing , by w hichw ei mp licitlym ean au tom ate dtest ing , is t he p rac tice ofw riting s mall\nprog ramst hatc he ckt hatt he codeu nder test( the produc tion co de) behavesa se xp ected for\ncer tain inputs, whic ha re u su allye it her caref ullyc hosent oe xercis e cer tain featureso rr an-\ndomize dto ens ure bro adc ov erage.\nThe ﬁeldo fs of twaret esting ise normou s.T he tasko ft esting o cc upies allp rogrammerss om e",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 319,
      "page_label": "301"
    }
  },
  {
    "page_content": "domize dto ens ure bro adc ov erage.\nThe ﬁeldo fs of twaret esting ise normou s.T he tasko ft esting o cc upies allp rogrammerss om e\nof t he t imea nd s om e prog rammersa ll o ft he t ime. T he l it eratureo nt esting i ncludes\nthou sands o fp rint edb ooks an dm illions o fw ords o fb log posts. I ne very m ainst ream\nprog rammingl angu age, there are dozenso fs of twarep ackages intended for testc on str uction,\nsome wit hag re atd ealo ft he ory,a nd the ﬁelds eems toa tt rac tmore thanaf ew pro phets wit h\ncult-li kef ol low ings. I ti sa lmoste noug hto convincep rogrammerst hatt ow rite effec tive tests\nthey musta cquireaw hole new seto fs ki l ls.\nGo’sa ppro ach to test ing can seemr at her low-techi nc omparison. I tr elies ono ne command,\ngo test,a nd a s et ofc onvent ion sforw riting testf unctions that go testcanr un. Th ec om-\nparat ive lyl ig htweig htm echanism i se ffec tive f or p uret esting , andi te xtends na tural lyt o\nbenchmarks ands ystematice xamples for documentation.\n301\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 319,
      "page_label": "301"
    }
  },
  {
    "page_content": "ptg16105617\n302 CHAPTER 11. TESTING\nIn prac tice,w riting testc odei sn ot muchd if ferentf ro mwr iting the originalp rogram its elf.\nWe write short functions thatf ocus ono ne par tof the task. W eh avet ob ec aref ulo fb ound ary\ncondit ion s,t hin k ab out dat ast ruc tures, andr easona bout whatr esults a co mp utation should\nproduce f ro m suit ablei np uts. B ut t hisi st he s amep ro cessa sw riting o rdinar y Go c ode; it\nne e dn’tr equiren ew not ation s,c onvent ion s,a nd tools.\n11.1. The go testTool\nThe go testsu bcommandi sat estd riverf or Gop ackages thata re organize d accordingt oc er-\ntain conv ent ion s.I nap ackaged irec tor y,ﬁ les whose names endw it h_test.goaren ot par tof\nthep ackageo rdinar ily bui ltb y go buildbuta re a par tof it whenb ui ltb y go test.\nWi thin *_test.go ﬁles, three kinds off unctions are tre ate dsp eci ally :tests, benchmarks, and\nexamples. A te stfunc tion,w hichi saf unctionw hose nameb eg insw it hTest,e xercis ess om e\nprog ram log ic forc or rec t behavior ; go testcallst he t estf unctiona nd r ep ortst he r esult,\nwhichi se it her PASS or FAIL.A benchm ark fun cti on hasan ameb eg inningw it hBenchmark\nandm easurest he per for mance ofs om eop erat ion;go testreportst he mean exec ution time\nof t he o perat ion. A nd a n ex amp lef un cti on,w hose n ames tartsw it h Example,p rovides\nmachine-che cke ddo cumentation.W ew ill cov ert ests in detai l in Sec tion 11.2, benchmarksi n\nSection1 1.4, ande xamples in Sec",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 320,
      "page_label": "302"
    }
  },
  {
    "page_content": "machine-che cke ddo cumentation.W ew ill cov ert ests in detai l in Sec tion 11.2, benchmarksi n\nSection1 1.4, ande xamples in Sec \ntion 11.6.\nThe go testto ols cans the *_test.go ﬁles for these speci alfunc tions,g enerates a temporar y\nmain packaget hatc al lst hema ll int he pro per way,b ui ldsa nd runsi t, rep ortst he results, and\nthen cle ansu p.\n11.2. TestFunctions\nEach test ﬁle musti mp ort the testingpackage. T estf unctions havet he fol low ing sig nature:\nfunc TestName(t *testing.T) {\n// ...\n}\nTest functionn ames mustb eg inwith Test;t he opt ion als ufﬁx Name mu stb eg inwith a capit al\nletter:\nfunc TestSin(t *testing.T) { /* ... */ }\nfunc TestCos(t *testing.T) { /* ... */ }\nfunc TestLog(t *testing.T) { /* ... */ }\nThe t parameter p rovides met h odsf or r ep ortingt estf ai lures an dl og ginga ddition al\ninfor mat ion. Let’sd eﬁne ane xamplep ackage gopl.io/ch11/word1,c ontaininga s inglef unc-\ntion IsPalindromethat rep ortsw hether a str ing reads the samef or warda nd backward. ( This\nimplementation tests e very b ytet wice if t he s tr ing i sap alindrom e;w e’ll c om eback to t hat\nshortly.)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 320,
      "page_label": "302"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 303\ngopl.io/ch11/word1\n// Package word provides utilities for word games.\npackage word\n// IsPalindrome reports whether s reads the same forward and backward.\n// (Our first attempt.)\nfunc IsPalindrome(s string) bool {\nfor i := range s {\nif s[i] != s[len(s)-1-i] {\nreturn false\n}\n}\nreturn true\n}\nIn the samed irec tor y,t he ﬁle word_test.go cont ainst wo testf unctions named TestPalin-\ndrome and TestNonPalindrome.E achc he cks that IsPalindrome givest he rig hta nswerf or a\nsinglei np uta nd rep ortsf ai lures usingt.Error:\npackage word\nimport \"testing\"\nfunc TestPalindrome(t *testing.T) {\nif !IsPalindrome(\"detartrated\") {\nt.Error(`IsPalindrome(\"detartrated\") = false`)\n}\nif !IsPalindrome(\"kayak\") {\nt.Error(`IsPalindrome(\"kayak\") = false`)\n}\n}\nfunc TestNonPalindrome(t *testing.T) {\nif IsPalindrome(\"palindrome\") {\nt.Error(`IsPalindrome(\"palindrome\") = true`)\n}\n}\nA go test(or go build)c ommand wit hno packagea rguments operates ont he packagei n\nthec ur rentd irec tor y.W ec an bui ld andr un the tests wit hthef ol low ing command.\n$c d$ GOPATH/src/gopl.io/ch11/word1\n$g ot est\nok gopl.io/ch11/word1 0.008s\nSat isﬁed,w es hipt he program, but nos oonerh avet he launch par tyg uests depar ted thant he\nbugr ep ortss tart toa rrive . AF renchu sern amed NoelleE ve Elleonc ompl ainst hat IsPalin-\ndrome do esn’tr ecog nize‘‘été.’’Anot her,f ro mCent ral America,i sd is app ointe dthat itr ej e cts",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 321,
      "page_label": "303"
    }
  },
  {
    "page_content": "drome do esn’tr ecog nize‘‘été.’’Anot her,f ro mCent ral America,i sd is app ointe dthat itr ej e cts\n‘‘Am an, a p lan, a canal: Panama.’’Thes esp eciﬁca nd small bug rep ortsn atural lyl endt hem-\nselves ton ew testc as es.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 321,
      "page_label": "303"
    }
  },
  {
    "page_content": "ptg16105617\n304 CHAPTER 11. TESTING\nfunc TestFrenchPalindrome(t *testing.T) {\nif !IsPalindrome(\"été\") {\nt.Error(`IsPalindrome(\"été\") = false`)\n}\n}\nfunc TestCanalPalindrome(t *testing.T) {\ninput := \"A man, a plan, a canal: Panama\"\nif !IsPalindrome(input) {\nt.Errorf(`IsPalindrome(%q) = false`,i nput)\n}\n}\nTo avoid writing the lon ginput st ringt wice,w eu se Errorf,w hichp rovides for matting like\nPrintf.\nWh ent he two new tests haveb eena dde d,t he go testcommandf ai lsw it hinfor mat ive error\nmess ages.\n$g ot est\n--- FAIL: TestFrenchPalindrome (0.00s)\nword_test.go:28: IsPalindrome(\"été\") = false\n--- FAIL: TestCanalPalindrome (0.00s)\nword_test.go:35: IsPalindrome(\"A man, a plan, a canal: Panama\") = false\nFAIL\nFAIL gopl.io/ch11/word1 0.014s\nIt’sg ood prac tice tow rite the test ﬁrs tando bs erve thati tt riggerst he samef ai lured es crib edb y\ntheu ser’sb ug rep ort.O nlyt henc an w eb ec onﬁdentt hatw hate ver ﬁxw ec om e up wit h\naddressest he rig htp ro blem.\nAs a b onus,r unning go test is us uallyq uickert hanm anuallyg oing t hrough t he s teps\ndes crib edi nt he bug rep ort,a llow ing ust oi teratem orer apid ly. I ft he tests uite containsm any\nslow tests, wem ay makee venf asterp rogress if we’re selec tive about whicho nesw er un.\nThe -vﬂag printst he namea nd exe cut ion timeo fe acht est in the package:\n$g ot est -v\n=== RUN TestPalindrome\n--- PASS: TestPalindrome (0.00s)\n=== RUN TestNonPalindrome\n--- PASS: TestNonPalindrome (0.00s)\n=== RUN TestFrenchPalindrome",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 322,
      "page_label": "304"
    }
  },
  {
    "page_content": "=== RUN TestPalindrome\n--- PASS: TestPalindrome (0.00s)\n=== RUN TestNonPalindrome\n--- PASS: TestNonPalindrome (0.00s)\n=== RUN TestFrenchPalindrome\n--- FAIL: TestFrenchPalindrome (0.00s)\nword_test.go:28: IsPalindrome(\"été\") = false\n=== RUN TestCanalPalindrome\n--- FAIL: TestCanalPalindrome (0.00s)\nword_test.go:35: IsPalindrome(\"A man, a plan, a canal: Panama\") = false\nFAIL\nexit status 1\nFAIL gopl.io/ch11/word1 0.017s\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 322,
      "page_label": "304"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 305\nandt he -run ﬂag ,whos e argumenti sar egu lar expression, causes go testto run onlyt hose\ntestsw hose functionn amem atch est he pattern:\n$g ot est -v -run=\"French|Canal\"\n=== RUN TestFrenchPalindrome\n--- FAIL: TestFrenchPalindrome (0.00s)\nword_test.go:28: IsPalindrome(\"été\") = false\n=== RUN TestCanalPalindrome\n--- FAIL: TestCanalPalindrome (0.00s)\nword_test.go:35: IsPalindrome(\"A man, a plan, a canal: Panama\") = false\nFAIL\nexit status 1\nFAIL gopl.io/ch11/word1 0.014s\nOf course,o ncew e’ve gott ent he selec ted tests top ass, wes houldi nv oke go testwith no ﬂags\nto run the ent ire tests uite one lastt imeb eforew ec ommitt he change .\nNo wourt aski st oﬁ xt he bugs. A quicki nv est igat ionr eveals the cause oft he ﬁrs tbugt ob e\nIsPalindrome’su se ofb ytes equences, not runes equences, sot hatn on-ASCII charac terss uch\nas t he é i n \"été\" conf use it. Th es econ dbuga risesf ro mnoti gnor ing spaces, punctuation,\nandl etterc as e.\nChastene d,w er ewrite the functionm orec aref ully:\ngopl.io/ch11/word2\n// Package word provides utilities for word games.\npackage word\nimport \"unicode\"\n// IsPalindrome reports whether s reads the same forward and backward.\n// Letter case is ignored, as are non-letters.\nfunc IsPalindrome(s string) bool {\nvar letters []rune\nfor _, r := range s {\nif unicode.IsLetter(r) {\nletters = append(letters, unicode.ToLower(r))\n}\n}\nfor i := range letters {\nif letters[i] != letters[len(letters)-1-i] {\nreturn false\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 323,
      "page_label": "305"
    }
  },
  {
    "page_content": "letters = append(letters, unicode.ToLower(r))\n}\n}\nfor i := range letters {\nif letters[i] != letters[len(letters)-1-i] {\nreturn false\n}\n}\nreturn true\n}\nWe als owr ite a morec omprehensives et oft estc as esthat combines allt he pre vious onesa nd a\nnumb ero fn ew onesi nt oat able.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 323,
      "page_label": "305"
    }
  },
  {
    "page_content": "ptg16105617\n306 CHAPTER 11. TESTING\nfunc TestIsPalindrome(t *testing.T) {\nvar tests = []struct {\ninput string\nwant bool\n}{\n{\"\", true},\n{\"a\", true},\n{\"aa\", true},\n{\"ab\", false},\n{\"kayak\", true},\n{\"detartrated\", true},\n{\"A man, a plan, a canal: Panama\", true},\n{\"Evil I did dwell; lewd did I live.\", true},\n{\"Able was I ere I saw Elba\", true},\n{\"été\", true},\n{\"Et se resservir, ivresse reste.\", true},\n{\"palindrome\", false}, // non-palindrome\n{\"desserts\", false}, // semi-palindrome\n}\nfor _, test := range tests {\nif got := IsPalindrome(test.input); got != test.want {\nt.Errorf(\"IsPalindrome(%q) = %v\", test.input, got)\n}\n}\n}\nOurn ew tests pass:\n$g ot est gopl.io/ch11/word2\nok gopl.io/ch11/word2 0.015s\nThiss ty leo f tabl e-driven test ing isv er y common inG o. I ti ss traig htfor wardt oa dd new table\nentr ies as needed,a nd since the ass ertionl og icis not dup lic ated,w ec an invest moree ffor tin\nproducingag ood error message .\nTheo ut put of a fai lingt estd oes not include the ent ire stack trace at the moment oft he cal lto\nt.Errorf.N or does t.Errorfcaus eap anic ors topt he exe cut ion of the test, unli kea ss ertion\nfai lures in manyt estf ramewor ksf or other langu ages. Tests arei ndep endento fe acho ther.I f\nan early ent ryi nt he table causest he testt of ai l,l ater table en tr ies will still b ec he cke d,a nd\nthus wem ay lear n ab out multiplef ai lures dur ingas ingler un.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 324,
      "page_label": "306"
    }
  },
  {
    "page_content": "thus wem ay lear n ab out multiplef ai lures dur ingas ingler un.\nWh enw er eallym usts topat estf unction, perhaps because some initializat ionc odef ai le dor to\npreventafai lur ea lready rep orted fro mcausingac onfusingc as cade ofo thers, weu se t.Fatal\nor t.Fatalf.T hese mustb ec al le dfrom the sameg oroutine ast he Test func tion, not fro m\nanot her one cre ate dduring the test.\nTest f ai lurem essagesa re u su allyo ft he f or m \"f(x) = y, want z\",w here f(x) explainst he\nattemp ted operat iona nd its input, yis the actualr esult, and zthee xp ected result. W here con-\nvenient, as in our palindrom eexample, actualG os yntaxi su sedf or the f(x) part.D ispl aying\nx is p ar tic ularlyi mp ortant in a table-dr i vent est, since a g iven as sertioni se xe cut edm any\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 324,
      "page_label": "306"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 307\ntimesw it h dif ferentv alues. A void b oi ler plate a nd r edundant i nfor mat ion. W hent esting a\nboole anfunc tions ucha s IsPalindrome,o mitt he want zpart since ita ddsn oi nfor mat ion. If\nx, y,o r zis lengt hy, print a con cis esummar yof the relevantp ar ts instead. T he aut hor of a test\nshoulds tr ive toh elpt he programmer who mustd iagnos eat estf ai lure.\nExercis e 11.1:Wr ite testsf or the charcountprog ram in Sec tion 4.3.\nExercis e 11.2: Wr ite a s et o ft ests for IntSet (§6.5) t hatc he cks t hati ts b eh avior a fter each\nop erat ioni se quivalentt oas et bas edo nb ui lt-in maps. Sav ey ouri mp lementation for\nbenchmarking inE xercis e11.7.\n11.2.1. Randomized T esting\nTable-dr ivent ests ar ec onvenientf or c he cking t hataf unctionw or kso ni np uts caref ully\nsele cte d to e xercis e interest ing c as es in t he l og ic. Anot her ap proach, ra ndomizedt esting,\nexploresab ro ader range ofi np uts byc on str uctingi np uts at random.\nHo wdo wek noww hato ut put toe xp ect fro mourf unction, given a randomi np ut? Ther ea re\ntwos trateg ies. The ﬁrs t is tow rite ana lt ernat ive imp lementation of t he functiont hatu sesa\nlesse fﬁcientb ut simpler andc le arer algor it hm, andc he ckt hatb ot himplementation sgive the\nsame result. Th es econ dis toc re ate inp utv alues accordingt oap attern sot hatw ek noww hat\noutput toe xp ect.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 325,
      "page_label": "307"
    }
  },
  {
    "page_content": "same result. Th es econ dis toc re ate inp utv alues accordingt oap attern sot hatw ek noww hat\noutput toe xp ect.\nThee xampleb elow u sest he s econ d approach:t he randomPalindrome func tiong en erates\nword sthat arek nown tob ep alindrom esb yc on str uction.\nimport \"math/rand\"\n// randomPalindrome returns a palindrome whose length and contents\n// are derived from the pseudo-random number generator rng.\nfunc randomPalindrome(rng *rand.Rand) string {\nn: =r ng.Intn(25) // random length up to 24\nrunes := make([]rune, n)\nfor i := 0; i < (n+1)/2; i++ {\nr: =r une(rng.Intn(0x1000)) // random rune up to '\\u0999'\nrunes[i] = r\nrunes[n-1-i] = r\n}\nreturn string(runes)\n}\nfunc TestRandomPalindromes(t *testing.T) {\n// Initialize a pseudo-random number generator.\nseed := time.Now().UTC().UnixNano()\nt.Logf(\"Random seed: %d\", seed)\nrng := rand.New(rand.NewSource(seed))\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 325,
      "page_label": "307"
    }
  },
  {
    "page_content": "ptg16105617\n308 CHAPTER 11. TESTING\nfor i := 0; i < 1000; i++ {\np: =r andomPalindrome(rng)\nif !IsPalindrome(p) {\nt.Errorf(\"IsPalindrome(%q) = false\", p)\n}\n}\n}\nSincer andomize dtestsa re non deter minist ic, iti sc riticalt hatt he log oft he fai lingt estr ecord\nsufﬁcienti nfor mat iont or epro duce the fai lure. I no ur example, the inp ut p to IsPalindrome\nte lls us all wen eed tok now, but for functions thata cceptm orec omplex inputs, itm ay bes im-\npler tol og the seed oft he pseudo-randomn umberg enerator (as wed oa bove)t hant od ump\nthee nt ire inp utd at ast ruc ture. A rmed wit hthat seed value,w ec an easi lym odif ythet estt o\nrepl ayt he fai lured eter minist ically.\nBy usingt he cur rentt imea sas ourceo fr andomness, the testw ill explore nov eli np uts each\ntime iti sr un, overt he ent ire cours eof itsl ifet ime. T hisi se sp eci ally valuablei fy ourp ro jec t\nus es an aut omated systemt or un alli ts tests per iodic ally.\nExercis e 11.3:TestRandomPalindromes on lyt ests palindrom es. W rite a randomize dtest that\ngenerates andv er iﬁesnon-palindrom es.\nExercis e 11.4: Mo dif y randomPalindrome to e xercis e IsPalindrome’sh andlingo fp unc-\ntu ation and spaces.\n11.2.2. T esting a Command\nThe go testto oli su sefulf or testing librar ypackages, but wit hal it tle effort wec an use itt o\ntest command sas wel l.A packagen amed main ordinar ily pro duces an ex ec utablep rogram,\nbuti tc an bei mp orted asal ibrar yto o.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 326,
      "page_label": "308"
    }
  },
  {
    "page_content": "test command sas wel l.A packagen amed main ordinar ily pro duces an ex ec utablep rogram,\nbuti tc an bei mp orted asal ibrar yto o.\nLet’sw rite a test for the echoprog ramof Sec tion 2.3.2. We’ve split the program into two func-\ntion s: echo do es ther ealw or k,w hi le main pars esa nd reads t he ﬂag values an dr ep ortsa ny\ner \nror sreturned by echo.\ngopl.io/ch11/echo\n// Echo prints its command-line arguments.\npackage main\nimport (\n\"flag\"\n\"fmt\"\n\"io\"\n\"os\"\n\"strings\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 326,
      "page_label": "308"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 309\nvar (\nn=f lag.Bool(\"n\", false, \"omit trailing newline\")\ns=f lag.String(\"s\", \" \", \"separator\")\n)\nvar out io.Writer = os.Stdout // modified during testing\nfunc main() {\nflag.Parse()\nif err := echo(!*n, *s, flag.Args()); err != nil {\nfmt.Fprintf(os.Stderr, \"echo: %v\\n\", err)\nos.Exit(1)\n}\n}\nfunc echo(newline bool, sep string, args []string) error {\nfmt.Fprint(out, strings.Join(args, sep))\nif newline {\nfmt.Fprintln(out)\n}\nreturn nil\n}\nFr omt he test, wew ill cal lecho with a var ietyo fa rguments and ﬂag set tingsa nd che ckt hati t\npr intst he cor rec toutput ine achc as e,s ow e’ve adde dparameterst o echo to reduce its depen-\ndence ong lobalv ar iables. That said ,w e’ve als ointroduce d anot her globalv ar iable,out,t he\nio.Writerto whicht he resultw ill bew ritt en. B yh av ingechowr ite through thisv ar iable,n ot\ndirec tly to os.Stdout,t he tests can subst itute a dif ferentWriter implementation thatr ecords\nwhat was writt enf or later insp ection. Here ’st he test, in ﬁle echo_test.go:\npackage main\nimport (\n\"bytes\"\n\"fmt\"\n\"testing\"\n)\nfunc TestEcho(t *testing.T) {\nvar tests = []struct {\nnewline bool\nsep string\nargs []string\nwant string\n}{\n{true, \"\", []string{}, \"\\n\"},\n{false, \"\", []string{}, \"\"},\n{true, \"\\t\", []string{\"one\", \"two\", \"three\"}, \"one\\ttwo\\tthree\\n\"},\n{true, \",\", []string{\"a\", \"b\", \"c\"}, \"a,b,c\\n\"},\n{false, \":\", []string{\"1\", \"2\", \"3\"}, \"1:2:3\"},\n}\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 327,
      "page_label": "309"
    }
  },
  {
    "page_content": "{true, \",\", []string{\"a\", \"b\", \"c\"}, \"a,b,c\\n\"},\n{false, \":\", []string{\"1\", \"2\", \"3\"}, \"1:2:3\"},\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 327,
      "page_label": "309"
    }
  },
  {
    "page_content": "ptg16105617\n310 CHAPTER 11. TESTING\nfor _, test := range tests {\ndescr := fmt.Sprintf(\"echo(%v, %q, %q)\",\ntest.newline, test.sep, test.args)\nout = new(bytes.Buffer) // captured output\nif err := echo(test.newline, test.sep, test.args); err != nil {\nt.Errorf(\"%s failed: %v\", descr, err)\ncontinue\n}\ngot := out.(*bytes.Buffer).String()\nif got != test.want {\nt.Errorf(\"%s = %q, want %q\", descr, got, test.want)\n}\n}\n}\nNo tice thatt he testc odei si nt he samep ackagea st he pro duc tionc ode. A lt hough the package\nname is main andi td eﬁnesa main func tion, dur ingt esting thisp ackagea ctsa sal ibrar ythat\nexp oses the function TestEchoto the testd river; its mainfunc tioni si gnored.\nBy organizingt he testa sat able,w ec an easi lya dd new testc as es. Let’ss ee whath appens when\nthet estf ai ls, bya ddingt hisl inet ot he table:\n{true, \",\", []string{\"a\", \"b\", \"c\"}, \"a b c\\n\"}, // NOTE: wrong expectation!\ngo testpr ints\n$g ot est gopl.io/ch11/echo\n--- FAIL: TestEcho (0.00s)\necho_test.go:31: echo(true, \",\", [\"a\" \"b\" \"c\"]) = \"a,b,c\", want \"a b c\\n\"\nFAIL\nFAIL gopl.io/ch11/echo 0.006s\nThee rror message des crib est he att emp ted operat ion( usingG o-li kes yntax), the actualb eh av-\nior, and the exp ected beh avior,i nt hato rder.W it han infor mat ive error message sucha st his,\nyoum ay haveap rett ygo o dide a ab out the rootc ause beforey ou’ve evenl ocated the source\nco deof the test.\nIt’si mp ortantt hatc odeb eingt este dnotc al llog.Fatal or os.Exit,s ince these will stopt he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 328,
      "page_label": "310"
    }
  },
  {
    "page_content": "co deof the test.\nIt’si mp ortantt hatc odeb eingt este dnotc al llog.Fatal or os.Exit,s ince these will stopt he\nprocessi ni ts tracks; cal lingt hese functions shouldb er egarde d as the exc lusiver ig hto f main.\nIf s om ethingt ot allyu nexp ected h appens a nd a f unctionp anics, t he testd riverw ill rec ov er,\nthough the testw ill ofc ours ebe con sidered a fai lure. E xp ected error ssuch ast hose resulting\nfrom bad useri np ut, missing ﬁles, ori mp rop erc onﬁgurat ions houldb er ep orted byr etur ning\nan on-ni lerror value.F or tunately( though unfor t unatea sa ni llustrat ion), ourecho example\nis sos implet hati tw ill never retur nan on-ni l er ror.\n11.2.3. White-B ox Testing\nOnew ay ofc ategor izingt ests isb yt he level ofk nowledge the yre quireo ft he int ernal wor kings\nof t he p ackageu nder test. A bl ack-box test assume sn ot hinga bout t he p ackageo ther t han\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 328,
      "page_label": "310"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 311\nwhat i se xp osed b yi ts AP Ia nd s peciﬁed b yi ts do cument ation;t he p ackage’si nt ernalsa re\nop aque. I nc ontrast, a whit e-box test has privi leged accesst ot he int ernal functions and dat a\nst ruc tures oft he packagea nd can makeo bs ervat ions and changest hata no rdinar yclientc an-\nnot. F or example, a white-b oxt estc an che ckt hatt he invar iants oft he package’sd at atypesa re\nmaintained after every operat ion. (Then ame whit ebox is tradition al, but cl ear box wouldb e\nmore acc urate.)\nThet wo a ppro ach esa re c omplementary.B lack-b oxt ests ar eu su allym orer obust, n eeding\nfe wer updates as the sof twaree vo l ves. Th ey als ohelpt he testa ut hor emp athize wit hthec lient\nof the packagea nd can reveal ﬂaws in the API desig n. In contrast, white-b oxt ests can provide\nmore det aile d coverageo ft he trick ier par tsof the imp lementation.\nWe’ve already seene xamples ofb ot hkind s. TestIsPalindrome callso nlyt he exp orted func-\ntion IsPalindrome andi st hu s ab lack-b oxt est. TestEcho callst he echo func tiona nd\nup dates the globalv ar iableout,b ot hof whicha re unexp orted,m ak ingi taw hite-b oxt est.\nWhiled eveloping TestEcho,w em odiﬁed the echo func tiont ou se the package-le vel var iable\nout when writing its out put,s ot hatt he testc ou ldr eplace the stand ard out put wit han alter-\nnative imp lementation thatr ecords the dat a forl ater insp ection. Usin gt he samet echnique,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 329,
      "page_label": "311"
    }
  },
  {
    "page_content": "native imp lementation thatr ecords the dat a forl ater insp ection. Usin gt he samet echnique,\nwe can replace other par ts of the pro duc tionc odew it heasy-to-test ‘‘fake’’implementation s.\nThea dvantage o ff akei mp lementation s is tha tt he y canb es impler t oc onﬁgure, m ore\npredic table,m orer eliable, and easier too bs erve . They can also avoid undesirable side ef fe cts\nsuch asu pdat ingap ro duc tiond at abas eor charg ing a cre dit card.\nThec odeb elow s hows t he q uota-che cking l og ic in a w eb s er vice thatp rovides net wor ked\nstoraget ou sers.W henu sers e xceed 9 0% o ft heir quota,t he s ystems ends t hemaw ar ning\nemai l.\ngopl.io/ch11/storage1\npackage storage\nimport (\n\"fmt\"\n\"log\"\n\"net/smtp\"\n)\nfunc bytesInUse(username string) int64 { return 0 /* ... */ }\n// Email sender configuration.\n// NOTE: never put passwords in source code!\nconst sender = \"notifications@example.com\"\nconst password = \"correcthorsebatterystaple\"\nconst hostname = \"smtp.example.com\"\nconst template = `Warning: you are using %d bytes of storage,\n%d%% of your quota.`\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 329,
      "page_label": "311"
    }
  },
  {
    "page_content": "ptg16105617\n312 CHAPTER 11. TESTING\nfunc CheckQuota(username string) {\nused := bytesInUse(username)\nconst quota = 1000000000 // 1GB\npercent := 100 * used / quota\nif percent < 90 {\nreturn // OK\n}\nmsg := fmt.Sprintf(template, used, percent)\nauth := smtp.PlainAuth(\"\", sender, password, hostname)\nerr := smtp.SendMail(hostname+\":587\", auth, sender,\n[]string{username}, []byte(msg))\nif err != nil {\nlog.Printf(\"smtp.SendMail(%s) failed: %s\", username, err)\n}\n}\nWe’dl iket ot esti t, but wed on’tw antt he testt os endo ut reale mail.S ow em ov ethee mail\nlog ic into its own f unctiona nd store thatf unctioni na nu nexp orted pa ckage-le vel var iable,\nnotifyUser.\ngopl.io/ch11/storage2\nvar notifyUser = func(username, msg string) {\nauth := smtp.PlainAuth(\"\", sender, password, hostname)\nerr := smtp.SendMail(hostname+\":587\", auth, sender,\n[]string{username}, []byte(msg))\nif err != nil {\nlog.Printf(\"smtp.SendEmail(%s) failed: %s\", username, err)\n}\n}\nfunc CheckQuota(username string) {\nused := bytesInUse(username)\nconst quota = 1000000000 // 1GB\npercent := 100 * used / quota\nif percent < 90 {\nreturn // OK\n}\nmsg := fmt.Sprintf(template, used, percent)\nnotifyUser(username, msg)\n}\nWe can now write a test thats ubst itutesas implef aken ot iﬁcation mechanism insteado fs end-\ningr eale mail.T hiso ne records the notiﬁed usera nd the contentso ft he mess age .\npackage storage\nimport (\n\"strings\"\n\"testing\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 330,
      "page_label": "312"
    }
  },
  {
    "page_content": "package storage\nimport (\n\"strings\"\n\"testing\"\n)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 330,
      "page_label": "312"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 313\nfunc TestCheckQuotaNotifiesUser(t *testing.T) {\nvar notifiedUser, notifiedMsg string\nnotifyUser = func(user, msg string) {\nnotifiedUser, notifiedMsg = user, msg\n}\n// ...simulate a 980MB-used condition...\nconst user = \"joe@example.org\"\nCheckQuota(user)\nif notifiedUser == \"\" && notifiedMsg == \"\" {\nt.Fatalf(\"notifyUser not called\")\n}\nif notifiedUser != user {\nt.Errorf(\"wrong user (%s) notified, want %s\",\nnotifiedUser, user)\n}\nconst wantSubstring = \"98% of your quota\"\nif !strings.Contains(notifiedMsg, wantSubstring) {\nt.Errorf(\"unexpected notification message <<%s>>, \"+\n\"want substring %q\", notifiedMsg, wantSubstring)\n}\n}\nThere’so ne pro blem: aftert hist estf unctionh as retur ned, CheckQuota no lon g erw or ksa si t\nshouldb ecause it’ss till usingt he test’sf akei mp lementation of notifyUsers.( Therei sa lways\nar isko ft hisk indw henu pdat ingg lobalv ar iables.) Wem ustm odif y thet estt or estore the\nprevious value sot hats ubsequentt ests obs erve noe ffec t,a nd wem ustd ot hiso na ll exe cut ion\npaths, includingt estf ai lures andp anics. Thi sn atural lys ug gestsdefer.\nfunc TestCheckQuotaNotifiesUser(t *testing.T) {\n// Save and restore original notifyUser.\nsaved := notifyUser\ndefer func() { notifyUser = saved }()\n// Install the test'sf ake notifyUser.\nvar notifiedUser, notifiedMsg string\nnotifyUser = func(user, msg string) {\nnotifiedUser, notifiedMsg = user, msg\n}\n// ...rest of test...\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 331,
      "page_label": "313"
    }
  },
  {
    "page_content": "var notifiedUser, notifiedMsg string\nnotifyUser = func(user, msg string) {\nnotifiedUser, notifiedMsg = user, msg\n}\n// ...rest of test...\n}\nThisp attern can beu sedt ot emporar ily savea nd restore all kinds ofg lobalv ar iables, including\ncommand-line ﬂags, de buggingo pt ion s,a nd per for mance parameters; t oi ns tal l andr emov e\nho oks thatc ause the pro duc tionc odet oc al lsome testc odew hens om ethingi nt erest ing hap-\npens;a nd toc oaxt he pro duc tionc odei nt orareb ut imp ortants tates, such as timeouts, erro rs,\nande vens peciﬁci nt erleavingso fc on cur renta ctiv ities.\nUsingg lobalv ar iables in thisw ay iss afeo nlyb ecause go testdo esnotn or mal lyr un multiple\ntestsc on cur rently.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 331,
      "page_label": "313"
    }
  },
  {
    "page_content": "ptg16105617\n314 CHAPTER 11. TESTING\n11.2.4. External T est Packages\nConsider the packages net/url,w hichp rovides a URL parser, and net/http,w hichp rovides\naw eb ser ver andH TTPc lientl ibrar y.A sw em ig hte xp ect,t he hig her-le vel net/httpdep ends\non the low er-le vel net/url.H ow ever, one oft he tests in net/url is ane xampled emon strat-\ningt he int erac tionb et weenU RLs andt he HTTPc lientl ibrar y.I no ther words,at esto ft he\nlower-le vel packagei mp ortst he hig her-le vel package.\nFigure 11.1. At esto f net/urldep ends on net/http.\nDecl aring t hist estf unctioni nt he net/url packagew ou ldc re ate a c yc lei nt he p ackage\nimport g raph, as depic t ed b yt he u pwards a rrow i nF igure1 1.1, b ut a sw ee xplained i n\nSection1 0.1, the Gos peciﬁcation forbids imp ort cyc les.\nWe res olvet he pro blem byd eclaring the testf unctioni na n exter nal testp ackage,t hati s, in a\nﬁle in t he net/url direc tor ywhos epackaged eclarat ionr eads package url_test.T he ext ra\nsufﬁx _test is a s ig nal to go testthat its houldb ui ld an addition alp ackagec ontainingj ust\nthes e ﬁles andr un its tests. I tm ay beh elpf ult ot hin kof thise xter nal testp ackagea si fi th ad\nthei mp ort pat hnet/url_test,b ut it cannot bei mp orted under thiso ra ny other name.\nBecaus eexter nal tests live inas ep aratep ackage, the ymayi mp ort helperp ackages thata ls o\ndep endo nt he packageb eingt este d;a ni n-p ackaget estc annot dot his. I nt er mso ft he desig n",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 332,
      "page_label": "314"
    }
  },
  {
    "page_content": "dep endo nt he packageb eingt este d;a ni n-p ackaget estc annot dot his. I nt er mso ft he desig n\nlayers,t he e xter nal testp ackagei sl og ical lyh ig her upt hanb ot h of t he p ackages itd ep ends\nup on, as shown inF igure1 1.2.\nFigure 11.2. External testp ackages bre akd ep endency cycles.\nBy avoidingi mp ort cyc les, exter nal testp ackages allowt ests, especi ally inte grati ont ests (w hich\ntest t he i nt erac tiono fs everal co mp onents), t oi mp ort o ther packages f re ely,e xac tly a sa n\napplic ationw ou ld.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 332,
      "page_label": "314"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 315\nWe can use the go listto olt os ummar izewhichG os ourceﬁ les in a packag ed irec tor yare\nproduc tionc ode, in-p ackaget ests, ande xter nal tests. We’ll use the fmtpackagea sa ne xample.\nGoFiles is the listo fﬁ les thatc ontain the pro duc tionc ode; these are the ﬁles t hat go build\nwi l linclude in youra pp lic ation:\n$g ol ist -f={{.GoFiles}} fmt\n[doc.go format.go print.go scan.go]\nTestGoFiles is t he l isto fﬁ les t hata ls o belong t ot he fmt package, b ut t hese ﬁles, w hose\nnamesa ll end in _test.go,a re include don lyw henb ui ldingt ests:\n$g ol ist -f={{.TestGoFiles}} fmt\n[export_test.go]\nThep ackage’st ests wou ldu su allyr eside in t hese ﬁles, t houg h unusually fmt hasn on e;w e’ll\nexplain the pur pos eof export_test.goin a mom ent.\nXTestGoFiles is the listo fﬁ les thatc on stitute the exter nal testp ackage, fmt_test,s ot hese\nﬁles musti mp ort the fmtpackagei no rder tou se it. Again, t he yarei nclude don lyd ur ingt est-\ning:\n$g ol ist -f={{.XTestGoFiles}} fmt\n[fmt_test.go scan_test.go stringer_test.go]\nSometimesa ne xter nal testp ackagem ay need privi leged accesst ot he int ernalso ft he package\nunder test, if f or exampleaw hite-b oxt estm ustl ivei nas ep aratep ackaget oa void an import\ncycle. I ns uchc as es, we u se a t rick:w ea dd de cl arat ions t oa ni n-p ackage _test.go ﬁle to\nexp oset he necessary int ernalst ot he exter nal test. This ﬁle t hu sof ferst he testa‘‘back door’’",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 333,
      "page_label": "315"
    }
  },
  {
    "page_content": "exp oset he necessary int ernalst ot he exter nal test. This ﬁle t hu sof ferst he testa‘‘back door’’\nto the package. I ft he sourceﬁ le existso nlyf or thisp ur pos e andc ontainsn ot ests its elf,i ti s\nof ten cal le dexport_test.go.\nFo rexample, the imp lementation of the fmt packagen eedst he functionality of unicode.Is-\nSpace as par t of fmt.Scanf.T oa void cr eating a nu ndesirable dependen cy, fmt do es not\nimport the unicode packagea nd its large tables ofd at a; instead, itc ontainsas impler imple-\nment ation,w hichi tc al lsisSpace.\nTo ens ure thatt he beh avior s of fmt.isSpace and unicode.IsSpace do not drift apart, fmt\npr udentlyc ontainsat est. I ti sa ne xter nal test, andt hu sit cannot access isSpace direc tly,s o\nfmt op ens a backd oort oi tb yd eclaring ane xp orted var iable thath olds the int ernal isSpace\nfunc tion. Thi si st he ent irety oft he fmtpackage’s export_test.goﬁle.\npackage fmt\nvar IsSpace = isSpace\nThist est ﬁle deﬁne sn ot ests; itj ustd eclarest he exp orted symbol fmt.IsSpace foru se byt he\nexter nal test. Thi st rick can also beu sedw hene ver an exter nal testn eedst ou se some oft he\nte chniques ofw hite-b oxt esting .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 333,
      "page_label": "315"
    }
  },
  {
    "page_content": "ptg16105617\n316 CHAPTER 11. TESTING\n11.2.5. Writing Effectiv eT ests\nMany newcomers to G oa re sur prisedb yt he minimalism ofG o’st esting f ramewor k.O ther\nlanguages’framewor ksp rovide mechanismsf or identifyingt estf unctions (of ten usingr eﬂec-\ntion or m et adat a),ho oks for per for ming ‘‘setup’’and ‘‘te ardow n’’op erat ions beforea nd after\nthet ests run, an dl ibrar ies of ut ilit y func tions f or a ss ertingc ommonp re dic ates, comp aring\nvalues, f or matting e rror m essages, an da bortingaf ai le d test ( of ten usin ge xception s).\nAlthough t hese m echanismsc an maket ests ver y concis e,t he resulting tests often s eeml ike\nthey are writt eni naf oreig nlanguage . Furthermore, alt hough the ymayr ep ort PASS or FAIL\ncorrec tly,t heir manner may b eu nf riendlyt ot he unfor tunatem aintainer,w it hcr ypticf ai lure\nmess agesl ike \"assert: 0 == 1\"or pagea fter pageo fs tack traces.\nGo’sa tt itude tot esting stand sin stark contrast. I te xp ectst esta ut hor sto dom osto ft hisw or k\nthemselves, deﬁningf unctions toa void rep etit ion,justa st he ywouldf or ordinar yprog rams.\nThep ro cesso ft esting isn ot one ofr ot eform ﬁlling; a testh as a useri nt erface too,a lb eit one\nwhos eon lyu sers are als oitsm aintainers. A go o dtest doesn ot explo deon fai lureb ut prints a\ncleara nd s uccinct d es crip tiono ft he s ympt omo ft he p ro blem, an dp erhaps o ther r elevan t",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 334,
      "page_label": "316"
    }
  },
  {
    "page_content": "cleara nd s uccinct d es crip tiono ft he s ympt omo ft he p ro blem, an dp erhaps o ther r elevan t\nfac ts ab out t he c ontext. Ide ally,t he maintainer s houldn ot need t or eadt he s ourcec odet o\nde ciph erat estf ai lure. A go o dtest shouldn ot giveu pa fter one fai lureb ut shouldt ry tor ep ort\nseveral erro rs in a singler un, since the pattern off ai lures may its elf ber evealing.\nThea ss ertionf unctionb elow comparest wo values, cons tructsag ener ic er ror message ,and\nstopst he program. It ’se asy tou se and it’sc or rec t,b ut wheni tf ai ls, the error message isa lmost\nus eless. I td oesn ot solvet he hardp ro blem ofp rovidingag ood useri nt erface.\nimport (\n\"fmt\"\n\"strings\"\n\"testing\"\n)\n// A poor assertion function.\nfunc assertEqual(x, y int) {\nif x != y {\npanic(fmt.Sprintf(\"%d != %d\", x, y))\n}\n}\nfunc TestSplit(t *testing.T) {\nwords := strings.Split(\"a:b:c\", \":\")\nassertEqual(len(words), 3)\n// ...\n}\nIn thiss ense,a ss ertionf unctions suf fer fro mpremat ure abstrac tion:b yt re ating the fai lureo f\nthis par tic ulart esta sam ered if ference oft wo int egers,w ef or feitt he opp ortunity top rovide\nme aningf ulcont ext. W ec an provide a betterm essage bys tartingf ro mthec on crete det ails,a s\nin the exampleb elow.O nlyo ncer ep etit ive patternse merge inag iven tests uite isi tt imet o\nintroduce abstrac tions.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 334,
      "page_label": "316"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.2. TEST FUNCTIONS 317\nfunc TestSplit(t *testing.T) {\ns, sep := \"a:b:c\", \":\"\nwords := strings.Split(s, sep)\nif got, want := len(words), 3; got != want {\nt.Errorf(\"Split(%q, %q) returned %d words, want %d\",\ns, sep, got, want)\n}\n// ...\n}\nNo wthet estr ep ortst he functiont hatw as cal le d,i ts inputs, andt he sig niﬁcanceo ft he result;\nit explicitlyi dentiﬁes the actualv alue andt he exp ectat ion; andi tc ontinues toe xe cut eeven if\nthis ass ertions houldf ai l.O ncew e’ve writt enat estl iket his, the natural next stepi so ften not\nto d eﬁne a f unctiont or eplace t he e nt ire if st atement,b ut t oe xe cut e thet esti nal oopi n\nwhich s, sep,a nd wantvar y,l iket he table-dr ivent esto f IsPalindrome.\nThep re vious exampled idn’tn eed a ny utilit yfunc tions,b ut of c ours e that shouldn’ts topu s\nfrom int roducingf unctions whent he y helpm aket he codes impler.( We’ll l ook at o ne such\nut i lit yfunc tion, reflect.DeepEqual,i nS ec tion 13.3.) Th ek ey t oag ood t esti st os tart by\nimplementing the con crete beh avior thaty ou wanta nd onlyt henu se functions tos implif ythe\nco de ande liminater ep etit ion.B estr esults ar er arelyo bt ained b ys tartingw it h al ibrar y of\nabstrac t,generict esting functions.\nExercis e 11.5:Extend TestSplitto use a table ofi np uts ande xp ected out puts.\n11.2.6. Avoiding Brittle T ests\nAn app lic ationt hato ften fails wheni te ncount ers new but valid inputs isc al le dbug gy;at est",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 335,
      "page_label": "317"
    }
  },
  {
    "page_content": "11.2.6. Avoiding Brittle T ests\nAn app lic ationt hato ften fails wheni te ncount ers new but valid inputs isc al le dbug gy;at est\nthat spuriou sly fai lsw henas ound change was made tot he program isc al le dbr ittle.J usta sa\nbugg yprog ramfrust rates its u sers,ab ritt let este xasperates its maintainers. Th em ostb ritt le\ntests, whic hf ai l fora lmosta ny change tot he pro duc tionc ode, good o rb ad,a re som etimes\ncalled ch anged etec tor or statu squ otests, andt he t imes pent dealingw it hthem can quic kly\ndepletea ny beneﬁtt he yon ces eeme dto provide.\nWh enaf unctionu nder testp ro duces a comp lex out put sucha sal on gst ring, ane laborated at a\nst ruc ture, oraﬁle ,i t’st empt ing toc he ckt hatt he out put ise xac tly equ alt os om e‘‘go lden’’value\nthat was exp ec ted whent he testw as writt en. B ut ast he program evo l ves, par ts of the out put\nwi l lli kelyc hange ,prob ably ing ood ways, but change non etheless. A nd it’sn ot justt he out put;\nfunc tions wit hcomp lex inputs often bre akb ecause the inp utu sed in a testi sn ol on g erv alid.\nThee asiestw ay toa void britt let ests ist oc he cko nlyt he pro per ties you carea bout.T esty our\nprog ram’ss impler andm ores tablei nt erfaces in preferencet oi ts internal functions.B es elec-\ntive iny oura ss ertions.D on’tc he ckf or exac tst ringm atch es, for example, but lookf or relevant\nsu bst rings t hatw ill r emain un ch ange d as t he p rogram e vo l ves. It ’so ften w or thw riting a",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 335,
      "page_label": "317"
    }
  },
  {
    "page_content": "su bst rings t hatw ill r emain un ch ange d as t he p rogram e vo l ves. It ’so ften w or thw riting a\nsu bst ant ial functiont od istill a c omplex out put dow nto its essences ot hata ss ertions will be\nre liable. E vent houg hthat may seeml ikeal ot o fu p-f ronte ffor t,i tc an pay for itself quicklyi n\ntime thatw ou ldo ther wis ebe spent ﬁxings puriou sly fai lingt ests.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 335,
      "page_label": "317"
    }
  },
  {
    "page_content": "ptg16105617\n318 CHAPTER 11. TESTING\n11.3. C overage\nBy its nature, test ing isn ever comp lete. A st he inﬂuential comp uters cientist EdsgerD ijkstra\nputi t, ‘‘Test ing shows t he presence, not t he a bs ence ofb ugs.’’No quant ity oft ests can e ver\nprov eap ackagef re eof bugs. A tb est, t he y increase o ur conﬁdence t hatt he p ackagew or ks\nwe ll in a wide range ofi mp ortants cenar ios.\nThed eg ree tow hichat ests uite exercis est he packageu nder testi sc al le dthet est’s covera ge.\nCoveragec an’tb eq uant iﬁed d irec tly—th ed ynamics ofa ll but the most trivialp rogramsa re\nbeyond p re cis e me asurement—bu tt here are heur i st ics t hatc an h elpu sd irec t ourt esting\nef for tst ow here the yarem orel ikelyt ob eu seful.\nSt atement cov era ge is t he s implesta nd mo st w idely u sedo ft hese h eur ist ics. Th es tatement\ncoverageo fat ests uite ist he frac tiono fs ources tatementst hata re exe cut eda tl east onced ur-\ningt he t est. I nt hiss ec tion,w e’ll u se Go’s cover to ol, whichi si nt egrated i nt ogo test,t o\nme asure statement cov eragea nd helpi dentify obv iou sgaps in the tests.\nThec odeb elow isat able-dr ivent estf or the expressione valuatorw eb ui ltb ack in Chapt er7 :\ngopl.io/ch7/eval\nfunc TestCoverage(t *testing.T) {\nvar tests = []struct {\ninput string\nenv Env\nwant string // expected error from Parse/Check or result from Eval\n}{\n{\"x % 2\", nil, \"unexpected '%'\"},\n{\"!true\", nil, \"unexpected '!'\"},\n{\"log(10)\", nil,`unknown function \"log\"`},",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 336,
      "page_label": "318"
    }
  },
  {
    "page_content": "}{\n{\"x % 2\", nil, \"unexpected '%'\"},\n{\"!true\", nil, \"unexpected '!'\"},\n{\"log(10)\", nil,`unknown function \"log\"`},\n{\"sqrt(1, 2)\", nil, \"call to sqrt has 2 args, want 1\"},\n{\"sqrt(A / pi)\", Env{\"A\": 87616, \"pi\": math.Pi}, \"167\"},\n{\"pow(x, 3) + pow(y, 3)\", Env{\"x\": 9, \"y\": 10}, \"1729\"},\n{\"5 / 9 * (F - 32)\", Env{\"F\": -40}, \"-40\"},\n}\nfor _, test := range tests {\nexpr, err := Parse(test.input)\nif err == nil {\nerr = expr.Check(map[Var]bool{})\n}\nif err != nil {\nif err.Error() != test.want {\nt.Errorf(\"%s: got %q, want %q\", test.input, err, test.want)\n}\ncontinue\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 336,
      "page_label": "318"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.3. COVERAGE 319\ngot := fmt.Sprintf(\"%.6g\", expr.Eval(test.env))\nif got != test.want {\nt.Errorf(\"%s: %v => %s, want %s\",\ntest.input, test.env, got, test.want)\n}\n}\n}\nFirst,l et’sc he ckt hatt he testp asses:\n$g ot est -v -run=Coverage gopl.io/ch7/eval\n=== RUN TestCoverage\n--- PASS: TestCoverage (0.00s)\nPASS\nok gopl.io/ch7/eval 0.011s\nThisc ommand displ ays the usage message oft he cov eraget ool:\n$g ot ool cover\nUsage of 'go tool cover':\nGiven a coverage profile produced by 'go test':\ngo test -coverprofile=c.out\nOpen a web browser displaying annotated source code:\ngo tool cover -html=c.out\n...\nThe go toolcommandr unso ne oft he exe cut ables fro mtheG ot oolchain. Thes e prog rams\nlive int he direc tor y$GOROOT/pkg/tool/${GOOS}_${GOARCH}.T hankst o go build,w er arely\nne e dto inv oke themd irec tly.\nNo wwe run the testw it hthe -coverprofileﬂag:\n$g ot est -run=Coverage -coverprofile=c.out gopl.io/ch7/eval\nok gopl.io/ch7/eval 0.032s coverage: 68.5% of statements\nThis ﬂag enables t he col lec tion of c ov eraged at aby inst rum ent ing thep ro duc tionc ode. T hat\nis,i tm odiﬁes a co py oft he sourcec odes ot hatb eforee achb lo cko fs tatementsi se xe cut ed, a\nboole an var iable iss et, wit h on evar iable per blo ck. Justb eforet he modiﬁed program exits, it\nwr itest he value ofe achv ar iable tot he speciﬁed l og ﬁle c.out andp rintsas ummar y of the\nfrac tiono fs tatementst hatw eree xe cut ed. ( If a ll y ou n eed i st he s ummar y,u se",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 337,
      "page_label": "319"
    }
  },
  {
    "page_content": "frac tiono fs tatementst hatw eree xe cut ed. ( If a ll y ou n eed i st he s ummar y,u se\ngo test -cover.)\nIf go testis run wit hthe -covermode=count ﬂag ,thei ns trument ation for eachb lo cki ncre-\nmentsac ount eri ns teado fs etting a b oole an. Ther esulting log ofe xe cut ion countso fe ach\nblocke nables q uant itative c omparisons b et ween ‘‘hott er’’blocks, whic ha re moref re quently\nexec ute d,and ‘‘colder’’on es.\nHaving gat hered the dat a,we run the coverto ol, whichp ro cessest he log ,generates an HTML\nreport,a nd opens it in a new brows erwindow (Figure1 1.3).\n$g ot ool cover -html=c.out\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 337,
      "page_label": "319"
    }
  },
  {
    "page_content": "ptg16105617\n320 CH\nAPTER TESTING11.\nFigure \n11.3. Ac ov erager ep ort.\nEach statement isc olored greeni fi tw as covere dor red ifi tw as not cov ere d.F or clarity,w e’ve\nsh ade dtheb ackg round oft he red text. W ec an see immediate lyt hatn on e of our inputs exer-\ncisedt he unary operator Evalmethod.I fw\nea dd thisn ew testc as eto the table andr e-r unthe\nprevious two command s,t he unary expressionc odeb ecom esg re en:\n{\n\"+x * -x\", Env{\"x\": 2}, \"-4\"}\nThet wo panic st \natementsr emain red,h ow ever. T hiss houldn ot bes ur prising, because these\nst atementsa re sup pos edt ob eu nreach able.\nAc hie ving1 00% statement cov erages ound sli kean oble goal, but it i sn ot usu allyf easiblei n\nprac tice,n or isi tl ikelyt ob eag ood use ofe ffor t.J ustb ecause a s tatement ise xe cut edd oes\nnotm eani ti sb ug-f ree;s tatementsc ontainingc omplex expressions mustb ee xe cut edm any\ntimesw it h dif ferenti np uts t oc ov ert he i nt erest ing c as es. Some s tatements, li ke t he panic\nst \natementsa bove ,cann ever ber each ed. Others, sucha st hose thath andlee soterice rror s,a re\nhard toe xercis ebutr arelyr each edi np rac tice.T esting isf undament allyap rag mat ic ende avor,\nat rade-off b et weent he c osto fw riting t ests an dt he c osto ff ai lures thatc ou ldh aveb een\nprevente dby tests. C ov eraget ools can helpi dentify the weakest spots, but devisingg ood test\ncasesd emands the samer igorou sthin king as programming in general.\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 338,
      "page_label": "320"
    }
  },
  {
    "page_content": "casesd emands the samer igorou sthin king as programming in general.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 338,
      "page_label": "320"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.4. BENCHMARK FUNCTIONS 321\n11.4. BenchmarkFunctions\nBenchmarking i st he p rac tice ofm easuring t he p er for mance o fap rogram o naﬁxe d\nwork load. I nG o, a b enchmark f unctionl ooks li ke a t estf unction, but wit h the Benchmark\npreﬁxa nd a *testing.B parameter thatp rovides mosto ft he samem et hodsa sa *testing.T,\nplus a few ext rare lated top er for mance measurement.I ta ls oexp oses an integerﬁ eld N,w hich\nsp eciﬁes the numbero ft imes top er for mtheo perat ionb eingm easure d.\nHere’sab enchmark for IsPalindromethat cal lsi t Ntimes in a loop.\nimport \"testing\"\nfunc BenchmarkIsPalindrome(b *testing.B) {\nfor i := 0; i < b.N; i++ {\nIsPalindrome(\"A man, a plan, a canal: Panama\")\n}\n}\nWe run i tw it h thec ommand bel ow.U nliket ests, b yd efau ltn ob enchmarksa re r un. The\nargumentt ot he -bench ﬂag s elec tsw hichb enchmarkst or un. I ti sar egu lar expression\nmatchingt he names of Benchmark func tions,w it had efau ltv alue thatm atch esn on e of them.\nThe ‘‘.’’patt ern causesi tt om atch all benchmarksi nt he word package, but since there’so nly\non e, -bench=IsPalindromewouldh aveb eene quivalent.\n$c d$ GOPATH/src/gopl.io/ch11/word2\n$g ot est -bench=.\nPASS\nBenchmarkIsPalindrome-8 1000000 1035 ns/op\nok gopl.io/ch11/word2 2.179s\nTheb enchmark n ame’sn umer ic sufﬁx, 8 here , indic ates the v alue of GOMAXPROCS,w hichi s\nimportantf or con cur rentb enchmarks.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 339,
      "page_label": "321"
    }
  },
  {
    "page_content": "Theb enchmark n ame’sn umer ic sufﬁx, 8 here , indic ates the v alue of GOMAXPROCS,w hichi s\nimportantf or con cur rentb enchmarks.\nTher ep ort tel lsu st hate achc al lto IsPalindrome to oka bout 1.035 micros econd s,a veraged\nov er1 ,000,000 runs. Since t he benchmark runner initial lyh as noi de ahowl on gtheo perat ion\ntakes, itm akes som einitial measurementsu sings mall v alues of N andt hene xt rapol atest oa\nvalue large enoug hforas tablet imingm easurement tob em ade.\nTher easont he loopi si mp lemente dby the benchmark function, andn ot byt he cal lingc odei n\nthet estd river, iss ot hatt he benchmark functionh as the opp ortunity toe xe cut eanyn ecessary\non e-t imes etup codeo utside the loopw it houtt hisa ddingt ot he measured time ofe achi tera-\ntion.I ft hiss etup codei ss till per turbingt he results, the testing.Bparameter provides met h-\nodst os top, resume, and res etthet imer,b ut these are rarelyn eeded.\nNo wthat weh aveabe nchmarka nd tests, it’se asy tot ry o ut ide as form ak ingt he program\nfaster. P erhaps t he most obviou s opt imizat ioni st om ake IsPalindrome’ss econ dlo ops top\nch eck ing att he midpoint, toa void doinge achc omparisont wice:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 339,
      "page_label": "321"
    }
  },
  {
    "page_content": "ptg16105617\n322 CHAPTER 11. TESTING\nn: =l en(letters)/2\nfor i := 0; i < n; i++ {\nif letters[i] != letters[len(letters)-1-i] {\nreturn false\n}\n}\nreturn true\nBut as is o ften t he c as e,a no bv iou s opt imizat iond oesn’ta lways yield t he e xp ected b eneﬁt.\nThiso ne delivered a mere 4% imp rov ement ino ne exp eriment.\n$g ot est -bench=.\nPASS\nBenchmarkIsPalindrome-8 1000000 992 ns/op\nok gopl.io/ch11/word2 2.093s\nAnot her ide ai st op re-al locate a s ufﬁcientlyl arge a rray f or u se b y letters,r at her than\nexp andi tb ys uccessive cal lst o append.D eclaring letters as an array o ft he rig hts ize,l ike\nthis,\nletters := make([]rune, 0, len(s))\nfor _, r := range s {\nif unicode.IsLetter(r) {\nletters = append(letters, unicode.ToLower(r))\n}\n}\nyields a ni mp rov ement o fn early3 5%, an dt he b enchmark r unner n ow r ep ortst he a verage\nov er2 ,000,000 iterat ions.\n$g ot est -bench=.\nPASS\nBenchmarkIsPalindrome-8 2000000 697 ns/op\nok gopl.io/ch11/word2 1.468s\nAs thise xamples hows, t he f astest program i so ften t he one t hatm akes t he fewestm emor y\nal location s.T he -benchmemcommand-line ﬂag will include memor yal location statist ics in its\nreport.H erew ec ompare the numbero fa llocat ions beforet he opt imizat ion:\n$g ot est -bench=. -benchmem\nPASS\nBenchmarkIsPalindrome 1000000 1026 ns/op 304 B/op 4a llocs/op\nanda fter it:\n$g ot est -bench=. -benchmem\nPASS\nBenchmarkIsPalindrome 2000000 807 ns/op 128 B/op 1 allocs/op",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 340,
      "page_label": "322"
    }
  },
  {
    "page_content": "anda fter it:\n$g ot est -bench=. -benchmem\nPASS\nBenchmarkIsPalindrome 2000000 807 ns/op 128 B/op 1 allocs/op\nCons olid atingt he a llocat ions inas inglec al l to make eliminated 7 5% oft he a llocat ions and\nhalved the quant ity ofa llocated memor y.\nBenchmarks like thist el lus the abs olut etime required for a given operat ion, but inm anys et-\ntingst he i nt erest ing p er for mance ques tion s area bout t he re lat ive timings o ft wo d if ferent\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 340,
      "page_label": "322"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.5. PROFILING 323\nop erat ions.F or example, ifaf unctiont akes 1mst op ro cess1 ,000 elements, h ow lon gwi l lit\ntake top ro cess1 0,000 oram illion? Suc hc omparisons revealt he a sy mpt otic g rowt h of the\nrunningt imeo ft he f unction. A nother exam ple: w hati st he b ests ize f or a nI /O buf fer?\nBenchmarks ofa pp lic ationt hroughputo verar ange ofs izes can h elpu sc ho ose the smallest\nbuffer thatd eliverss at isfac tor yperfor mance.A thirde xample: whicha lgor it hmp er for msb est\nforag iven j ob?B enchmarkst hate valuate two dif ferenta lgor it hms ont he s amei np utd at a\ncano ften s howt he s trengt hsa nd w eaknesseso fe acho ne o ni mp ortanto rr epresent ative\nwork loads.\nComp arat ive b enchmarksa re j ustr egu lar code.T he y typicallyt aket he f or m of a s ingle\nparameter izedf unction, cal le dfrom s everal Benchmark func tions w it h dif ferentv alues, li ke\nthis:\nfunc benchmark(b *testing.B, size int) { /* ... */ }\nfunc Benchmark10(b *testing.B) {b enchmark(b, 10) }\nfunc Benchmark100(b *testing.B) {b enchmark(b, 100) }\nfunc Benchmark1000(b *testing.B) { benchmark(b, 1000) }\nThep arameter size,w hichs peciﬁes t he s ize o ft he i np ut, varies acros sb enchmarksb ut i s\ncons tantw it hin eachb enchmark.R esist the tempt ation tou se the parameter b.N as the inp ut\nsize.U nlessy ou i nt erpreti ta sa ni terat ionc ount for a ﬁxe d-size in put, t he r esults o fy our\nbenchmarkw ill bem eaningless.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 341,
      "page_label": "323"
    }
  },
  {
    "page_content": "size.U nlessy ou i nt erpreti ta sa ni terat ionc ount for a ﬁxe d-size in put, t he r esults o fy our\nbenchmarkw ill bem eaningless.\nPatt ernsr eveale dby comparat ive benchmarksa re par tic ularlyu sefuld ur ingp rogram design,\nbutw ed on’tt hrow t he b enchmarksa way whent he p rogram i sw or king. A st he p rogram\nevolves, ori ts inputg rows, ori ti sd eploye don new operat ings ystems orp ro cessors wit hdif-\nferent charac ter ist ics, wec an reuse those benchmarkst or evisit desig n de cisions.\nExercis e 11.6: Wr ite b enchmarkst oc ompare the PopCount implementation inS ec tion 2.6.2\nwith y ours olut ion sto E xercis e2.4 an dE xercis e2.5. A tw hatp oint d oest he t able-b ased\napproach bre ake ven?\nExercis e 11.7: Wr ite benchmarksf or Add, UnionWith,a nd other met hodso f *IntSet (§6.5)\nusingl arge pseudo-randomi np uts. H ow fastc an you maket hese met hodsr un? H ow doest he\nch oice ofw ords ize affe ctp er for mance? H ow fasti s IntSetcomp are dto a set implementation\nbasedo nt he bui lt-in map typ e?\n11.5. P ro filing\nBenchmarks areu sefulf or measuring the per for mance ofs peciﬁco perat ions,b ut whenw e’re\ntr yingt om akeas lowp rogram faster, weo ften haven oi de awheret ob eg in. Ev ery program-\nmerk nows D on ald K nu th’sa ph orism ab outp remature o pt imizat ion, whicha pp eared i n\n‘‘St ruc tured Programmingw it hgo toS tatements’’in 1974. Although often misinterprete d to",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 341,
      "page_label": "323"
    }
  },
  {
    "page_content": "‘‘St ruc tured Programmingw it hgo toS tatements’’in 1974. Although often misinterprete d to\nme anp er for mance doesn’tm atter, ini ts originalc ontext wec an discer nad if ferentm eaning:\nTherei sn od ou bt that t he g rai l of e fﬁciency l eads t oa bu se. P rogrammersw aste\nenor mou samountso ft imet hin kinga bout,o rw or rying about,t he s peed ofn on critical\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 341,
      "page_label": "323"
    }
  },
  {
    "page_content": "ptg16105617\n324 CHAPTER 11. TESTING\npartso ft heir programs, andt hese att emp tsa te fﬁciency actuallyh aveas tron gnegat ive\nimpact wh en de bugginga nd m aintenancea re c on sidered.W e sh oul d forgeta bout\nsmal l efﬁciencies, say about9 7% oft he time: premature opt imizat ioni st he rooto fa ll\nevil.\nYetw es houldn ot passu po ur opp ortunities in t hatc ritical3 %. A go o dprog rammer\nwi l lnotb el ulled int ocomp lacency bys uchr easoning, hew ill bew is eto lookc aref ully\nat the criticalc ode; but only af ter that code has beeni dentiﬁed.I ti so ften a mist ake to\nmake a p rior i judg ments aboutw hatp ar ts of a pr og ram arer eallyc ritical, s ince t he\nunivers ale xp erience ofp rogrammersw ho hav eb eenu singm easurement t ools ha s\nbeen thatt heir intuit ive guessesf ai l.\nWh enw ew isht ol ookc aref ullya tt he speed ofo ur programs, the bestt echnique for identify-\ningt he criticalc odei s proﬁling.P roﬁlingi sa na ut omated appro ach to per for mance measure-\nment bas edo ns amplingan umbero fp roﬁle events during exe cut ion,thene xt rapol ating fro m\nthem dur ingap ost-pro cessings tep; the resulting statist icals ummar yis cal le d aproﬁle.\nGo sup por tsm anyk inds ofp roﬁling, eachc on cer ned wit had if ferenta sp ect ofp er for mance,\nbuta ll oft hemi nv olver ecordingas equence ofe ventso fi nt erest,e acho fw hichh as an accom-\npany i ng s tack t race—th es tack o ff unctionc al lsa ctivea tt he mome nt o ft he e vent.T he",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 342,
      "page_label": "324"
    }
  },
  {
    "page_content": "pany i ng s tack t race—th es tack o ff unctionc al lsa ctivea tt he mome nt o ft he e vent.T he\ngo testto olh as bui lt-in sup por tfors everal kinds ofp roﬁling.\nA CPU proﬁle identiﬁes the functions whose exe cut ion requires the most CPU time. T he cur-\nrent lyr unningt hreado ne achC PU isi nt err upt edp er iodic ally byt he operat ings ysteme very\nfe wmi l lisecond s,w it heach int err upt ion recordingo ne proﬁle event beforen or mal exec ution\nresumes.\nA he app roﬁle identiﬁes t he s tatementsr esponsible f or a llocat ingt he mo st m emor y.T he\nproﬁlingl ibrar y samp les cal lst ot he int ernal memor yal location routiness ot hato na verage,\non e proﬁle event isr ecorde dper5 12KB ofa llocated memor y.\nA bl o cki n gproﬁle identiﬁes t he o perat ions r esponsible f or b lo cking go ro utinest he l on g est,\nsuch a ss ystemc al ls, channel s ends a nd r eceives, an da cquisition s of l ocks. Th ep roﬁling\nlibrar yre cords ane vent every timeag oroutine isb lo cke dby one oft hese operat ions.\nGat her ingap roﬁle for codeu nder testi sa se asy as enablingo ne oft he ﬂags below.B ec aref ul\nwhen usingm oret hano ne ﬂag at a tim e, how ever: t he machiner yforg at her ingo ne kindo f\nproﬁle may ske wther esults ofo thers.\n$g ot est -cpuprofile=cpu.out\n$g ot est -blockprofile=block.out\n$g ot est -memprofile=mem.out\nIt’se asy toa dd proﬁlings up por tto non-testp rogramst oo,t houg hthed et ails ofh ow wed o\nthat",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 342,
      "page_label": "324"
    }
  },
  {
    "page_content": "$g ot est -memprofile=mem.out\nIt’se asy toa dd proﬁlings up por tto non-testp rogramst oo,t houg hthed et ails ofh ow wed o\nthat \nvaryb et weens hort-live d command-linet ools a nd l on g-r unnings er ver applic ations.\nProﬁlingi se sp eci ally u sefuli nl on g-r unninga pp lic ations,s ot he G or untime’sp roﬁling\nfe aturesc an bee nabled under programmer cont rol usingt he runtimeAPI.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 342,
      "page_label": "324"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.5. PROFILING 325\nOnce we’ve gat hered a p roﬁle,w en eed toa nalyze itu singt he pprof to ol. Thisi sas tand ard\npart o ft he G od istr ibution,b ut since it’sn ot ane verydayt ool, it’sa ccessedi ndirec tly u sing\ngo tool pprof.I th as dozenso ff eaturesa nd opt ion s,b ut basic use requires onlyt wo argu-\nments, the exe cut ablet hatp ro duce dthep roﬁle andt he proﬁle log.\nTo makep roﬁlinge fﬁcienta nd tos aves pace,t he log does not include functionn ames; instead,\nfunc tions a re i dentiﬁed b yt heir addres ses. Thi sm eans t hat pprof ne e dst he e xe cut ablei n\norder tom akes ense oft he log . Although go testusuallyd is cards the teste xe cut ableo ncet he\ntest isc omplete, whenp roﬁlingi se nabled its aves the exe cut ablea s foo.test,w here foo is\nthen ameo ft he teste dpackage.\nThec ommand sbelows howh ow tog at her andd ispl ayas impleC PU proﬁle.W e’ve selec ted\non e of the b enchmarksf ro m the net/http package. I ti su su allyb ettert op roﬁle s peciﬁc\nbenchmarks t hath aveb eenc on str ucted t ob er epresent ative o fw or klo adso ne c ares ab out.\nBenchmarking t estc as es is a lmostn ever rep resent ative , whichi sw hy wed is abled t hemb y\nusingt he ﬁlt er -run=NONE.\n$g ot est -run=NONE -bench=ClientServerParallelTLS64 \\\n-cpuprofile=cpu.log net/http\nPASS\nBenchmarkClientServerParallelTLS64-8 1000\n3141325 ns/op 143010 B/op 1747 allocs/op\nok net/http 3.395s\n$g ot ool pprof -text -nodecount=10 ./http.test cpu.log",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 343,
      "page_label": "325"
    }
  },
  {
    "page_content": "3141325 ns/op 143010 B/op 1747 allocs/op\nok net/http 3.395s\n$g ot ool pprof -text -nodecount=10 ./http.test cpu.log\n2570ms of 3590ms total (71.59%)\nDropped 129 nodes (cum <= 17.95ms)\nShowing top 10 nodes out of 166 (cum >= 60ms)\nflat flat% sum% cum cum%\n1730ms 48.19% 48.19% 1750ms 48.75% crypto/elliptic.p256ReduceDegree\n230ms 6.41% 54.60% 250ms 6.96% crypto/elliptic.p256Diff\n120ms 3.34% 57.94% 120ms 3.34% math/big.addMulVVW\n110ms 3.06% 61.00% 110ms 3.06% syscall.Syscall\n90ms 2.51% 63.51% 1130ms 31.48% crypto/elliptic.p256Square\n70ms 1.95% 65.46% 120ms 3.34% runtime.scanobject\n60ms 1.67% 67.13% 830ms 23.12% crypto/elliptic.p256Mul\n60ms 1.67% 68.80% 190ms 5.29% math/big.nat.montgomery\n50ms 1.39% 70.19% 50ms 1.39% crypto/elliptic.p256ReduceCarry\n50ms 1.39% 71.59% 60ms 1.67% crypto/elliptic.p256Sum\nThe -text ﬂag speciﬁes the out put for mat, in thisc as e,at extualt able w it h on erowp er func-\ntion,s or ted s ot he ‘‘hott est’’func tions—th os e that co ns ume the mo st C PU c yc les—ap pear\nﬁrs t.T he -nodecount=10 ﬂag limits t he resultt o1 0r ows. F or gross per for mance pro blems,\nthis textualf or mat may bee noug hto pinpointt he cause.\nThisp roﬁle t el lsu st hate llip tic-c urve crypt ography isi mp ortantt ot he p er for mance oft his\npartic ularH TTPS ben chmark.B yc ontrast, if a p roﬁle i sd ominated b ym emor y al location\nfunc tions f ro mthe runtime package, reducingm emor y cons ump tionm ay b eaw or thw hile\nopt imizat ion.\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 343,
      "page_label": "325"
    }
  },
  {
    "page_content": "func tions f ro mthe runtime package, reducingm emor y cons ump tionm ay b eaw or thw hile\nopt imizat ion.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 343,
      "page_label": "325"
    }
  },
  {
    "page_content": "ptg16105617\n326 CHAPTER 11. TESTING\nFo r more s ubtlep ro blems, y ou m ay b eb ettero ff u singo ne o f pprof’sg raphic al displays.\nThes ere quireG raphViz, whichc an bed ow nlo ade dfrom www.graphviz.org.T he -web ﬂag\nthen rendersad irec ted grapho ft he functions oft he program, annot ate dby their CPU proﬁle\nnumb ers and colored toi ndic atet he hott est functions.\nWe’ve o nlys cratch edt he s ur face of G o’sp roﬁlingt ools h ere. T oﬁ nd o ut mor e, r eadt he\n‘‘ProﬁlingG oP rograms’’ar ticle ont he GoB log .\n11.6. ExampleFunctions\nThet hirdk indo ff unctiont re ate d sp eci ally by go testis a ne xamplef unction, one who se\nname startsw it hExample.I th as neither parametersn or results. Here ’sa ne xamplef unction\nfor IsPalindrome:\nfunc ExampleIsPalindrome() {\nfmt.Println(IsPalindrome(\"A man, a plan, a canal: Panama\"))\nfmt.Println(IsPalindrome(\"palindrome\"))\n// Output:\n// true\n// false\n}\nExamplef unctions ser vet hree pur pos es. Thep rimary one isd ocumentation:ag ood example\ncanb eam ores uccinct ori nt uit ive way toc onve ytheb eh avior of a l ibrar yfunc tiont hani ts\npros e des crip tion, es peci ally w henu seda sar eminder o rq uickr eference.A ne xamplec an\nalso demon stratet he int erac tionb et weens everal typ es andf unctions belon gingt oo ne API,\nwhereasp rose d ocumentation musta lways b ea tt ach edt oo ne place,l ikeat yp e or function\nde clarat iono rt he packagea saw hole.A nd unlikee xamples wit hin comments, examplef unc-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 344,
      "page_label": "326"
    }
  },
  {
    "page_content": "de clarat iono rt he packagea saw hole.A nd unlikee xamples wit hin comments, examplef unc-\ntion sarer ealG oc ode, s ubjec t to c ompi le-t imec he cking , so t he y don’tb ecom est ale as t he\nco deevolves.\nBasedo\nnt he s ufﬁxo ft he Example func tion, t he w eb-b ased d ocumentation s er ver godoc\nasso ciatese xamplef unctions w it h thef unctiono rp ackaget he y exemplif y,s o ExampleIs-\nPalindrome wouldb es hown with thed ocumentation for the IsPalindrome func tion, anda n\nexamplef unctionc al le dju st Examplewouldb ea ss oci ated wit hthe wordpackage as a whole.\nThes econ dpurpos eis thate xamples aree xe cut ablet ests run by go test.I ft he examplef unc-\ntion containsaﬁna l // Output:commentl iket he one a bove ,thet estd riverw ill exe cut ethe\nfunc tiona nd che ckt hatw hati tp rint edt oi ts s tand ard o ut put match est he t ext w it hin t he\ncomment.\nThet hirdp ur pos e of a ne xamplei sh ands-one xp erimentation.T he godoc server at\ngolang.org us est he GoP layg round tol et the usere dita nd run eache xamplef unctionf ro m\nwithin a web brows er,a ss hown inF igure1 1.4. Thi si so ften the fastest way tog et a feelf or a\npartic ularf unctiono rl angu agef eature .\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 344,
      "page_label": "326"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 11.6. EXAMPLE FUNCTIONS 327\nFigure 11.4. An int erac tivee xampleo f strings.Joinin godoc.\nTheﬁ nalt wo chapt ers oft he booke xaminet he reflect and unsafe packages, whichf ew Go\nprog rammersr egu larly use—an de venf ewer ne e dto use.I fy ou haven’tw ritt ena ny subst ant ial\nGo programsy et, now wou ldb eag ood time to do that.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 345,
      "page_label": "327"
    }
  },
  {
    "page_content": "ptg16105617\nThis page intentionally left blank \nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 346,
      "page_label": "328"
    }
  },
  {
    "page_content": "ptg16105617\n12\nRe flection\nGo provides a mechanism tou pdatev ar iables andi ns pec ttheir values at run time, to cal ltheir\nmethods, an dt oa pp l ytheo perat ions i nt rinsic t ot heir represent ation,a ll w it houtk nowing\ntheir typ es at comp ile time. T hism echanism isc al le dreﬂec tion.R eﬂec tion als olets ust re at\ntypest hems elves as ﬁrs t-class values.\nIn t hisc hapt er, w e’ll e xplore G o’sr eﬂec tion f eaturest os ee h ow t he y increase t he e xpres-\nsiveness oft he langu age, and inp ar tic ularh ow the yarec ruci alto the imp lementation of two\nimportantA PIs: str ing for matting provide dby fmt,a nd pro tocol encodingp rovide dby pack-\nages li ke encoding/json and encoding/xml.R eﬂec tion i sa ls o essent ial t ot he t empl ate\nme chanism p rovide d by t he text/template and html/template packages w es aw in\nSection4 .6. H ow ever, r eﬂec tion i sc omplex t or easona bout a nd no tf or c asualu se,s o\nalthough t hese p ackages arei mp lemente d usingr eﬂec tion,t he y do n ot e xp oser eﬂec tion i n\ntheir own APIs.\n12.1. W hy Reflection?\nSometimesw en eed tow rite a functionc ap able ofd ealingu nifor mly wit hvalues oft yp esthat\ndon’ts at isf yac ommoni nt erface,d on’th aveak nown represent ation,o rd on’te xist att he time\nwe desig nthef unction—or e vena ll three.\nAf ami liar examplei st he for matting log icwithin fmt.Fprintf,w hichc an usefullyp rint an",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 347,
      "page_label": "329"
    }
  },
  {
    "page_content": "we desig nthef unction—or e vena ll three.\nAf ami liar examplei st he for matting log icwithin fmt.Fprintf,w hichc an usefullyp rint an\narbit r ar y value ofa ny typ e,e venau ser-deﬁne don e.L et’st ry toi mp lementaf unctionl ikei t\nusingw hatw ek nowa lready.F or simplicity,o ur functionw ill accepto ne argumenta nd will\nreturn ther esult as a str ing like fmt.Sprintdo es,so we’ll cal lit Sprint.\nWe start wit hat yp e sw itch thatt ests whether the argumentd eﬁnesa String method,a nd cal l\nit ifs o. W et hena dd swit c hcasest hatt estt he value’sd ynamic typ e against eacho ft he basic\n329\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 347,
      "page_label": "329"
    }
  },
  {
    "page_content": "ptg16105617\n330 CHAPTER 12. REFLECTION\ntypes— string, int, bool,a nd soo n—an dp er for mthea ppro priatef or matting operat ioni n\neach cas e.\nfunc Sprint(x interface{}) string {\ntype stringer interface {\nString() string\n}\nswitch x := x.(type) {\ncase stringer:\nreturn x.String()\ncase string:\nreturn x\ncase int:\nreturn strconv.Itoa(x)\n// ...similar cases for int16, uint32, and so on...\ncase bool:\nif x {\nreturn \"true\"\n}\nreturn \"false\"\ndefault:\n// array, chan, func, map, pointer, slice, struct\nreturn \"???\"\n}\n}\nButh ow dow ed ealw it hot her typ es, li ke[]float64, map[string][]string,a nd soo n? We\ncoulda dd morec as es,butt he numbero fs ucht yp esis inﬁnite. A nd whata bout named typ es,\nli ke url.Values?E veni ft he t yp e sw i tch h ad a cas e fori ts under ly ing t yp e\nmap[string][]string,i tw ou ldn’tm atch url.Values becaus e thet wo t yp es aren ot i den-\ntical, and the t yp e sw itch cannot include a cas e fore acht yp e li keurl.Values becaus e that\nwouldr equiret hisl ibrar yto dep endu poni ts clients.\nWi thout a way toi ns pec tther epresent ation of values ofu nknown types, weq uicklyg et stuck.\nWh atw en eed isr eﬂec tion.\n12.2. reflect.Typeand reflect.Value\nReﬂec tion i sp rovide d by t he reflect package. I td eﬁnest wo i mp ortantt yp es, Type and\nValue.A Type repres ents a Got yp e.I ti sa ni nt erface wit hmany met hodsf or dis criminat ing\namon gtypesa nd ins pec ting their comp onents, like the ﬁelds ofas tr uct ort he parameterso fa",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 348,
      "page_label": "330"
    }
  },
  {
    "page_content": "amon gtypesa nd ins pec ting their comp onents, like the ﬁelds ofas tr uct ort he parameterso fa\nfunc tion. Th es olei mp lementation of reflect.Type is the typ e des crip tor (§7.5), t he same\nentity thati dentiﬁes the dynamic typ eof ani nt erface value.\nThe reflect.TypeOf func tiona ccepts any interface{} andr etur nsi ts d ynamic typ e as a\nreflect.Type:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 348,
      "page_label": "330"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.2. REFLECT .TYPE AND REFLECT.V ALUE3 31\nt: =r eflect.TypeOf(3) // ar eflect.Type\nfmt.Println(t.String()) // \"int\"\nfmt.Println(t) // \"int\"\nThe TypeOf(3) call a bove a ssig nst he v alue 3 to t he interface{} parameter.R ecal l from\nSection7 .5 thata na ssig nmentf ro mac on crete value toa ni nt erface typ eperfor msa ni mp licit\ninterface co nv ersion, whic hc re atesa ni nt erface value co nsisting o ft wo c omponents: its\ndy namic type is the operand’st yp e (int)a nd its dy namic valu eis the operand’sv alue (3).\nBecaus ereflect.TypeOf returns an int erface value’sd ynamic typ e,i ta lways retur nsac on-\ncretet yp e.S o, for example, the codeb elow prints \"*os.File\",n ot \"io.Writer\".L ater,w e\nwi l lseet hat reflect.Typeis cap able ofr epresent ing int erface typ esto o.\nvar w io.Writer = os.Stdout\nfmt.Println(reflect.TypeOf(w)) // \"*os.File\"\nNo tice that reflect.Type satisﬁes fmt.Stringer.B ecause print ing the dynamic typ e of an\ninterface value isu sefulf or debug ginga nd log ging, fmt.Printfprov ides a shorthand, %T,t hat\nus es reflect.TypeOfinternal ly:\nfmt.Printf(\"%T\\n\", 3) // \"int\"\nTheo ther im portantt yp e in the reflect packagei s Value.A reflect.Value canh olda\nvalue ofa ny typ e.T he reflect.ValueOf func tiona ccepts any interface{} andr etur nsa\nreflect.Value cont ainingt he i nt erface’sd ynamic value .A sw it h reflect.TypeOf,t he\nresu lts of reflect.ValueOf area lways concrete, but a reflect.Value canh oldi nt erface val-\nues too.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 349,
      "page_label": "331"
    }
  },
  {
    "page_content": "resu lts of reflect.ValueOf area lways concrete, but a reflect.Value canh oldi nt erface val-\nues too.\nv: =r eflect.ValueOf(3) // a reflect.Value\nfmt.Println(v) // \"3\"\nfmt.Printf(\"%v\\n\", v) // \"3\"\nfmt.Println(v.String()) // NOTE: \"<int Value>\"\nLike reflect.Type, reflect.Value also sat isﬁesfmt.Stringer,b ut unlesst he Value holds\nas tr ing ,ther esulto ft he String method reveals onlyt he typ e.I ns tead, use the fmt package’s\n%vverb,w hicht re ats reflect.Valuess peci ally.\nCallingt he Typemethod ona Valuereturnsi ts typ e as areflect.Type:\nt: =v .Type() // ar eflect.Type\nfmt.Println(t.String()) // \"int\"\nThei nv ers e op erat iont o reflect.ValueOf is t he reflect.Value.Interface method.I t\nreturnsa n interface{}holdingt he samec on crete value as the reflect.Value:\nv: =r eflect.ValueOf(3) // a reflect.Value\nx: =v .Interface() // an interface{}\ni: =x .(int) // an int\nfmt.Printf(\"%d\\n\", i) // \"3\"\nA reflect.Value anda n interface{} canb ot hhold arbit rar y values. Thed if ference ist hat\nan empt yinterface hides t he represent ation and int rinsic operat ions oft he value ith olds and\nexp oses non e of itsm et hods, sou nlessw ek nowi ts dynamic typ e andu se a t yp e assertiont o\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 349,
      "page_label": "331"
    }
  },
  {
    "page_content": "ptg16105617\n332 CHAPTER 12. REFLECTION\npeer inside i t( as wed id ab ov e), t here isl it tle wec an do t ot he value wit hin. I nc ontrast, a\nValue hasm anym et hodsf or ins pec ting its cont ents, regardlesso fi ts typ e.L et’su se themf or\nours econ dattemp tat a general for matting function, whichw e’ll cal lformat.Any.\nIn ste ado fat yp e sw itch,w eu se reflect.Value’s Kind method t od is criminatet he c as es.\nAlthough there are inﬁni te lym anyt yp es,therea re onlyaﬁni te numbero f ki nds of typ e:the\nbasic typ esBool, String,a nd all the numbers;t he aggregatet yp esArray and Struct;t he ref-\nerence typ esChan, Func, Ptr, Slice,a nd Map; Interfacetypes; and ﬁnally Invalid,m eaning\nno value at all. ( Thez erov alue ofa reflect.Valuehask ind Invalid.)\ngopl.io/ch12/format\npackage format\nimport (\n\"reflect\"\n\"strconv\"\n)\n// Any formats any value as a string.\nfunc Any(value interface{}) string {\nreturn formatAtom(reflect.ValueOf(value))\n}\n// formatAtom formats a value without inspecting its internal structure.\nfunc formatAtom(v reflect.Value) string {\nswitch v.Kind() {\ncase reflect.Invalid:\nreturn \"invalid\"\ncase reflect.Int, reflect.Int8, reflect.Int16,\nreflect.Int32, reflect.Int64:\nreturn strconv.FormatInt(v.Int(), 10)\ncase reflect.Uint, reflect.Uint8, reflect.Uint16,\nreflect.Uint32, reflect.Uint64, reflect.Uintptr:\nreturn strconv.FormatUint(v.Uint(), 10)\n// ...floating-point and complex cases omitted for brevity...\ncase reflect.Bool:\nreturn strconv.FormatBool(v.Bool())",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 350,
      "page_label": "332"
    }
  },
  {
    "page_content": "// ...floating-point and complex cases omitted for brevity...\ncase reflect.Bool:\nreturn strconv.FormatBool(v.Bool())\ncase reflect.String:\nreturn strconv.Quote(v.String())\ncase reflect.Chan, reflect.Func, reflect.Ptr, reflect.Slice, reflect.Map:\nreturn v.Type().String() + \" 0x\" +\nstrconv.FormatUint(uint64(v.Pointer()), 16)\ndefault: // reflect.Array, reflect.Struct, reflect.Interface\nreturn v.Type().String() + \" value\"\n}\n}\nSo far,o ur functiont re ats eachv alue as an indivisiblet hingw it hno int ernal str ucture—hence\nformatAtom.F or aggregatet yp es (str uctsa nd arrays) andi nt erfaces itp rintso nlyt he ty peof\nthev alue,a nd for reference typ es (channel s,f unctions,p oint ers,s lices, andm aps), itp rintst he\ntype a nd the r eference addres si nh exade cimal.T hisi sl esst hani de al buts till a m aj or\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 350,
      "page_label": "332"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.3. DISPLAY ,AR ECURSIVE VALUE PRINTER 333\nimprov ement,a nd s ince Kind is c on cer ned onl yw it h theu nderly ing r epresent ation, for-\nmat.Anyworksf or named typ esto o.F or example:\nvar x int64 = 1\nvar d time.Duration = 1 * time.Nanosecond\nfmt.Println(format.Any(x)) // \"1\"\nfmt.Println(format.Any(d)) // \"1\"\nfmt.Println(format.Any([]int64{x})) // \"[]int64 0x8202b87b0\"\nfmt.Println(format.Any([]time.Duration{d})) // \"[]time.Duration 0x8202b87e0\"\n12.3. Display,aR ecursiveV alue Printer\nNext we’ll takeal ooka th ow toi mp rov ethed ispl ayo fc omposite typ es. Rather thant ry t o\ncopy fmt.Sprint exac tly,w e’ll bui ldad ebug gingu tilit yfunc tionc al le dDisplay that, given\nan arbit rar ily complex value x,p rintst he completes tr uctureo ft hatv alue,l ab elinge ache le-\nment wit hthep at hby whichi tw as found.L et’ss tart wit han example.\ne, _ := eval.Parse(\"sqrt(A / pi)\")\nDisplay(\"e\", e)\nIn the cal l ab ove ,thea rgumentt o Display is a s yntaxt re efrom the expressione valuatori n\nSection7 .9. Th eo ut put ofDisplayis shown below :\nDisplay e (eval.call):\ne.fn = \"sqrt\"\ne.args[0].type = eval.binary\ne.args[0].value.op = 47\ne.args[0].value.x.type = eval.Var\ne.args[0].value.x.value = \"A\"\ne.args[0].value.y.type = eval.Var\ne.args[0].value.y.value = \"pi\"\nWh ere possible, you shoulda void exposingr eﬂec tion int he API ofap ackage. W e’ll deﬁne an\nunexp orted function displayto dot he realw or k of the rec ursion, ande xp ort Display,as im-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 351,
      "page_label": "333"
    }
  },
  {
    "page_content": "unexp orted function displayto dot he realw or k of the rec ursion, ande xp ort Display,as im-\nplew rappera ro und itt hata ccepts an interface{}parameter :\ngopl.io/ch12/display\nfunc Display(name string, x interface{}) {\nfmt.Printf(\"Display %s (%T):\\n\", name, x)\ndisplay(name, reflect.ValueOf(x))\n}\nIn display,w e’ll use the formatAtomfunc tionw ed eﬁne dearlier top rint elementary values—\nbasic typ es, func tions,a nd channel s—bu tw e’ll use the methodso f reflect.Value to rec ur-\nsive lyd ispl aye achc omponent ofam orec omplex typ e.A st he rec ursiond es cends,t he path\nst ring, w hichi nitial lyd es crib est he s tartingv alue (f or i ns tance, \"e\"), w ill b ea ug mente d to\nindic ateh ow wer each edt he cur rentv alue (for ins tance, \"e.args[0].value\").\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 351,
      "page_label": "333"
    }
  },
  {
    "page_content": "ptg16105617\n334 CHAPTER 12. REFLECTION\nSincew e’re nol on g erp retendingt oi mp lement fmt.Sprint,w ew ill use t he fmt packaget o\nke epo ur examples hort.\nfunc display(path string, v reflect.Value) {\nswitch v.Kind() {\ncase reflect.Invalid:\nfmt.Printf(\"%s = invalid\\n\", path)\ncase reflect.Slice, reflect.Array:\nfor i := 0; i < v.Len(); i++ {\ndisplay(fmt.Sprintf(\"%s[%d]\", path, i), v.Index(i))\n}\ncase reflect.Struct:\nfor i := 0; i < v.NumField(); i++ {\nfieldPath := fmt.Sprintf(\"%s.%s\", path, v.Type().Field(i).Name)\ndisplay(fieldPath, v.Field(i))\n}\ncase reflect.Map:\nfor _, key := range v.MapKeys() {\ndisplay(fmt.Sprintf(\"%s[%s]\", path,\nformatAtom(key)), v.MapIndex(key))\n}\ncase reflect.Ptr:\nif v.IsNil() {\nfmt.Printf(\"%s = nil\\n\", path)\n}e lse {\ndisplay(fmt.Sprintf(\"(*%s)\", path), v.Elem())\n}\ncase reflect.Interface:\nif v.IsNil() {\nfmt.Printf(\"%s = nil\\n\", path)\n}e lse {\nfmt.Printf(\"%s.type = %s\\n\", path, v.Elem().Type())\ndisplay(path+\".value\", v.Elem())\n}\ndefault: // basic types, channels, funcs\nfmt.Printf(\"%s = %s\\n\", path, formatAtom(v))\n}\n}\nLet’sd is cusst he cas es in order.\nSlices and array s: Thel og icis the samef or bot h.T he Len method retur nst he numbero fe le-\nmentso fas lice o ra rray value ,a nd Index(i) retr ieves t he el ement at ind ex i,a ls o as a\nreflect.Value;i tp anics if i is out of b ound s.T hese a re analogou sto the bui lt-inlen(a)\nand a[i] op erat ions ons equences. The display func tionr ec ursivelyi nv okesi ts elf one ach",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 352,
      "page_label": "334"
    }
  },
  {
    "page_content": "and a[i] op erat ions ons equences. The display func tionr ec ursivelyi nv okesi ts elf one ach\nelemento ft he sequence,a pp endingt he subscript not ation \"[i]\"to the pat h.\nAlthough reflect.Value hasm anym et hods, onlyaf ew are safet oc al lon any given value.\nFo rexample, the Index method may bec al le don values ofk ind Slice, Array,o r String,b ut\npanics for any other kind.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 352,
      "page_label": "334"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.3. DISPLAY ,AR ECURSIVE VALUE PRINTER 335\nStructs: The NumField method r ep ortst he n umbero fﬁ elds i nt he s tr uct,a nd Field(i)\nreturnst he v alue o ft he i-t h ﬁelda sa reflect.Value.T he l isto fﬁ elds i ncludes o nes\nprom ote dfrom anony mou sﬁelds.T oa pp end the ﬁelds elec tor not ation \".f\" to the pat h,we\nmu sto bt ain the reflect.Typeof the str uct and accesst he nameo fi ts i-t h ﬁeld.\nMa ps: The MapKeys method retur nsas lice of reflect.Values, one p er map k ey.A su su al\nwhen i terat ingo veram ap,t he o rder i su ndeﬁne d. MapIndex(key) returnst he v alue co r-\nresp ondingt o key.W ea pp end the sub script not ation \"[key]\" to the pat h. (We’re cut tinga\ncorner her e. T he t yp e of a m ap k ey i sn’tr estr icted t ot he t yp es formatAtom hand les best;\nar rays,st ruc ts, andi nt erfaces can also bev alid map keys. Extendin gt hisc as eto print the key\nin full isE xercis e12.1.)\nPo int ers: The Elem method r etur nst he v ar iable p oint edt ob yap oint er, a gain as a\nreflect.Value.T hiso perat ionw ou ldb es afee veni ft he point erv alue is nil,i nw hichc as e\nther esultw ou ldh avek ind Invalid,b ut weu se IsNil to detec tni lpointers explicitlys ow e\ncanp rint a m orea ppro priatem essage . We preﬁxt he pat hwith a \"*\" andp arenthesize itt o\navoida mbiguity.\nIn ter fac es: Again, weu se IsNil to test whether the int erface isn il,a nd ifn ot,w er et rie vei ts\ndy namic value using v.Elem()andp rint its typ e andv alue.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 353,
      "page_label": "335"
    }
  },
  {
    "page_content": "dy namic value using v.Elem()andp rint its typ e andv alue.\nNo wthat our Display func tioni sc omplete, let’sp ut it t ow or k.T he Movie type be lowi sa\nslig htv ar iat iono nt he one inS ec tion 4.5:\ntype Movie struct {\nTitle, Subtitle string\nYear int\nColor bool\nActor map[string]string\nOscars []string\nSequel *string\n}\nLet’sd eclare a value oft hist yp e ands ee what Displaydo eswith it:\nstrangelove := Movie{\nTitle: \"Dr. Strangelove\",\nSubtitle: \"How I Learned to Stop Worrying and Love the Bomb\",\nYear: 1964,\nColor: false,\nActor: map[string]string{\n\"Dr. Strangelove\": \"Peter Sellers\",\n\"Grp. Capt. Lionel Mandrake\": \"Peter Sellers\",\n\"Pres. Merkin Muffley\": \"Peter Sellers\",\n\"Gen. Buck Turgidson\": \"George C. Scott\",\n\"Brig. Gen. Jack D. Ripper\": \"Sterling Hayden\",\n`Maj. T.J. \"King\" Kong`:\" Slim Pickens\",\n},\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 353,
      "page_label": "335"
    }
  },
  {
    "page_content": "ptg16105617\n336 CHAPTER 12. REFLECTION\nOscars: []string{\n\"Best Actor (Nomin.)\",\n\"Best Adapted Screenplay (Nomin.)\",\n\"Best Director (Nomin.)\",\n\"Best Picture (Nomin.)\",\n},\n}\nThec al lDisplay(\"strangelove\", strangelove)pr ints:\nDisplay strangelove (display.Movie):\nstrangelove.Title = \"Dr. Strangelove\"\nstrangelove.Subtitle = \"How I Learned to Stop Worrying and Love the Bomb\"\nstrangelove.Year = 1964\nstrangelove.Color = false\nstrangelove.Actor[\"Gen. Buck Turgidson\"] = \"George C. Scott\"\nstrangelove.Actor[\"Brig. Gen. Jack D. Ripper\"] = \"Sterling Hayden\"\nstrangelove.Actor[\"Maj. T.J. \\\"King\\\" Kong\"] = \"Slim Pickens\"\nstrangelove.Actor[\"Dr. Strangelove\"] = \"Peter Sellers\"\nstrangelove.Actor[\"Grp. Capt. Lionel Mandrake\"] = \"Peter Sellers\"\nstrangelove.Actor[\"Pres. Merkin Muffley\"] = \"Peter Sellers\"\nstrangelove.Oscars[0] = \"Best Actor (Nomin.)\"\nstrangelove.Oscars[1] = \"Best Adapted Screenplay (Nomin.)\"\nstrangelove.Oscars[2] = \"Best Director (Nomin.)\"\nstrangelove.Oscars[3] = \"Best Picture (Nomin.)\"\nstrangelove.Sequel = nil\nWe can use Displayto displ ayt he int ernalso fl ibrar ytypes, sucha s *os.File:\nDisplay(\"os.Stderr\", os.Stderr)\n// Output:\n// Display os.Stderr (*os.File):\n// (*(*os.Stderr).file).fd = 2\n// (*(*os.Stderr).file).name = \"/dev/stderr\"\n// (*(*os.Stderr).file).nepipe = 0\nNo tice thate venu nexp orted ﬁelds are visible tor eﬂec tion.B ewaret hatt he par tic ularo ut put\nof t hise xamplem ay var ya crossp latfor msa nd m ay c hange ove rt imea sl ibrar ies evolve.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 354,
      "page_label": "336"
    }
  },
  {
    "page_content": "of t hise xamplem ay var ya crossp latfor msa nd m ay c hange ove rt imea sl ibrar ies evolve.\n(Thos e ﬁelds are privatef or a reason!) W ec an evena pp l yDisplay to a reflect.Value and\nwatch itt raverse the int ernal represent ation of t he typ e des crip tor for*os.File.T he out put\nof the cal lDisplay(\"rV\", reflect.ValueOf(os.Stderr))is shown below,t houg hof cours e\nyour mile agem ay vary:\nDisplay rV (reflect.Value):\n(*rV.typ).size = 8\n(*rV.typ).hash = 871609668\n(*rV.typ).align = 8\n(*rV.typ).fieldAlign = 8\n(*rV.typ).kind = 22\n(*(*rV.typ).string) = \"*os.File\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 354,
      "page_label": "336"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.3. DISPLAY ,AR ECURSIVE VALUE PRINTER 337\n(*(*(*rV.typ).uncommonType).methods[0].name) = \"Chdir\"\n(*(*(*(*rV.typ).uncommonType).methods[0].mtyp).string) = \"func() error\"\n(*(*(*(*rV.typ).uncommonType).methods[0].typ).string) = \"func(*os.File) error\"\n...\nObservet he dif ference bet weent hese two examples:\nvar i interface{} = 3\nDisplay(\"i\", i)\n// Output:\n// Display i (int):\n// i = 3\nDisplay(\"&i\", &i)\n// Output:\n// Display &i (*interface {}):\n// (*&i).type = int\n// (*&i).value = 3\nIn the ﬁrs texample, Display calls reflect.ValueOf(i),w hichr etur nsav alue ofk ind Int.\nAs wem ention edi nS ec tion 12.2, reflect.ValueOf always retur nsa Valueof a con crete typ e\nsince ite xt racts the contents of an int erface value.\nIn the secon dexample, Display calls reflect.ValueOf(&i),w hichr etur nsap oint ert o i,o f\nkind Ptr.T he switch cas efor Ptrcalls Elemon thisv alue,w hichr etur nsa Valuerepres enting\nthe variab le i itself,o fk ind Interface.A Value obtained indirec tly,l iket hiso ne,m ay rep-\nresent any value at al l, includingi nt erfaces. The display func tionc al lsi ts elf rec ursivelya nd\nthis time, itp rintss ep aratec omponentsf or the int erface’sd ynamic typ e andv alue.\nAs cur rentlyi mp lemente d,Display wi l lne ver ter minatei fi te ncount ers a c yc lei nt he obj e ct\ngraph, such as thisl in ked listt hate ats its own tai l:\n// a struct that points to itself\ntype Cycle struct{ Value int; Tail *Cycle }\nvar c Cycle\nc=Cycle{42, &c}\nDisplay(\"c\", c)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 355,
      "page_label": "337"
    }
  },
  {
    "page_content": "// a struct that points to itself\ntype Cycle struct{ Value int; Tail *Cycle }\nvar c Cycle\nc=Cycle{42, &c}\nDisplay(\"c\", c)\nDisplaypr intst hise ver-grow ing exp ansion:\nDisplay c (display.Cycle):\nc.Value = 42\n(*c.Tail).Value = 42\n(*(*c.Tail).Tail).Value = 42\n(*(*(*c.Tail).Tail).Tail).Value = 42\n...ad infinitum...\nMany Gop rogramsc ontain at leas ts om ecyclic dat a. Making Display ro busta gainst such\ncycles ist rick y,r equir inga ddition alb ookkeeping tor ecordt he set ofr eferences thath aveb een\nfo llowe dso far ; it isc ostlyt oo.A general solut ion requires unsafe language features, as we\nwi l lsee in Sec tion 13.3.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 355,
      "page_label": "337"
    }
  },
  {
    "page_content": "ptg16105617\n338 CHAPTER 12. REFLECTION\nCy cles pos e lesso fap ro blem f or fmt.Sprint becaus e it r arelyt ries t op rint t he c omplete\nst ruc ture. F or example, wheni te ncount ers a p oint er, itb re aks the rec ursionb yp rint ing the\npointer’sn umer ic value.I tc an get stuck tryingt op rint a slice orm ap thatc ontainsi ts elf as an\nelement, but suchr arec as es do not war rantt he con siderable extra tro ubleo fh andlingc yc les.\nExercis e 12.1:Extend Displayso thati tc an displaym aps whose keysa re str uctso ra rrays.\nExercis e 12.2:Make display safe tou se onc yc lic dat ast ruc tures byb oundingt he numbero f\nsteps i tt akes bef orea bandoningt he r ec ursion. (I nS ec tion 13.3, we ’ll see a nother way to\ndetec tcycles.)\n12.4. Example: Encoding S-Expressions\nDisplay is a debug gingr outine for displ aying str uctured dat a,buti t’sn ot far short ofb eing\nable toe ncodeo r marshal arbit rar yGo obj e cts as messagesi nap or table not ation suitablef or\ninter-processc ommunic ation.\nAs wes aw in Sec tion 4.5, Go’ss tand ard librar ysupp ortsav ar ietyo ff or mats, includingJ SON,\nXML, an dA SN.1. A nother n ot ation t hati ss till w idely u sedi s S-expre ssi ons,t he s yntaxo f\nLisp.U nliket he other not ation s,S -expressions are not sup por ted byt he Gos tand ard librar y,\nnotl east because the yhave nou nivers allya ccepte ddeﬁnition,d espit eseveral attemp tsa ts tan-\ndardizat iona nd the existence ofm anyi mp lementation s.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 356,
      "page_label": "338"
    }
  },
  {
    "page_content": "dardizat iona nd the existence ofm anyi mp lementation s.\nIn thiss ec tion,w e’ll d eﬁne a p ackaget hate ncodes arbit rar yGo obj e cts usinga nS -expression\nnotation thats up por tst he fol low ing con str ucts:\n42 integer\n\"hello\" string (with Go-style quotation)\nfoo symbol (an unquoted name)\n(1 2 3) list (zero or more items enclosed in parentheses)\nBooleans are tradition allye ncoded usingt he symbol t fort rue, and the e mp tyl ist () or the\nsy mbol nil forf alse,b ut for s implicity,o ur im plementation i gnores t hem. I ta ls o ig nores\nch annel sandf unctions,s ince their state iso paquet or eﬂec tion.A nd iti gnores reala nd com-\nplex ﬂoating-p ointn umbers and int erfaces. Addin gs up por tfort hemi sE xercis e12.3.\nWe’ll encodet he typ esof Gou singS -expressions asf ol lows. I nt egers and str ingsa re encoded\nin the obv iou sway.N il values aree ncoded ast he symbol nil.A rrays ands lices aree ncoded\nusingl istn ot ation.\nSt ruc ts aree ncoded a sal isto fﬁ eldb indings, each ﬁel db indingb eingat wo-elementl ist\nwhos e ﬁrs telement( as ymbol) ist he ﬁeldn amea nd whose second elementi st he ﬁeldv alue.\nMaps too a re encoded a sal isto fp airs, wit heach pair beingt he key a nd value ofo ne map\nentr y.T radition ally, S-expressions r epresent l ists o fk ey/value pair su singas ingle cons cell\n(key . value)fore achp air,r at her thanat wo-elementl ist, but tos implif ythed ecodingw e’ll\nig nored ot ted listn ot ation.\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 356,
      "page_label": "338"
    }
  },
  {
    "page_content": "ig nored ot ted listn ot ation.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 356,
      "page_label": "338"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.4. EXAMPLE: ENCODING S-EXPRESSIONS 339\nEnco dingi sd on eby a singler ec ursivef unction, encode,s hown below.I ts str ucturei se ss en-\ntial lyt he same as thato f Displayin the pre vious sec tion:\ngopl.io/ch12/sexpr\nfunc encode(buf *bytes.Buffer, v reflect.Value) error {\nswitch v.Kind() {\ncase reflect.Invalid:\nbuf.WriteString(\"nil\")\ncase reflect.Int, reflect.Int8, reflect.Int16,\nreflect.Int32, reflect.Int64:\nfmt.Fprintf(buf, \"%d\", v.Int())\ncase reflect.Uint, reflect.Uint8, reflect.Uint16,\nreflect.Uint32, reflect.Uint64, reflect.Uintptr:\nfmt.Fprintf(buf, \"%d\", v.Uint())\ncase reflect.String:\nfmt.Fprintf(buf, \"%q\", v.String())\ncase reflect.Ptr:\nreturn encode(buf, v.Elem())\ncase reflect.Array, reflect.Slice: // (value ...)\nbuf.WriteByte('(')\nfor i := 0; i < v.Len(); i++ {\nif i > 0 {\nbuf.WriteByte('' )\n}\nif err := encode(buf, v.Index(i)); err != nil {\nreturn err\n}\n}\nbuf.WriteByte(')')\ncase reflect.Struct: // ((name value) ...)\nbuf.WriteByte('(')\nfor i := 0; i < v.NumField(); i++ {\nif i > 0 {\nbuf.WriteByte('' )\n}\nfmt.Fprintf(buf, \"(%s \", v.Type().Field(i).Name)\nif err := encode(buf, v.Field(i)); err != nil {\nreturn err\n}\nbuf.WriteByte(')')\n}\nbuf.WriteByte(')')\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 357,
      "page_label": "339"
    }
  },
  {
    "page_content": "ptg16105617\n340 CHAPTER 12. REFLECTION\ncase reflect.Map: // ((key value) ...)\nbuf.WriteByte('(')\nfor i, key := range v.MapKeys() {\nif i > 0 {\nbuf.WriteByte('' )\n}\nbuf.WriteByte('(')\nif err := encode(buf, key); err != nil {\nreturn err\n}\nbuf.WriteByte('' )\nif err := encode(buf, v.MapIndex(key)); err != nil {\nreturn err\n}\nbuf.WriteByte(')')\n}\nbuf.WriteByte(')')\ndefault: // float, complex, bool, chan, func, interface\nreturn fmt.Errorf(\"unsupported type: %s\", v.Type())\n}\nreturn nil\n}\nThe Marshal func tionw raps the encod er in an AP Is imi lar tot hose o ft he o ther encod-\ning/...packages:\n// Marshal encodes a Go value in S-expression form.\nfunc Marshal(v interface{}) ([]byte, error) {\nvar buf bytes.Buffer\nif err := encode(&buf, reflect.ValueOf(v)); err != nil {\nreturn nil, err\n}\nreturn buf.Bytes(), nil\n}\nHere’st he out put ofMarshalapplie dto the strangelovevar iable fro mSection1 2.3:\n((Title \"Dr. Strangelove\") (Subtitle \"How I Learned to Stop Worrying and Lo\nve the Bomb\") (Year 1964) (Actor ((\"Grp. Capt. Lionel Mandrake\" \"Peter Sell\ners\") (\"Pres. Merkin Muffley\" \"Peter Sellers\") (\"Gen. Buck Turgidson\" \"Geor\nge C. Scott\") (\"Brig. Gen. Jack D. Ripper\" \"Sterling Hayden\") (\"Maj. T.J. \\\n\"King\\\" Kong\" \"Slim Pickens\") (\"Dr. Strangelove\" \"Peter Sellers\"))) (Oscars\n(\"Best Actor (Nomin.)\" \"Best Adapted Screenplay (Nomin.)\" \"Best Director (N\nomin.)\" \"Best Picture (Nomin.)\")) (Sequel nil))\nThew hole o ut put app earso no ne l on g linew it h minimal s paces, mak ingi th ardt or ead.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 358,
      "page_label": "340"
    }
  },
  {
    "page_content": "omin.)\" \"Best Picture (Nomin.)\")) (Sequel nil))\nThew hole o ut put app earso no ne l on g linew it h minimal s paces, mak ingi th ardt or ead.\nHere’st he sameo ut put manuallyf or matte daccordingt oS -expressionc onvent ion s.W riting a\npretty-print erf or S-expressions isl ef t as a (challenging)e xercis e;t he dow nlo adfrom gopl.io\nincludes a simplev ersion.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 358,
      "page_label": "340"
    }
  },
  {
    "page_content": "ptg16105617\nS\nETTING VARIABLES WITH REFLECTSECTION 12.5. .V ALU 3E 41\n((Title \"Dr. Strangelove\")\n(Subtitle \"How I Learned to Stop Worrying and Love the Bomb\")\n(Year 1964)\n(Actor ((\"Grp. Capt. Lionel Mandrake\" \"Peter Sellers\")\n(\"Pres. Merkin Muffley\" \"Peter Sellers\")\n(\"Gen. Buck Turgidson\" \"George C. Scott\")\n(\"Brig. Gen. Jack D. Ripper\" \"Sterling Hayden\")\n(\"Maj. T.J. \\\"King\\\" Kong\" \"Slim Pickens\")\n(\"Dr. Strangelove\" \"Peter Sellers\")))\n(Oscars (\"Best Actor (Nomin.)\"\n\"Best Adapted Screenplay (Nomin.)\"\n\"Best Director (Nomin.)\"\n\"Best Picture (Nomin.)\"))\n(Sequel nil))\nLike \nthe fmt.Print, json.Marshal,a nd Displayfunc \ntions, sexpr.Marshal wi \nl llo opf orever\nif cal le dwith cyc lic dat a.\nIn Sec tion 12.6, we’ll sketch out the imp lementation of the cor respondingS -expressiond ecod-\ningf unction, but beforew eg et there ,we’ll ﬁrs tne e dto underst and howr eﬂec tion can beu sed\nto updatep rogram variables.\nExercis e 12.3:Implementt he missingc as esof the encodefunc \ntion. Enco de boole ansa s tan\nd\nnil,ﬂ o\nating-p ointn umbers u singG o’sn ot ation,a nd c omplex num bers l ike1 +2i as\n#C(1.0 \n2.0).I nt \nerfaces can b ee ncoded a sa p air ofat yp e name and a value ,f or ins tance\n(\"[]int\" \n(1 2 3)),b ut \nbewaret hatt hisn ot ation isa mbiguous:t he reflect.Type.String\nmethod \nmay retur nthes ames tr ing for dif ferentt yp es.\nExercis e 12.4:Mo dif yencodeto \nprett y-print the S-expression in the sty les hown above .\nExercis e 12.5:Ad apt encode to",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 359,
      "page_label": "341"
    }
  },
  {
    "page_content": "Exercis e 12.4:Mo dif yencodeto \nprett y-print the S-expression in the sty les hown above .\nExercis e 12.5:Ad apt encode to \nemitJ SONi ns teado fS -expressions.T esty oure ncoder using\nthes tand ard decoder, json.Unmarshal.\nExercis \ne 12.6: Ad apt encode so \nthat, as an o pt imizat ion, itd oesn ot e ncodeaﬁel dw hose\nval\nue is t\nhe zero val\nue of i\nts typ e.\nExercis e 1\n2.7: C\nreate  a\n  s\ntreaming A\nPI  f\nor  t\nhe  S\n-expression en\ncoder, f\nol low ing  t\nhe  s\nty le o\nf\njson.Encoder (§4.5\n).\n12.\n5. S etting Variables with reflect.Value\nSo \nfar,r eﬂec tion has only interpre ted values in our program in various ways. Th ep oint oft his\nsection, how ever, ist o ch ange them.\nRe call thats om eGo expressions like x, x.f[1],a nd *p denot \ne var iables, but othersl ike x+1\nan\nd f(2) do \nnot.A var iable isa n ad dre ssabl estoragel ocat iont hatc ontainsav alue,a nd its\nvalue may beu pdated through thata ddress.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 359,
      "page_label": "341"
    }
  },
  {
    "page_content": "ptg16105617\n342 CHAPTER 12. REFLECTION\nAs imi lar dist inc tiona pp lies to reflect.Values. S om e area ddressable; o thersa re n ot.\nConsider the fol low ing declarat ions:\nx: =2 // value type variable?\na: =r eflect.ValueOf(2) // 2i nt no\nb: =r eflect.ValueOf(x) // 2i nt no\nc: =r eflect.ValueOf(&x) // &x *int no\nd: =c .Elem() // 2i nt yes (x)\nThev alue wit hin a is not addressable. I ti sm erelyac opyo ft he int eger2 .T he samei st rueo f\nb.T he value wit hin cis als onon-addressable, beingac opyo ft he point erv alue &x.I nf ac t,no\nreflect.Value returned by reflect.ValueOf(x) is addressable. B ut d,d er ive dfrom c by\ndereferencingt he p oint erw it hin it, refer st oav ar iable andi st hu saddressable. W ec an use\nthis appro ach,c al lingreflect.ValueOf(&x).Elem(),t oo bt ain an addressable Value fora ny\nvar iablex.\nWe can aska reflect.Valuewhet her iti sa ddressablet hrough its CanAddrmethod:\nfmt.Println(a.CanAddr()) // \"false\"\nfmt.Println(b.CanAddr()) // \"false\"\nfmt.Println(c.CanAddr()) // \"false\"\nfmt.Println(d.CanAddr()) // \"true\"\nWe obt ain an addressable reflect.Value whenever wei ndirec tthro ugh a point er, eveni fw e\nst arted fro man on-addressable Value.A ll the usu alr ules for addressabi lit yhave analogs for\nreﬂec tion.F or example, since the slice indexinge xpression e[i]implicitlyf ol lowsap oint er, it\nis a ddressablee veni ft he e xpression e is n ot.B ya nalog y,reflect.ValueOf(e).Index(i)",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 360,
      "page_label": "342"
    }
  },
  {
    "page_content": "is a ddressablee veni ft he e xpression e is n ot.B ya nalog y,reflect.ValueOf(e).Index(i)\nrefers to a var iable,a nd ist hu saddressablee veni f reflect.ValueOf(e)is not.\nTo recov ert he var iable fro man addressable reflect.Valuere quires three steps. Fir st,w ec al l\nAddr(),w hichr etur nsa Value holdingapo intert ot he var iable.N ext, wec al lInterface()\non t his Value,w hichr etur nsa n interface{} value co nt ainingt he p oint er. F inal ly, ifw e\nknow the typ eof the v ar iable,w ec an use a typ e assertiont or et rie vet he contentso ft he int er-\nface as an ordinar ypointer. Wec an thenu pdatet he var iable through the point er:\nx: =2\nd: =reflect.ValueOf(&x).Elem() // dr efers to the variable x\npx := d.Addr().Interface().(*int) // px := &x\n*px = 3// x = 3\nfmt.Println(x) // \"3\"\nOr,w ec an updatet he var iable refer red tob ya na ddressable reflect.Value direc tly,w it hout\nusingap oint er, byc al lingt he reflect.Value.Setmethod:\nd.Set(reflect.ValueOf(4))\nfmt.Println(x) // \"4\"\nThes amec he cks for assig nabilit ythat areo rdinar ily per for med byt he compi ler ared on eat\nrunt imeb yt he Set methods. A bove ,thev ar iable andt he value bot hhave typ eint,b ut ift he\nvar iable had beena n int64,t he program wou ldp anic, soi t’sc ruci alto makes uret he value is\nassig nable tot he typ eof the var iable:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 360,
      "page_label": "342"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.5. SETTING VARIABLES WITH REFLECT .V ALUE3 43\nd.Set(reflect.ValueOf(int64(5))) // panic: int64 is not assignable to int\nAndo fc ours ecalling Seton a non-addressable reflect.Valuepanics too:\nx: =2\nb: =r eflect.ValueOf(x)\nb.Set(reflect.ValueOf(3)) // panic: Set using unaddressable value\nTherea re var iants ofSet sp eci alizedf or cer tain gro ups ofb asic typ es:SetInt, SetUint, Set-\nString, SetFloat,a nd soo n:\nd: =r eflect.ValueOf(&x).Elem()\nd.SetInt(3)\nfmt.Println(x) // \"3\"\nIn som eways these met hodsa re moref or giv ing . SetInt,f or example, will succe e dso lon gas\nthev ar iable’st yp eis som ekind ofs ig ned int eger, ore venan amed typ ewhos e underly ing typ e\nis a sig ned int eger, and ift he value ist oo large itw ill beq uiet lyt runc ate d toﬁt. B ut tre adc are-\nfully: c al lingSetInt on a reflect.Value that referst oa n interface{} var iable will panic,\neven thoug hSetwoulds ucce e d.\nx: =1\nrx := reflect.ValueOf(&x).Elem()\nrx.SetInt(2) // OK, x = 2\nrx.Set(reflect.ValueOf(3)) // OK, x = 3\nrx.SetString(\"hello\") // panic: string is not assignable to int\nrx.Set(reflect.ValueOf(\"hello\")) // panic: string is not assignable to int\nvar y interface{}\nry := reflect.ValueOf(&y).Elem()\nry.SetInt(2) // panic: SetInt called on interface Value\nry.Set(reflect.ValueOf(3)) // OK, y = int(3)\nry.SetString(\"hello\") // panic: SetString called on interface Value\nry.Set(reflect.ValueOf(\"hello\")) // OK, y = \"hello\"",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 361,
      "page_label": "343"
    }
  },
  {
    "page_content": "ry.SetString(\"hello\") // panic: SetString called on interface Value\nry.Set(reflect.ValueOf(\"hello\")) // OK, y = \"hello\"\nWh enw ea pp lie d Display to os.Stdout,w ef ound t hatr eﬂec tion c an r eadt he v alues of\nunexp orted str uct ﬁelds thata re inaccessiblea ccordingt ot he usu alr ules oft he langu age, like\nthe fd intﬁeldo fa n os.File st ruc t on a U nix-li kep latfor m.H ow ever, reﬂec tion c annot\nup dates uchv alues:\nstdout := reflect.ValueOf(os.Stdout).Elem() // *os.Stdout, an os.File var\nfmt.Println(stdout.Type()) // \"os.File\"\nfd := stdout.FieldByName(\"fd\")\nfmt.Println(fd.Int()) // \"1\"\nfd.SetInt(2) // panic: unexported field\nAn addressable reflect.Value re cords whether itw as obt ained byt raversinga nu nexp orted\nst ruc t ﬁelda nd,i fs o, dis allowsm odiﬁcation.C on sequently, CanAddr is not usu allyt he rig ht\nch eck to u se b efores etting a v ar iable.T he rel ate d method CanSet reportsw hether a\nreflect.Valueis addressable an dsett able:\nfmt.Println(fd.CanAddr(), fd.CanSet()) // \"true false\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 361,
      "page_label": "343"
    }
  },
  {
    "page_content": "ptg16105617\n344 CHAPTER 12. REFLECTION\n12.6. Example: Decoding S-Expressions\nFo reach Marshalfunc tionp rovide dby the stand ard librar y’s encoding/...packages, there is\nac or responding Unmarshal func tiont hatd oesd ecoding. F or e xample, a sw es aw in\nSection4 .5, given a byt es lice cont ainingJ SON-enco dedd at aforo ur Movie type (§12.3), we\ncand ecodei tl iket his:\ndata := []byte{/* ... */}\nvar movie Movie\nerr := json.Unmarshal(data, &movie)\nThe Unmarshal func tionu sesr eﬂec tion t om odif y theﬁ elds o ft he e xist ing movie var iable,\ncreating new maps, str ucts, ands lices as deter mined byt he typ eMovie andt he content oft he\nincomingd at a.\nLet’sn ow imp lementas imple Unmarshal func tionf or S-expressions,a nalogou sto the stan-\ndard json.Unmarshal func tionu seda bove , andt he i nv ers e of o ur earlier sexpr.Marshal.\nWe mustc aution you t hatar obusta nd general implementation requires subst ant ial lym ore\nco dethan will comfortably ﬁt in thi se xample, whichi sa lready lon g,s ow eh avet aken many\nshortcuts. W es up por t on lyal imite dsu bseto fS -expressions and don ot handlee rror sgrace-\nfully. T he codei si nt ended toi llustrater eﬂec tion,n ot parsing.\nThel exer usest he Scanner type f ro mthe text/scanner packaget ob re aka ni np uts tream\ninto a s equence oft okenss ucha sc omments, identiﬁers, s tr ing lit erals, andn umer ic literals.\nThes canner’s Scan method a dvances t he s canner an dr etur nst he k indo ft he ne xt t oken,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 362,
      "page_label": "344"
    }
  },
  {
    "page_content": "Thes canner’s Scan method a dvances t he s canner an dr etur nst he k indo ft he ne xt t oken,\nwhichh as typ e rune.M ostt okens, like '(',c on sisto fas ingler une, but the text/scanner\npackager epresentst he k inds o ft he m ulti-charac ter tokens Ident, String,a nd Int using\nsmal lnegat ive values oft yp erune.F ol low ing a cal lto Scan that retur nso ne oft hese kinds of\ntoken, the scanner’s TokenTextmethod retur nst he text oft he token.\nSinceaty picalp arserm ay n eed t oi ns pec t thec ur rentt oken s everal times, b ut t he Scan\nmethod advances the scanner,w ew rap the scanner in a h elpert yp ecalled lexer that keeps\ntracko ft he token mostr ecentlyr etur ned by Scan.\ngopl.io/ch12/sexpr\ntype lexer struct {\nscan scanner.Scanner\ntoken rune // the current token\n}\nfunc (lex *lexer) next() {l ex.token = lex.scan.Scan() }\nfunc (lex *lexer) text() string { return lex.scan.TokenText() }\nfunc (lex *lexer) consume(want rune) {\nif lex.token != want { // NOTE: Not an example of good error handling.\npanic(fmt.Sprintf(\"got %q, want %q\", lex.text(), want))\n}\nlex.next()\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 362,
      "page_label": "344"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.6. EXAMPLE: DE CODING S-EXPRESSIONS 345\nNo wlet’st ur n to the parser. I tc on sists oft wo princip alf unctions.T he ﬁrs t of these, read,\nre ads the S-expressiont hats tartsw it hthec ur rentt oken andu pdates the var iable refer red to\nby the addressable reflect.Value v.\nfunc read(lex *lexer, v reflect.Value) {\nswitch lex.token {\ncase scanner.Ident:\n// The only valid identifiers are\n// \"nil\" and struct field names.\nif lex.text() == \"nil\" {\nv.Set(reflect.Zero(v.Type()))\nlex.next()\nreturn\n}\ncase scanner.String:\ns, _ := strconv.Unquote(lex.text()) // NOTE: ignoring errors\nv.SetString(s)\nlex.next()\nreturn\ncase scanner.Int:\ni, _ := strconv.Atoi(lex.text()) // NOTE: ignoring errors\nv.SetInt(int64(i))\nlex.next()\nreturn\ncase '(':\nlex.next()\nreadList(lex, v)\nlex.next() // consume ')'\nreturn\n}\npanic(fmt.Sprintf(\"unexpected token %q\", lex.text()))\n}\nOurS -expressions u se i dentiﬁersf or t wo d istinc t purpos es, st ruc t ﬁeldn ames an dt he nil\nvalue for a poi nt er. T he read func tiono nlyh andles the latterc as e.W heni te ncount ers the\nscanner.Ident \"nil\",i ts ets v to the zerov alue ofi ts typ eusingt he reflect.Zero func tion.\nFo r anyo ther iden tiﬁer,i tr ep ortsa ne rror.T he readList func tion, whic hw e’ll see i na\nmoment,h andles identiﬁersu sed as str uct ﬁeldn ames.\nA '(' tokeni ndic ates the start ofal ist. Th es econ dfunc tion, readList,d ecodes a list int oa",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 363,
      "page_label": "345"
    }
  },
  {
    "page_content": "A '(' tokeni ndic ates the start ofal ist. Th es econ dfunc tion, readList,d ecodes a list int oa\nvar iable ofc omposite t yp e—am ap,s tr uct,s lice,o ra rray—dep endin go nw hatk indo fG o\nvar iable we’re cur rentlyp opu lat ing. I ne achc as e,t he loopk eeps parsingi tems unt i lit encoun-\nters the matchingc los eparent hesis, ')', as detec ted byt he endListfunc tion.\nThei nt erest ing par tis the rec ursion. Th es implestc as eis ana rray.U nt i lthec losing ')' is\nseen, weu se Index to obt ain the var iable for eacha rray elementa nd makear ec ursivec al lto\nreadto popu latei t. A si nm anyo ther erro rcases, if t he inp utd at acaus est he decoder toi ndex\nbeyond the end o ft he array,t he decoder panics. A simi lar ap proach isu sedf or slices, except\nwe mustc re ate a new var iable for eache lement, popu latei t, thena pp end itt ot he slice.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 363,
      "page_label": "345"
    }
  },
  {
    "page_content": "ptg16105617\n346 CHAPTER 12. REFLECTION\nThel oops f or s tr uctsa nd m aps m ustp arse a (key value)su blist o ne achi terat ion. F or\nst ruc ts,thek ey isas ymboli dentifyingt he ﬁeld. A nalogou sto the cas efora rrays, weo bt ain\nthee xist ing v ar iable for t he s tr uct ﬁeldu sing FieldByName andm akear ec ursivec al l to\npopu latei t. F or maps, the key may beo fa ny typ e,a nd analogou sto the cas efors lices, wec re-\natean ew var iable,r ec ursivelyp opu latei t, and ﬁna llyi ns ert t he newk ey/value pair in to the\nmap.\nfunc readList(lex *lexer, v reflect.Value) {\nswitch v.Kind() {\ncase reflect.Array: // (item ...)\nfor i := 0; !endList(lex); i++ {\nread(lex, v.Index(i))\n}\ncase reflect.Slice: // (item ...)\nfor !endList(lex) {\nitem := reflect.New(v.Type().Elem()).Elem()\nread(lex, item)\nv.Set(reflect.Append(v, item))\n}\ncase reflect.Struct: // ((name value) ...)\nfor !endList(lex) {\nlex.consume('(')\nif lex.token != scanner.Ident {\npanic(fmt.Sprintf(\"got token %q, want field name\", lex.text()))\n}\nname := lex.text()\nlex.next()\nread(lex, v.FieldByName(name))\nlex.consume(')')\n}\ncase reflect.Map: // ((key value) ...)\nv.Set(reflect.MakeMap(v.Type()))\nfor !endList(lex) {\nlex.consume('(')\nkey := reflect.New(v.Type().Key()).Elem()\nread(lex, key)\nvalue := reflect.New(v.Type().Elem()).Elem()\nread(lex, value)\nv.SetMapIndex(key, value)\nlex.consume(')')\n}\ndefault:\npanic(fmt.Sprintf(\"cannot decode list into %v\", v.Type()))\n}\n}\nThe Go Programming Language",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 364,
      "page_label": "346"
    }
  },
  {
    "page_content": "v.SetMapIndex(key, value)\nlex.consume(')')\n}\ndefault:\npanic(fmt.Sprintf(\"cannot decode list into %v\", v.Type()))\n}\n}\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 364,
      "page_label": "346"
    }
  },
  {
    "page_content": "ptg16105617\nE\nXAMPLE: DESECTION 12.6. CODING S-EXPRESSIONS 347\nfunc endList(lex *lexer) bool {\nswitch lex.token {\ncase scanner.EOF:\npanic(\"end of file\")\ncase ')':\nreturn true\n}\nreturn false\n}\nFinal \nly, wew rap upt he parseri na ne xp orted function Unmarshal,s hown \nbelow,t hath ides\nsome oft he rough edges oft he imp lementation.E rror sencountere dduring parsingr esulti na\npanic, so Unmarshal us \nesad efer red cal lto recov erf ro mthep anic (§5.10) an dr etur n an erro r\nmess age ins tead.\n// Unmarshal parses S-expression data and populates the variable\n// whose address is in the non-nil pointer out.\nfunc Unmarshal(data []byte, out interface{}) (err error) {\nlex := &lexer{scan: scanner.Scanner{Mode: scanner.GoTokens}}\nlex.scan.Init(bytes.NewReader(data))\nlex.next() // get the first token\ndefer func() {\n// NOTE: this is not an example of ideal error handling.\nif x := recover(); x != nil {\nerr = fmt.Errorf(\"error at %s: %v\", lex.scan.Position, x)\n}\n}()\nread(lex, reflect.ValueOf(out).Elem())\nreturn nil\n}\nAp ro \nduc tion-quality imp lementation shouldn ever panic f or any inp uta nd shouldr ep ort an\ninfor mat ive e rror for e very m ishap, p erhaps w it h al inen umbero ro ffset. N on etheless, we\nhope thise xamplec onve yss om eide aof what’sh appeningu nder the hood oft he packages like\nencoding/json,a nd \nhowy ou can use reﬂec tion top opu lated at ast ruc tures.\nExercis e 12.8: The sexpr.Unmarshal f\nunc tion, li\nke json.Unmarshal, r\nequires t\nhe co\nmplete\ninputi",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 365,
      "page_label": "347"
    }
  },
  {
    "page_content": "Exercis e 12.8: The sexpr.Unmarshal f\nunc tion, li\nke json.Unmarshal, r\nequires t\nhe co\nmplete\ninputi\nnab ytes lice bef orei tc an beg in de coding. D eﬁne a sexpr.Decoder type \nthat, li ke\njson.Decoder,a llowsas equence \nofv alues t ob ed ecoded f ro m an io.Reader C .hange\nsexpr.Unmarshalto \nuse thisn ew typ e.\nExercis e 12.9: Wr ite a to ken-b ased A PI f or d ecodingS -expressions,f ol low ing t he s ty leo f\nxml.Decoder (§7.14). \nYou will need ﬁve t yp es of tokens: Symbol, String, Int, StartList,\nan\nd EndList.\nExercis \ne 12.10: Extend sexpr.Unmarshal to \nhandlet he b oole ans, ﬂoating-p ointn umbers,\nandi nt erfaces enco dedb yy ours olut ion toE xercis e12.3. (Hint: t od ecodei nt erfaces, you will\nne e dam apping fro mthen ameo fe achs up por ted typ eto its reflect.Type.)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 365,
      "page_label": "347"
    }
  },
  {
    "page_content": "ptg16105617\n348 CHAPTER 12. REFLECTION\n12.7. Ac cessing Struct Field Tags\nIn Sec tion 4.5 weu seds tr uct ﬁel dtags to modif ytheJ SONe ncodingo fG os tr uct values. The\njsonﬁeldt ag lets usc ho ose alt ernat ive ﬁeldn ames ands up presst he out put of emp tyﬁ elds.I n\nthis sec tion,w e’ll see how toa ccess ﬁeldt ags usingr eﬂec tion.\nIn a web ser ver,t he ﬁrs tthingm ostH TTPh andler functions doi se xt ractt he requestp arame-\nters int olo cal variables. We ’ll deﬁne a u tilit yfunc tion, params.Unpack,t hatu sess tr uct ﬁeld\ntags tom akew riting HTTPh andlers( §7.7) m orec onvenient.\nFirst,w e’ll showh ow it’su sed. T he search func tionb elow isa nH TTPh andler.I td eﬁnesa\nvar iable cal le ddata of a na nony mou s st ruc t type w hose ﬁelds c or respond t ot he H TTP\nre questp arameters. Th es tr uct’sﬁ eldt ags specif ythep arameter names, whicha re often short\nandc rypt ics ince space isp re cious inaU RL. The Unpack func tionp opu lates the str uct fro m\nther equests ot hatt he parametersc an bea ccessedc onvenientlya nd wit han appropriatet yp e.\ngopl.io/ch12/search\nimport \"gopl.io/ch12/params\"\n// search implements the /search URL endpoint.\nfunc search(resp http.ResponseWriter, req *http.Request) {\nvar data struct {\nLabels []string `http:\"l\"`\nMaxResults int `http:\"max\"`\nExact bool `http:\"x\"`\n}\ndata.MaxResults = 10 // set default\nif err := params.Unpack(req, &data); err != nil {\nhttp.Error(resp, err.Error(), http.StatusBadRequest) // 400\nreturn\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 366,
      "page_label": "348"
    }
  },
  {
    "page_content": "if err := params.Unpack(req, &data); err != nil {\nhttp.Error(resp, err.Error(), http.StatusBadRequest) // 400\nreturn\n}\n// ...rest of handler...\nfmt.Fprintf(resp, \"Search: %+v\\n\", data)\n}\nThe Unpack func tionb elow doest hree t hings. Fir st,i tc al ls req.ParseForm() to p arse t he\nre quest. Thereafter, req.Form cont ainsa ll the p arameters, regardlesso fw hether t he H TTP\nclientu sedt he GET ort he POSTr equestm et hod.\nNext, Unpack builds a ma ppingf ro mthe effec tiv ename ofe ach ﬁel dt ot he var iable for that\nﬁeld. T he effec tive namem ay differf ro mthea ctualn amei ft he ﬁeldh as a tag . The Field\nmethod of reflect.Type returnsa reflect.StructField that provides infor mat iona bout\nthet yp e of e ach ﬁel ds ucha si ts nam e, t yp e,a nd o pt ion alt ag . The Tag ﬁeldi sa\nreflect.StructTag,w hichi sas tr ing typ ethat provides a Get method top arse and ext ract\nthes ubst ringf or a par tic ulark ey,s ucha s http:\"...\"in thisc as e.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 366,
      "page_label": "348"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.7. ACCESSING STRUCT FIELD TAGS 349\ngopl.io/ch12/params\n// Unpack populates the fields of the struct pointed to by ptr\n// from the HTTP request parameters in req.\nfunc Unpack(req *http.Request, ptr interface{}) error {\nif err := req.ParseForm(); err != nil {\nreturn err\n}\n// Build map of fields keyed by effective name.\nfields := make(map[string]reflect.Value)\nv: =reflect.ValueOf(ptr).Elem() // the struct variable\nfor i := 0; i < v.NumField(); i++ {\nfieldInfo := v.Type().Field(i) // a reflect.StructField\ntag := fieldInfo.Tag// a reflect.StructTag\nname := tag.Get(\"http\")\nif name == \"\" {\nname = strings.ToLower(fieldInfo.Name)\n}\nfields[name] = v.Field(i)\n}\n// Update struct field for each parameter in the request.\nfor name, values := range req.Form {\nf: =f ields[name]\nif !f.IsValid() {\ncontinue // ignore unrecognized HTTP parameters\n}\nfor _, value := range values {\nif f.Kind() == reflect.Slice {\nelem := reflect.New(f.Type().Elem()).Elem()\nif err := populate(elem, value); err != nil {\nreturn fmt.Errorf(\"%s: %v\", name, err)\n}\nf.Set(reflect.Append(f, elem))\n}e lse {\nif err := populate(f, value); err != nil {\nreturn fmt.Errorf(\"%s: %v\", name, err)\n}\n}\n}\n}\nreturn nil\n}\nFinal ly, Unpack it erates overt he name/value pairso ft he HTTPp arametersa nd updates the\ncorrespondings tr uct ﬁelds.R ecal l that t he s amep arameter nam em ay ap pear m oret han\non ce. I ft hish appens,a nd the ﬁeldi sas lice,t hena ll the values oft hatp arameter area cc umu-",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 367,
      "page_label": "349"
    }
  },
  {
    "page_content": "on ce. I ft hish appens,a nd the ﬁeldi sas lice,t hena ll the values oft hatp arameter area cc umu-\nlate dinto the slice.O ther wis e,t he ﬁeldi sr ep eatedlyo verwritt ens ot hato nlyt he lastv alue\nhasa ny effec t.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 367,
      "page_label": "349"
    }
  },
  {
    "page_content": "ptg16105617\n350 CHAPTER 12. REFLECTION\nThe populate func tiont akes careo fs etting a singleﬁ eld v(oras inglee lemento fas lice ﬁeld)\nfrom a p arameter value .F or n ow,i ts up por tso nlys tr ings, sig ne d integers,a nd b oole ans.\nSu pportingo ther typ esis lef t as an exercise.\nfunc populate(v reflect.Value, value string) error {\nswitch v.Kind() {\ncase reflect.String:\nv.SetString(value)\ncase reflect.Int:\ni, err := strconv.ParseInt(value, 10, 64)\nif err != nil {\nreturn err\n}\nv.SetInt(i)\ncase reflect.Bool:\nb, err := strconv.ParseBool(value)\nif err != nil {\nreturn err\n}\nv.SetBool(b)\ndefault:\nreturn fmt.Errorf(\"unsupported kind %s\", v.Type())\n}\nreturn nil\n}\nIf wea dd the serverhand ler toaw eb ser ver,t hism ig htb eat ypic alsession:\n$g ob uild gopl.io/ch12/search\n$. /search &\n$. /fetch 'http://localhost:12345/search'\nSearch: {Labels:[] MaxResults:10 Exact:false}\n$./fetch 'http://localhost:12345/search?l=golang&l=programming'\nSearch: {Labels:[golang programming] MaxResults:10 Exact:false}\n$./fetch 'http://localhost:12345/search?l=golang&l=programming&max=100'\nSearch: {Labels:[golang programming] MaxResults:100 Exact:false}\n$./fetch 'http://localhost:12345/search?x=true&l=golang&l=programming'\nSearch: {Labels:[golang programming] MaxResults:10 Exact:true}\n$./fetch 'http://localhost:12345/search?q=hello&x=123'\nx: strconv.ParseBool: parsing \"123\": invalid syntax\n$./fetch 'http://localhost:12345/search?q=hello&max=lots'\nmax: strconv.ParseInt: parsing \"lots\": invalid syntax",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 368,
      "page_label": "350"
    }
  },
  {
    "page_content": "$./fetch 'http://localhost:12345/search?q=hello&max=lots'\nmax: strconv.ParseInt: parsing \"lots\": invalid syntax\nExercis e 12.11: Wr ite t he c or responding Pack func tion. G iven a s tr uct v alue, Pack should\nreturn a URL incorporat ingt he parameter values fro mthes tr uct.\nExercis e 12.12:Extend the ﬁeldt ag not ation toe xpress parameter validity requirements. F or\nexample, a str ing mig htn eed tob eav alid emai l addresso rc re dit-c ardn umber, and ani nt eger\nmig htn eed tob eav alid US ZIP code.M odif yUnpackto checkt hese requirements.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 368,
      "page_label": "350"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 12.8. DISPLAYING THE METHODS OF A TYPE 351\nExercis e 12.13: Mo dif y theS -expressione ncoder (§12.4) an dd ecoder (§12.6) s ot hatt he y\nhonort he sexpr:\"...\"ﬁeldt ag in a similarm anner to encoding/json(§4.5).\n12.8. Displaying the M ethods ofaT ype\nOurﬁ nale xampleo fr eﬂec tion uses reflect.Type to print the typ eof ana rbit rar y value and\nenumeratei ts met hods:\ngopl.io/ch12/methods\n// Print prints the method set of the value x.\nfunc Print(x interface{}) {\nv: =r eflect.ValueOf(x)\nt: =v .Type()\nfmt.Printf(\"type %s\\n\", t)\nfor i := 0; i < v.NumMethod(); i++ {\nmethType := v.Method(i).Type()\nfmt.Printf(\"func (%s) %s%s\\n\", t, t.Method(i).Name,\nstrings.TrimPrefix(methType.String(), \"func\"))\n}\n}\nBoth reflect.Type and reflect.Value have a m et hod c al le dMethod.E ach t.Method(i)\ncall retur nsa ni ns tance of reflect.Method,as tr uct typ ethat descr ibest he namea nd typ eof\nas inglem et hod.E ach v.Method(i) call r etur nsa reflect.Value repres enting a m et hod\nvalue (§6.4), t hati s, a met hod boundt oi ts receiver. U singt he reflect.Value.Call method\n(w hichw ed on’th aves pace tos howh ere), it’sp ossiblet oc al lValueso fk ind Funcli ket hiso ne,\nbutt hisp rogram needso nlyi ts Type.\nHere are the methodsb elon gingt ot wo typ es,time.Durationand *strings.Replacer:\nmethods.Print(time.Hour)\n// Output:\n// type time.Duration\n// func (time.Duration) Hours() float64\n// func (time.Duration) Minutes() float64\n// func (time.Duration) Nanoseconds() int64",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 369,
      "page_label": "351"
    }
  },
  {
    "page_content": "// type time.Duration\n// func (time.Duration) Hours() float64\n// func (time.Duration) Minutes() float64\n// func (time.Duration) Nanoseconds() int64\n// func (time.Duration) Seconds() float64\n// func (time.Duration) String() string\nmethods.Print(new(strings.Replacer))\n// Output:\n// type *strings.Replacer\n// func (*strings.Replacer) Replace(string) string\n// func (*strings.Replacer) WriteString(io.Writer, string) (int, error)\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 369,
      "page_label": "351"
    }
  },
  {
    "page_content": "ptg16105617\n352 CHAPTER 12. REFLECTION\n12.9. A Word ofC aution\nTherei sal ot moret ot he reﬂec tion API thanw eh aves pace tos how, but the pre cedinge xam-\nples givea ni de aof whati sp ossible. R eﬂec tion isap ow erfula nd expressivet ool, but it should\nbe usedw it hcare ,fort hree reasons.\nThe ﬁrs t re asoni st hatr eﬂec tion-b ased c odec an b ef rag i le.F or e very m istake t hatw ou ld\ncaus eac ompi ler tor ep ort a typ e er ror,t here isac or respondingw ay tom isus ereﬂec tion,b ut\nwhereast he compi ler rep ortst he mistake atb ui ldtime,ar eﬂec tion error isr ep orted dur ing\nexec ution a sap anic, possi bly l on g af ter the p rogram was w ritt eno re venl on g af ter ith as\nst arted running.\nIf t he readList func tion( §12.6), f or e xample, s houldr eadas tr ing f ro m thei np utw hi le\npopu lat ingav ar iable oft yp e int,t he c al l to reflect.Value.SetString wi l lpanic. Most\nprog ramst hatu se reﬂec tion haves imi lar hazards,a nd con siderable carei sr equired tok eep\ntracko ft he typ e,a ddressabi lit y,a nd settabi lit y of each reflect.Value.\nTheb estw ay toa void thisf rag i lity ist oe ns ure thatt he use ofr eﬂec tion isf ullye nc apsulated\nwithin yourp ackagea nd,i fp ossible, avoid reflect.Value in favor of s peciﬁct yp es in your\npackage’sA PI,t or estr ict i np uts t ol egal values. I ft hisi sn ot p ossible, p er for m addition al\ndy namic che cks beforee achr isky operat ion. Asa ne xamplef ro mthes tand ard librar y,w hen",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 370,
      "page_label": "352"
    }
  },
  {
    "page_content": "dy namic che cks beforee achr isky operat ion. Asa ne xamplef ro mthes tand ard librar y,w hen\nfmt.Printf applies a verb to an ina ppro p riateo perand, itd oesn ot p anic mysteriou sly but\npr ints an infor mat ive error message . Thep rogram still has a bug ,buti ti se asier tod iagnos e.\nfmt.Printf(\"%d %s\\n\", \"hello\", 42) // \"%!d(string=hello) %!s(int=42)\"\nReﬂec tion als o re duces t he s afet y anda cc uracyo fa ut omated refac tor ing and a nalysist ools,\nbecaus ethey can’td eter mineo rr elyo nt yp e infor mat ion.\nThes econ dre asont oa void reﬂec tion ist hats ince typ esservea saf or m of documentation and\ntheo perat ions ofr eﬂec tion cannot bes ubjec tto statict yp ech eck ing ,he avi lyr eﬂec tive codei s\nof ten hardt ou nderst and.A lways caref ullyd ocumentt he exp ected typ es ando ther invar iants\nof functions thata ccepta n interface{}or a reflect.Value.\nThet hirdr easoni st hatr eﬂec tion-b ased f unctions m ay b eo ne ort wo orderso fm ag nitude\nslow ert hanc odes peci alizedf or a par tic ulart yp e.I nat ypic alprog ram,them aj ority off unc-\ntion saren ot relevantt ot he overal lperfor mance,s oi t’sﬁ ne tou se reﬂec tion wheni tm akes the\nprog ramclearer. Testing isap ar tic ularlyg ood ﬁtf or reﬂec tion since mostt ests use small dat a\nsets. B ut for functions ont he criticalp at h,reﬂec tion isb esta voide d.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 370,
      "page_label": "352"
    }
  },
  {
    "page_content": "ptg16105617\n13\nLo w-Level Pro gramming\nThed esig nof Gog uarante esan umbero fs afet yprop erties thatl imitt he ways in whichaG o\nprog ramcan ‘‘go wro ng.’’During compi lat ion, typ ech eck ing detec tsm osta tt emp tst oa pp l y\nan operat iont oav alue thati si nappro priatef or itst yp e,f or ins tance,s ubtrac tingo ne str ing\nfrom another.S tr ict rules for typ e conv ersions pre ventd irec taccesst ot he int ernalso fb ui lt-in\ntypesl ikes tr ings, maps, slices, andc hannel s.\nFo r er ror s that cann ot b ed etec ted statically, s ucha so ut-of-b ounds a rray acces seso rn il\npointerd ereferences, dynamic che cks ensure thatt he program immediate lyt er minates wit h\nan inf or mat ive e rror w hene ver a forbidden o perat iono cc urs. Aut omat ic memory m anage-\nment (garb agec ol lec tion)e liminates ‘‘us eaf ter fre e’’bugs, as wel las mostm emor yle aks.\nMany imp lementation det ails are inaccessiblet oG op rograms. Ther ei sn ow ay tod is cov er\nthem emor ylayout of a na ggregatet yp e li kea s tr uct,o rt he machinec odef or a f unction, or\nthei dentity o ft he o perat ings ystemt hreado nw hicht he c ur rentg oroutine i sr unning.\nIn deed,t he Gos ch edu ler fre ely mov esg oroutinesf ro mon ethre adt oa nother.A pointeri den-\ntiﬁes a variablew it houtr evealingt he var iable’sn umer ic address. Addressesm ay change ast he\ngarb agec ol lec tor mov esv ar iables; point ers are transp arent lyu pdated.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 371,
      "page_label": "353"
    }
  },
  {
    "page_content": "garb agec ol lec tor mov esv ar iables; point ers are transp arent lyu pdated.\nTogether,t hese featuresm akeG op rograms, especi ally fai lingo nes, morep re dic table andl ess\nmyster ious thanp rogramsi nC ,t he quintess ent ial low-le vel langu age. B yh idingt he under-\nly ing det ails,t he yalso makeG op rogramsh ig hly por table,s ince the langu ages emantics are\nlarge lyi ndep endento fa ny par tic ularc ompi ler,o perat ings ystem, orC PU archit ecture. ( No t\nentire lyi ndep endent: som edet ails l eakt hrough,s ucha st he words ize oft he pro cessor, the\norder ofe valuation of cer tain expressions,a nd the set ofi mp lementation restr ictions imp osed\nby the compi ler.)\nOccasionally, wem ay cho ose tof or feits om e of these helpf ulg uarante est oa chie vet he hig hest\npossible per for mance,t oi nt ero peratew it hlibrar ies wr itt eni no ther langu ages, ort oi mp le-\nment a functiont hatc annot bee xpress ed in pureG o.\n353\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 371,
      "page_label": "353"
    }
  },
  {
    "page_content": "ptg16105617\n354 CHAPTER 13. L OW-LEVEL PROGRAMMING\nIn thisc hapt er, we’ll see how the unsafe packagel ets uss tepo utside the usu alr ules, andh ow\nto use the cgoto olt oc re ate Gob indings for C librar ies ando perat ings ystemc al ls.\nThea ppro ach esd es crib edi nt hisc hapt ers houldn ot b eu sedf rivo lou sly.W it houtc aref ul\nattent ion tod et ail, the ymayc ause the kinds ofu np redic table,i ns crutable, non-lo cal failures\nwith whichCp rogrammersa re unhappi lya cquainte d. Us eof unsafealso voids Go’sw ar ranty\nof compati bi lit ywith fu ture re le ases, since,w hether in tended o ri nadver tent, iti se asy to\ndep endo nu ns peciﬁed imp lementation det ails thatm ay change unexp ectedly.\nThe unsafe packagei sr at her mag ical.A lt hough i ta pp earst ob ear egu lar packagea nd i s\nimported int he usu alw ay,i ti sa ctuallyi mp lemente dby the compi ler.I tp rovides accesst oa\nnumb ero fb ui lt-in langu agef eaturest hata re n ot o rdinar ily a vai lable because t he y exp ose\ndet ails ofG o’sm emor ylayout.P resent ing these featuresa sas ep aratep ackagem akes the rare\noccasions onw hicht he yaren eeded morec on spicuou s.A ls o,s om eenviro nmentsm ay restr ict\ntheu se oft he unsafepackagef or sec urity reasons.\nPackage unsafe is used extensive lyw it hin low-le vel packages like runtime, os, syscall,a nd\nnet that interac twith theo perat ings ystem, but isa lmostn ever needed byo rdinar yprog rams.\n13.1. unsafe.Sizeof, Alignof,a nd Offsetof",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 372,
      "page_label": "354"
    }
  },
  {
    "page_content": "net that interac twith theo perat ings ystem, but isa lmostn ever needed byo rdinar yprog rams.\n13.1. unsafe.Sizeof, Alignof,a nd Offsetof\nThe unsafe.Sizeof func tionr ep ortst he s ize in bytes o ft he r epresent ation of it so perand,\nwhichm ay bea ne xpressiono fa ny typ e;thee xpressioni sn ot evaluate d. Ac al lto Sizeof is a\ncons tante xpressiono ft yp euintptr,s ot he resultm ay beu seda st he dimensiono fa na rray\ntype,o rt oc ompute other cons tants.\nimport \"unsafe\"\nfmt.Println(unsafe.Sizeof(float64(0))) // \"8\"\nSizeofreportso nlyt he size oft he ﬁxe dpart ofe achd at ast ruc ture, liket he point era nd lengt h\nof a s tr ing , butn ot i ndirec t partsl iket he c ontentso ft he s tr ing . Typicals izes f or a ll n on-\nag gregateG ot yp es ares hown b elow,t houg h thee xac t sizes may var yb yt oolchain. F or\nportabilit y,w e’ve given the sizes ofr eference typ es (ort yp es cont ainingr eferences) in ter mso f\nword s,w here a wordi s4b ytes ona3 2-bit platfor mand8b ytes ona6 4-bit platfor m.\nComp uters l oada nd s tore v alues f ro m memory m oste fﬁcientlyw hent hose v alues are\nprop erly alig ned.F or example, the addresso fav alue ofat wo-bytet yp esuch as int16 should\nbe a ne venn umber, the addresso faf our-byte value sucha sa rune shouldb eam ultipleo f\nfour,a nd the a ddresso fa ne ig ht-bytev alue suc ha sa float64, uint64,o r6 4-bit poi nt er\nshouldb eam ultipleo fe ig ht. Alig nmentr equirements ofh ig her multiples areu nu sual, even",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 372,
      "page_label": "354"
    }
  },
  {
    "page_content": "shouldb eam ultipleo fe ig ht. Alig nmentr equirements ofh ig her multiples areu nu sual, even\nforl argerd at atypess ucha s complex128.\nFo rthis reason, the size ofav alue of an aggregatet yp e (a str uct ora rray) is at least the sum of\nthes izes ofi ts ﬁelds ore lem ents b ut may beg re aterd ue tot he presenceo f ‘‘holes.’’Ho les are\nunus eds paces addedb yt he compi ler toe ns ure thatt he fol low ing ﬁeldo re lementi sp ro perly\nalig ned rel ative tot he start oft he str uct ora rray.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 372,
      "page_label": "354"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 13.1. UNSAFE.SIZEOF ,A LIGNOF,A ND OFFSETOF 355\nTy peS iz e\nbool 1b yte\nintN, uintN, floatN, complexNN /8b ytes (for example, float64is 8 bytes)\nint, uint, uintptr 1w ord\n*T 1w ord\nstring 2w ords (data,l en)\n[]T 3w ords (data,l en, cap)\nmap 1w ord\nfunc 1w ord\nchan 1w ord\ninterface 2w ords (type,v alue)\nThel angu ages peciﬁcation doesn ot guarante ethat the order in which ﬁelds are declare dis the\norder in whicht he yarel aid out inm emor y,s oi nt he ory a compi ler isf re eto rearrange them,\nalthough asw ew rite this, non edo.I ft he typ esof a str uct’sﬁ elds are ofd if ferents izes, itm ay\nbe mores pace-efﬁcientt od eclare the ﬁelds ina no rder thatp acks thema st ig htlya sp ossible.\nThet hree str uctsb elow havet he same ﬁelds,b ut the ﬁrs tre quires upt o5 0% morem emor y\nthan the other two:\n// 64-bit 32-bit\nstruct{ bool; float64; int16 } // 3 words 4w ords\nstruct{ float64; int16; bool } // 2 words 3w ords\nstruct{ bool; int16; float64 } // 2 words 3w ords\nThed et ails oft he alig nmenta lgor it hma re beyon dthes cope oft hisb ook, andi t’sc er tain lyn ot\nworthw or rying about every str uct,b ut efﬁcientp acking may makef re quentlya llocated dat a\nst ruc tures morec ompact and therefore faster.\nThe unsafe.Alignof func tionr ep ortst he r equired a lig nmento fi ts argument’st yp e.L ike\nSizeof,i tm ay b ea pp lie d to a ne xpressiono fa ny typ e,a nd i ty ieldsac on stant.T ypic ally,",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 373,
      "page_label": "355"
    }
  },
  {
    "page_content": "Sizeof,i tm ay b ea pp lie d to a ne xpressiono fa ny typ e,a nd i ty ieldsac on stant.T ypic ally,\nboole an andn umer ictypesa re alig ned tot heir size (upt oam aximum of8b ytes) anda ll other\ntypesa re word-alig ned.\nThe unsafe.Offsetof func tion, w hose o perandm ustb eaﬁel ds elec tor x.f,c omputest he\nof fseto fﬁ eld fre lat ive tot he start ofi ts enclosings tr uct x,a ccounting for holes, if any.\nFigure1 3.1 s hows a s tr uct v ar iable x andi ts mem or y layout on t ypic al 32- and6 4-bit G o\nimplementation s.T he gray reg ions are holes.\nvar x struct {\nab ool\nbi nt16\nc[ ]int\n}\nThet able below shows the results ofa pp l yingt he three unsafefunc tions to xitself andt oe ach\nof itst hree ﬁelds:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 373,
      "page_label": "355"
    }
  },
  {
    "page_content": "ptg16105617\n356 CHAPTER 13. L OW-LEVEL PROGRAMMING\nFigure 13.1. Ho les in a str uct.\nTypical 32-bit platform:\nSizeof(x) =1 6  A l i g n o f ( x )=4\nSizeof(x.a) = 1 Alignof(x.a) = 1 Offsetof(x.a) = 0\nSizeof(x.b) = 2 Alignof(x.b) = 2 Offsetof(x.b) = 2\nSizeof(x.c) = 12 Alignof(x.c) = 4 Offsetof(x.c) = 4\nTypical 64-bit platform:\nSizeof(x) = 32 Alignof(x) =8\nSizeof(x.a) = 1 Alignof(x.a) = 1 Offsetof(x.a) = 0\nSizeof(x.b) = 2 Alignof(x.b) = 2 Offsetof(x.b) = 2\nSizeof(x.c) = 24 Alignof(x.c) = 8 Offsetof(x.c) = 8\nDespit etheir names, these functions are not inf ac t unsafe ,andt he ymayb eh elpf ulf or under-\nst andingt he layouto fr aw memor yin a program wheno pt imizingf or space.\n13.2. unsafe.Pointer\nMost p oint ert yp es arew ritt en *T,m eaning ‘‘ap oint ert oav ar iable oft yp e T.’’The\nunsafe.Pointertype isas peci alkind ofp oint ert hatc an holdt he addresso fa ny var iable.O f\ncourse,w ec an’ti ndirec tthro ugh an unsafe.Pointer using *p becaus ewe don’tk noww hat\ntype t hate xpressions houldh ave. L ikeo rdinar y pointers, unsafe.Pointersa re comparable\nandm ay bec ompare dwith nil,w hichi st he zerov alue oft he typ e.\nAn ordinar y *T pointerm ay b ec onverted t oa n unsafe.Pointer,a nd an unsafe.Pointer\nmayb ec onverted back to a no rdinar ypointer, not necessarily oft he samet yp e*T.B yc on-\nvertinga *float64pointert oa *uint64,f or ins tance,w ec an insp ect the bit pattern ofaﬂoa t-\ning-p ointv ar iable:\npackage math",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 374,
      "page_label": "356"
    }
  },
  {
    "page_content": "vertinga *float64pointert oa *uint64,f or ins tance,w ec an insp ect the bit pattern ofaﬂoa t-\ning-p ointv ar iable:\npackage math\nfunc Float64bits(f float64) uint64 { return *(*uint64)(unsafe.Pointer(&f)) }\nfmt.Printf(\"%#016x\\n\", Float64bits(1.0)) // \"0x3ff0000000000000\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 374,
      "page_label": "356"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 13.2. UNSAFE.POINTER 357\nThrough the resulting point er, wec an updatet he bit pattern too.T hisi sh ar mlessf or a ﬂoat-\ning-p ointv ar iable since anyb it pattern isl egal,b ut ing eneral, unsafe.Pointer conv ersions\nlet usw rite arbit rar y values tom emor yandt hu ssu bvert the typ e system.\nAn unsafe.Pointer maya ls o be c onverted t oa uintptr that h olds t he p oint er’sn umer ic\nvalue,l etting usp er for mar ithmetico na ddresses. (R ecal lfrom Chapt er3 t hata uintptris an\nunsig ned int egerw ide enough tor epresent ana ddress.) Thi sc onversiont oo may bea pp lie d\nin reverse,b ut again, conv ertingf ro ma uintptr to an unsafe.Pointer mays ubvert the typ e\nsystems ince not all numbers are valid addresses.\nMany unsafe.Pointer values aret hu sintermediaries for convertingo rdinar ypointers to raw\nnumerica ddressesa nd backa gain. Th ee xampleb elow takes the addresso fv ar iablex,a dds\ntheo ffseto fi ts b ﬁeld, c onvertst he r esulting a ddresst o *int16,a nd t hrough t hatp oint er\nup dates x.b:\ngopl.io/ch13/unsafeptr\nvar x struct {\nab ool\nbi nt16\nc[ ]int\n}\n// equivalent to pb := &x.b\npb := (*int16)(unsafe.Pointer(\nuintptr(unsafe.Pointer(&x)) + unsafe.Offsetof(x.b)))\n*pb = 42\nfmt.Println(x.b) // \"42\"\nAlthough t he s yntaxi sc umbers ome—pe rh aps n ob ad thin gs ince t hese f eaturess houldb e\nus eds paring ly—do n ot bet empt edt oi nt roduce temporar y var iables oft yp euintptr to bre ak\nthel ines. Thi sc odei si ncor rec t:",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 375,
      "page_label": "357"
    }
  },
  {
    "page_content": "us eds paring ly—do n ot bet empt edt oi nt roduce temporar y var iables oft yp euintptr to bre ak\nthel ines. Thi sc odei si ncor rec t:\n// NOTE: subtly incorrect!\ntmp := uintptr(unsafe.Pointer(&x)) + unsafe.Offsetof(x.b)\npb := (*int16)(unsafe.Pointer(tmp))\n*pb = 42\nTher easoni sv er y su btle. S om e garb agec ol lec tor s move v ar iables around i nm emor y to\nre duce frag mentation or b ookkeeping . Garb agec ol lec tor s of thisk inda re known as moving\nGCs.W henavar iable i sm ov ed, all point ers thath oldt he addresso ft he old location mustb e\nup dated t op oint t ot he ne wo ne.F ro m thep ersp ectiveo ft he g arb agec ol lec tor,a n\nunsafe.Pointer is a p oint era nd t hu s itsv alue m ustc hange a st he v ar iable mov es, b ut a\nuintptr is jus ta n umbers oi ts value m ustn ot c hange . Thei ncor rec t co de ab ove hi d esa\npointer from t he g arb agec ol lec tor int he non-p ointerv ar iable tmp.B yt he t imet he s econ d\nst atement exe cut es, the var iablex couldh avem ov eda nd the numberi n tmp wouldn ol on g er\nbe t he a ddress &x.b.T he t hirds tatement c lobb ers a na rbit rar y memory l ocat ionw it h the\nvalue 42.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 375,
      "page_label": "357"
    }
  },
  {
    "page_content": "ptg16105617\n358 CHAPTER 13. L OW-LEVEL PROGRAMMING\nTherea re myr iadp at holog ical variation s on thist heme.A fter thiss tatement has exec ute d:\npT := uintptr(unsafe.Pointer(new(T))) // NOTE: wrong!\ntherea re n op oint ers t hatr efer t ot he v ar iable create d by new,s ot he g arb agec ol lec tor i s\nentitled t or ec yclei ts s toragew hent hiss tatement c ompletes, af terw hich pT cont ainst he\naddressw here the var iable was but isn ol on g er.\nNo c ur rentG oi mp lementation u sesam ov ing g arb agec ol lec tor ( though f ut ure i mp lemen-\ntation smig ht), but thisi sn or easonf or compl acency : currentv ersions of Go do m ov esome\nvar iables around inm emor y.R ecal l from S ec tion 5.2 t hatg oroutine stacksg row as needed.\nWh ent hish appens,a ll var iables ont he old stack may ber elocated toan ew,l argers tack,s ow e\ncannot relyo nt he numer ic value ofav ar iable’sa ddressr emainingu nchange dthro ughouti ts\nlifet ime.\nAt the timeo fw riting ,therei sl it tle cle ar guid ance onw hatG op rogrammersm ay relyu pon\naf ter an unsafe.Pointer to uintptr conv ersion( seeG oi ssue7 192), sow es tron gly recom-\nmend t haty ou a ssume the b arem inimum. T re ata ll uintptr values as if t he y cont ain t he\nfor mer addresso fav ar iable,a nd minimize the numbero fo perat ions bet weenc onvertinga n\nunsafe.Pointer to a uintptr andu singt hat uintptr.I no ur ﬁrs t examplea bove ,thet hree",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 376,
      "page_label": "358"
    }
  },
  {
    "page_content": "unsafe.Pointer to a uintptr andu singt hat uintptr.I no ur ﬁrs t examplea bove ,thet hree\nop erat ions—co nv ersiont oa uintptr,a ddition of t he ﬁeldo ffset, co nv ersionb ack—al l\nappeared wit hin a singlee xpressio n.\nWh enc al lingal ibrar yfunc tiont hatr etur nsa uintptr,s uch as those below fro mthe reflect\npackage, the results houldb ei mmediate lyc onverted toa n unsafe.Pointer to ens ure thati t\ncont inues top oint tot he samev ar iable.\npackage reflect\nfunc (Value) Pointer() uintptr\nfunc (Value) UnsafeAddr() uintptr\nfunc (Value) InterfaceData() [2]uintptr // (index 1)\n13.3. Example: Deep Equivalence\nThe DeepEqual func tionf ro mthe reflect packager ep ortsw hether two values are ‘‘de eply’’\nequal. DeepEqual comp aresb asic values as if b yt he bui lt-in== op erator ;forc omposite val-\nues, i tt raversest hemr ec ursively, comparing c or respondinge lements. B ecause i tw or ksf or\nanyp air ofv alues, eveno nest hata re not comparable wit h==,i tﬁ nd swidespreadu se int ests.\nThef ol low ing testu ses DeepEqualto compare two []stringvalues:\nfunc TestSplit(t *testing.T) {\ngot := strings.Split(\"a:b:c\", \":\")\nwant := []string{\"a\", \"b\", \"c\"};\nif !reflect.DeepEqual(got, want) { /* ... */ }\n}\nAlthough DeepEqual is convenient, its dist inc tions can seema rbit rar y.F or example, itd oesn’t\nconsider a nilm ap equ alt oan on-ni l empt ymap, nor a nil slice equ alt oan on-ni l empt yon e:\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 376,
      "page_label": "358"
    }
  },
  {
    "page_content": "The Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 376,
      "page_label": "358"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 13.3. EXAMPLE: DEEP EQUIVALENCE 359\nvar a, b []string = nil, []string{}\nfmt.Println(reflect.DeepEqual(a, b)) // \"false\"\nvar c, d map[string]int = nil, make(map[string]int)\nfmt.Println(reflect.DeepEqual(c, d)) // \"false\"\nIn thiss ec tion we’ll deﬁne a f unction Equal that comp aresa rbit rar y values. L ike DeepEqual,\nit comparess lices andm aps bas edo nt heir elements, but unlike DeepEqual,i tc on sidersan il\nslice (orm ap) equ alt oan on-ni l empt yon e.T he basic rec ursiono vert he arguments can be\ndone wit hreﬂec tion,u singas imi lar approach to the Displayprog ramwe saw in Sec tion 12.3.\nAs usu al, wed eﬁne anu nexp orted function, equal,f or the rec ursion. D on’tw or rya bout the\nseen parameter justy et. F or eachp air ofv alues x and y to bec ompare d, equal ch eckst hat\nboth (or neither) arev alid andc he cks thatt he yhave the samet yp e.T he resulto ft he function\nis deﬁne d as a set o fs witch cas esthat comp are two values oft he samet yp e.F or reasons of\nsp ace,w e’ve omitt eds everal cas es since the pattern shouldb ef ami liar byn ow.\ngopl.io/ch13/equal\nfunc equal(x, y reflect.Value, seen map[comparison]bool) bool {\nif !x.IsValid() || !y.IsValid() {\nreturn x.IsValid() == y.IsValid()\n}\nif x.Type() != y.Type() {\nreturn false\n}\n// ...cycle check omitted (shown later)...\nswitch x.Kind() {\ncase reflect.Bool:\nreturn x.Bool() == y.Bool()\ncase reflect.String:\nreturn x.String() == y.String()\n// ...numeric cases omitted for brevity...",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 377,
      "page_label": "359"
    }
  },
  {
    "page_content": "case reflect.Bool:\nreturn x.Bool() == y.Bool()\ncase reflect.String:\nreturn x.String() == y.String()\n// ...numeric cases omitted for brevity...\ncase reflect.Chan, reflect.UnsafePointer, reflect.Func:\nreturn x.Pointer() == y.Pointer()\ncase reflect.Ptr, reflect.Interface:\nreturn equal(x.Elem(), y.Elem(), seen)\ncase reflect.Array, reflect.Slice:\nif x.Len() != y.Len() {\nreturn false\n}\nfor i := 0; i < x.Len(); i++ {\nif !equal(x.Index(i), y.Index(i), seen) {\nreturn false\n}\n}\nreturn true\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 377,
      "page_label": "359"
    }
  },
  {
    "page_content": "ptg16105617\n360 CHAPTER 13. L OW-LEVEL PROGRAMMING\n// ...struct and map cases omitted for brevity...\n}\npanic(\"unreachable\")\n}\nAs u su al, w ed on’te xp oset he u se o fr eﬂec tion i nt he A PI,s ot he e xp orted f unction Equal\nmu stc al lreflect.ValueOfon itsa rguments:\n// Equal reports whether x and y are deeply equal.\nfunc Equal(x, y interface{}) bool {\nseen := make(map[comparison]bool)\nreturn equal(reflect.ValueOf(x), reflect.ValueOf(y), seen)\n}\ntype comparison struct {\nx, y unsafe.Pointer\ntr eflect.Type\n}\nTo ens ure thatt he algor it hmt er minates evenf or cyc lic dat a st ruc tures, itm ustr ecordw hich\npairso fv ar iables ith as already compare danda void comp aring themas econ dtime. Equal\nal locatesas et of comparisonst ruc ts,each holdingt he addresso ft wo var iables (represent eda s\nunsafe.Pointer values) andt he typ eof the comparison. W en eed tor ecordt he typ e in addi-\ntion tot he addressesb ecause dif ferentv ar iables can havet he samea ddress. F or example, if x\nand yareb ot har rays,xand x[0]have the samea ddress, as do yand y[0],a nd iti si mp ortant\nto distinguish whether weh avec ompare dxand yor x[0]and y[0].\nOnce equal hase st ablishe dthat its arguments hav et he samet yp e,a nd beforei te xe cut est he\nsw itch,i tc he cks whether iti sc omparing two var iables ith as already seena nd,i fs o, ter minates\nther ec ursion.\n// cycle check\nif x.CanAddr() && y.CanAddr() {\nxptr := unsafe.Pointer(x.UnsafeAddr())\nyptr := unsafe.Pointer(y.UnsafeAddr())",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 378,
      "page_label": "360"
    }
  },
  {
    "page_content": "ther ec ursion.\n// cycle check\nif x.CanAddr() && y.CanAddr() {\nxptr := unsafe.Pointer(x.UnsafeAddr())\nyptr := unsafe.Pointer(y.UnsafeAddr())\nif xptr == yptr {\nreturn true // identical references\n}\nc: =comparison{xptr, yptr, x.Type()}\nif seen[c] {\nreturn true // already seen\n}\nseen[c] = true\n}\nHere’so ur Equalfunc tion in action:\nfmt.Println(Equal([]int{1, 2, 3}, []int{1, 2, 3})) // \"true\"\nfmt.Println(Equal([]string{\"foo\"}, []string{\"bar\"})) // \"false\"\nfmt.Println(Equal([]string(nil), []string{}))// \"true\"\nfmt.Println(Equal(map[string]int(nil), map[string]int{})) // \"true\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 378,
      "page_label": "360"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 13.4. CALLING C CODE WITH CGO 361\nIt e venw or kso nc yc lic in puts simi lart ot he one t hatc ausedt he Display func tionf ro m\nSection1 2.3 tog et stuck inal oop:\n// Circular linked lists a -> b -> a and c -> c.\ntype link struct {\nvalue string\ntail *link\n}\na, b, c := &link{value: \"a\"}, &link{value: \"b\"}, &link{value: \"c\"}\na.tail, b.tail, c.tail = b, a, c\nfmt.Println(Equal(a, a)) // \"true\"\nfmt.Println(Equal(b, b)) // \"true\"\nfmt.Println(Equal(c, c)) // \"true\"\nfmt.Println(Equal(a, b)) // \"false\"\nfmt.Println(Equal(a, c)) // \"false\"\nExercis e 13.1:Deﬁne a deepc omparisonf unctiont hatc on sidersn umbers (of any typ e)equal\nif the ydif fer byl esst hano ne par t in a billion.\nExercis e 13.2:Wr ite a functiont hatr ep ortsw hether its argumenti sac yc lic dat ast ruc ture.\n13.4. Calling CC ode with cgo\nAG op rogram might need tou se a h ardwared riveri mp lemente din C, quer y an em bedde d\ndatabase imp lemente din C++, oru se some lineara lgebra routinesi mp lemente din For tran. C\nhasl on gbeen the lingu afranca ofp rogramming, som anyp ackages intended for widespread\nus eexp ort a C-comp atibleA PI,r egardlesso ft he langu ageo ft heir implementation.\nIn thiss ec tion,w e’ll bui ldas impled at a comp ressionp rogram thatu ses cgo,at oolt hatc re ates\nGo bindings for C functions.S ucht ools are cal le dforeign-f unc tioni nt erfaces (FFIs), and cgois\nnott he onlyo ne for Gop rograms. SWI G( swig.org)i sa nother ; it prov ides morec omplex",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 379,
      "page_label": "361"
    }
  },
  {
    "page_content": "nott he onlyo ne for Gop rograms. SWI G( swig.org)i sa nother ; it prov ides morec omplex\nfe aturesf or int egrat ingw it hC++ class es, but wew on’ts howi th ere.\nThe compress/... su btree oft he stand ard librar y prov ides comp ressors and decompressors\nforp opu lar comp ressiona lgor it hms,i ncludingL ZW (usedb yt he Unix compress command)\nandD EFL ATE (usedb yt he GNU gzip command). Th eA PIso ft hese packages varys lig htly\nin detai ls, but the yal lprov ide a wrapperf or an io.Writer that comp ressest he dat awr itt ent o\nit,a nd a wrapperf or an io.Readerthat decomp ressest he dat are adf ro mit.F or example:\npackage gzip // compress/gzip\nfunc NewWriter(w io.Writer) io.WriteCloser\nfunc NewReader(r io.Reader) (io.ReadCloser, error)\nTheb zip2 algor it hm, whichi sb as edo nt he elegantB ur rows-Whe eler transfor m,r unss lower\nthan gzipb ut yieldss ig niﬁcant lyb etterc ompression. The compress/bzip2 packagep rovides\nad ecompressorf or bzip2, but att he moment the packagep rovides noc ompressor. B ui lding\non efrom scratch isas ubst ant ial under tak ing, but there isaw el l-do cumente dandh ig h-per-\nformance open-s ource C implementation,t he libbzip2packagef ro mbzip.org.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 379,
      "page_label": "361"
    }
  },
  {
    "page_content": "ptg16105617\n362 CHAPTER 13. L OW-LEVEL PROGRAMMING\nIf the C librar y were small,w ew ou ldj ustp or t it top ureG o, and ifi ts per for mance weren ot\ncr iticalf or our pur pos es,we wouldb eb ettero ff inv oking a C p rogram as a h elpers ubprocess\nusingt he os/exec package. I t’sw heny ou need tou se a complex, per for mance-cr iticall ibrar y\nwith a nar row C API thati tm ay makes ense tow rap itu sing cgo.F or the resto ft hisc hapt er,\nwe’ll wor kthro ugh ane xample.\nFr omt he libbzip2 Cp ackage, wen eed the bz_stream st ruc ttype,w hichh olds the inp uta nd\noutput b uf fers, andt hree C f unctions: BZ2_bzCompressInit,w hicha llocates t he s tream’s\nbuffers; BZ2_bzCompress,w hichc ompressesd at afrom the inp utb uf fer tot he out put buf fer ;\nand BZ2_bzCompressEnd,w hichr eleasest he buf fers. (Don’tw or rya bout the mech anics oft he\nlibbzip2package; the pur pos eof thise xamplei st os howh ow the par ts ﬁttoget her.)\nWe’ll c al l the BZ2_bzCompressInit and BZ2_bzCompressEnd Cf unctions direc tly f ro mGo,\nbutf or BZ2_bzCompress,w e’ll deﬁne a w rapperf unctioni nC ,t os howh ow it’sd on e.T he C\nsource ﬁle below lives alongside the Goc ode in our package:\ngopl.io/ch13/bzip\n/* This file is gopl.io/ch13/bzip/bzip2.c, */\n/* a simple wrapper for libbzip2 suitable for cgo. */\n#include <bzlib.h>\nint bz2compress(bz_stream *s, int action,\nchar *in, unsigned *inlen, char *out, unsigned *outlen) {\ns->next_in = in;\ns->avail_in = *inlen;\ns->next_out = out;\ns->avail_out = *outlen;",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 380,
      "page_label": "362"
    }
  },
  {
    "page_content": "char *in, unsigned *inlen, char *out, unsigned *outlen) {\ns->next_in = in;\ns->avail_in = *inlen;\ns->next_out = out;\ns->avail_out = *outlen;\nint r = BZ2_bzCompress(s, action);\n*inlen -= s->avail_in;\n*outlen -= s->avail_out;\nreturn r;\n}\nNo wlet’st ur nto the Goc ode, the ﬁrs tpart ofw hichi ss hown below.T he import \"C\"de clara-\ntion iss peci al.T here isn op ackage C,b ut thisi mp ort causes go buildto preprocesst he ﬁle\nusingt he cgoto olb eforet he Goc ompi ler seesi t.\n// Package bzip provides a writer that uses bzip2 compression (bzip.org).\npackage bzip\n/*\n#cgo CFLAGS: -I/usr/include\n#cgo LDFLAGS: -L/usr/lib -lbz2\n#include <bzlib.h>\nint bz2compress(bz_stream *s, int action,\nchar *in, unsigned *inlen, char *out, unsigned *outlen);\n*/\nimport \"C\"\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 380,
      "page_label": "362"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 13.4. CALLING C CODE WITH CGO 363\nimport (\n\"io\"\n\"unsafe\"\n)\ntype writer struct {\nwi o.Writer // underlying output stream\nstream *C.bz_stream\noutbuf [64 * 1024]byte\n}\n// NewWriter returns a writer for bzip2-compressed streams.\nfunc NewWriter(out io.Writer) io.WriteCloser {\nconst (\nblockSize =9\nverbosity = 0\nworkFactor = 30\n)\nw: =&writer{w: out, stream: new(C.bz_stream)}\nC.BZ2_bzCompressInit(w.stream, blockSize, verbosity, workFactor)\nreturn w\n}\nDuring preprocessing, cgo generates a temporar ypackaget hatc ontainsG od eclarat ions cor-\nresp ondingt oa ll t he C f unctions a nd t yp es us edb yt he ﬁle,s ucha s C.bz_stream and\nC.BZ2_bzCompressInit.T he cgo to old is cov ers these typ esby inv oking the C compi ler in a\nsp eci al way ont he contentso ft he comment thatp re cedes the imp ort declarat ion.\nThec omment may also contain #cgo direc tivest hats pecif y ext raopt ion sto the C t oolchain.\nThe CFLAGS and LDFLAGS values cont ribut eext ra arguments tot he compi ler andl in ker com-\nmand sso thatt he ycanl ocatet he bzlib.h he ader ﬁle an dt he libbz2.a archivel ibrar y.T he\nexamplea ssumest hatt hese are ins tal le dbene ath /usr on yours ystem. Y ou may need toa lt er\nor deletet hese ﬂags for youri ns tal lat ion.\nNewWriter makesac al l to the C f unction BZ2_bzCompressInit to initialize t he buf fersf or\nthes tream. The writer type i ncludes anot her buf fer thatw ill b eu sedt od rain t he decom-\npressor’so ut put buf fer.",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 381,
      "page_label": "363"
    }
  },
  {
    "page_content": "thes tream. The writer type i ncludes anot her buf fer thatw ill b eu sedt od rain t he decom-\npressor’so ut put buf fer.\nThe Write method,s hown below,f eedst he uncompressed data to the compressor, cal lingt he\nfunc tion bz2compress in a lo op unt i lal lthed at ahasb eenc on sumed.O bs erve thatt he Go\nprog rammaya ccessC t yp es li kebz_stream, char,a nd uint,Cf unctions like bz2compress,\nande veno bj e ct-li keCpr epro cessorm acros sucha s BZ_RUN,a ll through the C.xnotation.T he\nC.uinttype isd istinc tfrom Go’s uinttype,e ven if bot hhave the samew idth.\nfunc (w *writer) Write(data []byte) (int, error) {\nif w.stream == nil {\npanic(\"closed\")\n}\nvar total int // uncompressed bytes written\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 381,
      "page_label": "363"
    }
  },
  {
    "page_content": "ptg16105617\n364 CHAPTER 13. L OW-LEVEL PROGRAMMING\nfor len(data) > 0 {\ninlen, outlen := C.uint(len(data)), C.uint(cap(w.outbuf))\nC.bz2compress(w.stream, C.BZ_RUN,\n(*C.char)(unsafe.Pointer(&data[0])), &inlen,\n(*C.char)(unsafe.Pointer(&w.outbuf)), &outlen)\ntotal += int(inlen)\ndata = data[inlen:]\nif _, err := w.w.Write(w.outbuf[:outlen]); err != nil {\nreturn total, err\n}\n}\nreturn total, nil\n}\nEach ite rat iono ft he l oopp asses bz2compress thea ddressa nd l engt h of t he r emaining\nportiono f data,a nd the a ddressa nd c ap acity o f w.outbuf.T he t wo l engt h var iables are\npass edb yt heir addresses, not their values, sot hatt he C functionc an updatet hemt oi ndic ate\nhowm uchu ncompressedd at a was cons ume dandh ow muchc ompressedd at a was pro duce d.\nEach chun k of compressedd at ais thenw ritt ent ot he underly ing io.Writer.\nThe Close method has a simi lars tr ucturet o Write,u singal oopt oﬂ usho ut any remaining\ncomp ressedd at afrom the stream’so ut put buf fer.\n// Close flushes the compressed data and closes the stream.\n// It does not close the underlying io.Writer.\nfunc (w *writer) Close() error {\nif w.stream == nil {\npanic(\"closed\")\n}\ndefer func() {\nC.BZ2_bzCompressEnd(w.stream)\nw.stream = nil\n}()\nfor {\ninlen, outlen := C.uint(0), C.uint(cap(w.outbuf))\nr: =C.bz2compress(w.stream, C.BZ_FINISH, nil, &inlen,\n(*C.char)(unsafe.Pointer(&w.outbuf)), &outlen)\nif _, err := w.w.Write(w.outbuf[:outlen]); err != nil {\nreturn err\n}\nif r == C.BZ_STREAM_END {\nreturn nil\n}\n}\n}",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 382,
      "page_label": "364"
    }
  },
  {
    "page_content": "if _, err := w.w.Write(w.outbuf[:outlen]); err != nil {\nreturn err\n}\nif r == C.BZ_STREAM_END {\nreturn nil\n}\n}\n}\nUp onc omplet ion, Close calls C.BZ2_bzCompressEnd to r elease t he s treamb uf fers, using\ndefer to ens ure thatt hish appens ona ll retur npaths. A tt hisp oint the w.stream pointeri s\nno lon g ers afet od ereference.T ob ed efensive , we set itt o nil,a nd add explicitn il che cks to\neach met hod,s ot hatt he program panics if t he userm istakenlyc al lsam et hod a fter Close.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 382,
      "page_label": "364"
    }
  },
  {
    "page_content": "ptg16105617\nSECTION 13.4. CALLING C CODE WITH CGO 365\nNo ton lyi s writernotc on cur rency-s afe, but con cur rentc al lst o Closeand Writecouldc ause\nthep rogram toc rash in C code. F ixingt hisi sE xercis e13.3.\nThep rogram below, bzipper,i sab zip2 comp ressorc ommand thatu seso ur new package. I t\nbehavesl iket he bzip2commandp resent onm anyU nix systems.\ngopl.io/ch13/bzipper\n// Bzipper reads input, bzip2-compresses it, and writes it out.\npackage main\nimport (\n\"io\"\n\"log\"\n\"os\"\n\"gopl.io/ch13/bzip\"\n)\nfunc main() {\nw: =b zip.NewWriter(os.Stdout)\nif _, err := io.Copy(w, os.Stdin); err != nil {\nlog.Fatalf(\"bzipper: %v\\n\", err)\n}\nif err := w.Close(); err != nil {\nlog.Fatalf(\"bzipper: close: %v\\n\", err)\n}\n}\nIn the sessionb elow,w eu se bzipper to compress /usr/share/dict/words,t he systemd ic-\ntion ary,f ro m938,848 bytes to3 35,405 bytes—ab o ut a thirdo fi ts originals ize—th en uncom-\npressi tw it hthes ystem bunzip2 command. T he SHA256 hashi st he sameb eforea nd after,\ngiving usc onﬁdence thatt he compressori sw or kingc or rec tly.( If you don’th ave sha256sum\non yours ystem, use yours olut ion toE xercis e4.2.)\n$g ob uild gopl.io/ch13/bzipper\n$w c- c</ usr/share/dict/words\n938848\n$sha256sum < /usr/share/dict/words\n126a4ef38493313edc50b86f90dfdaf7c59ec6c948451eac228f2f3a8ab1a6ed -\n$./bzipper < /usr/share/dict/words | wc -c\n335405\n$./bzipper < /usr/share/dict/words | bunzip2 | sha256sum\n126a4ef38493313edc50b86f90dfdaf7c59ec6c948451eac228f2f3a8ab1a6ed -",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 383,
      "page_label": "365"
    }
  },
  {
    "page_content": "335405\n$./bzipper < /usr/share/dict/words | bunzip2 | sha256sum\n126a4ef38493313edc50b86f90dfdaf7c59ec6c948451eac228f2f3a8ab1a6ed -\nWe’ve demon strated lin kingaCl ibrar y into a G op rogram. G oing int he other direc tion,i t’s\nalso possiblet oc ompi leaG op rogram as a s tatica rc hivet hatc an bel in ked int oaCp rogram\nor asas hare dlibrar ythat can b ed ynamic ally loade dby a C p rogram. We ’ve onlys cratch ed\nthes ur faceof cgo here ,andt here ism uchm oret os ay aboutm emor ymanagement,p oint ers,\ncallbacks, signalh andling, str ings, errno,ﬁ nalizers, andt he rel ation shipb et weeng oroutines\nando perat ings ystemt hreads,m ucho fi tv er y su btle. I np ar tic ular, the r ules f or cor rec tly\npassingp oint ers f ro m Go t oCo rv ice ver sa a re c omplex, f or r easons s imi lar tot hose w e\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 383,
      "page_label": "365"
    }
  },
  {
    "page_content": "ptg16105617\n366 CH\nAPTER 13. L OW-LEVEL PROGRAMMING\ndiscussedi\nnS ec tion 13.2, andn ot yet author it ative lys peciﬁed.F or fur therr eading, start wit h\nhttps://golang.org/cmd/cgo.\nExercis \ne 13.3: Us esync.Mutex to \nmake b\nzip.writer safe  f\nor co\nn cur rent u\nse  b\ny m\nultiple\ngoro \nutines.\nExercis e 13.4: Dependingo nCl ibrar ies hasi ts draw backs. P rovide an al ternat ive pure-G o\nimplementation of bzip.NewWriter that \nusest he os/exec packaget\nor un /bin/bzip2 as \na\nsu bprocess.\n13.\n5. Another Wor do fC aution\nWe \nended the pre vious chapt erw it haw ar ninga bout the dow nsides oft he reﬂec tion int erface.\nThat warninga pp lies wit heven moref orce tot he unsafepackaged es \ncrib ed in thisc hapt er.\nHigh-le vel langu ages insu latep rogramsa nd programmersn ot onlyf ro mthea rc ane speciﬁcs\nof indiv idu alc omputeri ns tructions ets, but fro mdep endence oni rrelevancies like where in\nmemory a v ar iable lives, how big a dat a type is, the det ails ofs tr ucturel ayout, andah osto f\not her implementation det ails.B ecause oft hati ns ulating layer,i t’sp ossiblet ow rite programs\nthat ares afea nd robusta nd thatw ill run ona ny operat ings ystemw it houtc hange .\nThe unsafe packagel ets \nprogrammersr each through the ins ulation tou se some cruci albut\not her wis einaccessiblef eature ,or perhaps toa chie veh ig her per for mance.T he costi su su ally\nto por tabilit yands afet y,s oo ne uses unsafe at \none’sp er il. O ur advice onh ow and whent o",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 384,
      "page_label": "366"
    }
  },
  {
    "page_content": "to por tabilit yands afet y,s oo ne uses unsafe at \none’sp er il. O ur advice onh ow and whent o\nus e unsafe paral \nlels K nu th’sc ommentso np remature o pt imizat ion, whichw eq uote d in\nSection1 1.5. Mos tp rogrammersw ill never need tou se unsafe at \nall. N ever theless, there will\noccasionallyb es it uat ions where som ecr iticalp ie ceof codec an beb estw ritt enu sing unsafe.\nIf \ncaref uls tudy and measurementi ndic ates that unsafe re \nallyi st he besta ppro ach,r estr ict it\nto ass mall a reg ion as possible, sot hatm osto ft he program iso bliv iou sto its use.\nFo r now, put t he l astt wo c hapt ers i nt he b acko fy ourm ind. W rite s om e su bst ant ial Go\nprog rams. Avoid reflectan\nd unsafe;c om \ne back to these chapt ers only if you must.\nMe anw hile, happy Gop rogramming. W eh op eyoue nj oyw riting Go as much as we do.\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 384,
      "page_label": "366"
    }
  },
  {
    "page_content": "ptg16105617\nIndex\n!,n egat iono perator 6 3\n%,r emainder operator 5 2, 166\n&&,s hort-circuit AND operator 6 3\n&,a ddress-ofo perator 2 4, 32, 94,\n158, 167\n&,i mp licit1 58, 167\n&^,A ND-NOT operator 5 3\n&^,b it-cle arop erator 5 3\n'quot ech arac ter 56\n*,i ndirec tion operator 2 4, 32\n++,i ncrement statement 5 ,3 7, 94\n+,s tr ing con catenat iono perator 5 ,\n65\n+,u nary operator 5 3\n+=, -=,e tc., assig nmento perator 5\n-,u nary operator 5 3\n--,d ecrement statement 5 ,3 7\n...argument1 39, 142\n...ar ray lengt h 82\n...parameter 91, 142, 143, 172\n...path 2 92, 299\n/*...*/comment5 ,2 5\n//comment5 ,2 5\n:=short var iable decl arat ion5 ,3 1,\n49\n<<,l ef tshif top erator 5 4\n==,c omparisono perator 4 0, 63\n>>,r ig hts hif top erator 5 4\n^,b it w ise complemento perator 5 3\n^,e xc lusiveO Ro perator 5 3\n_,b lank identiﬁer 7, 38, 95, 120, 126,\n287\n` backquot ech arac ter 66\n|in templ ate 1 13\n|,b it w ise ORo perator 1 66, 167\n||,s hort-circuit ORo perator 6 3\nAbst rac tSy ntaxN ot ation One\n(ASN.1) 107\nabstrac ttype 2 4, 171\nabstrac tion, premature 2 16, 316, 317\nad hoc poly mor phism 211\naddresso fl ocal variable3 2, 36\naddresso fs tr uct lit eral 103\naddressablee xpression1 59, 341\naddressablev alue 32\naddress-ofo perator & 24, 32, 94,\n158, 167\nag gregatet yp e 81, 99\nAlef programmingl angu agex iii\nalgor it hm\nbreadt h-ﬁrs tsearch 1 39, 239\ndepth-ﬁrs tsearch 1 36\nFibonacci 37, 218\nGCD 37\ninsertions or t 101\nLiss ajous 1 5\nslice rot ation 8 6\ntopolog ical sor t 136",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 385,
      "page_label": "367"
    }
  },
  {
    "page_content": "depth-ﬁrs tsearch 1 36\nFibonacci 37, 218\nGCD 37\ninsertions or t 101\nLiss ajous 1 5\nslice rot ation 8 6\ntopolog ical sor t 136\nali asing, point er3 3\nalig nment3 54\nal location\nhe ap3 6\nmemory 3 6, 71, 89, 169, 209, 322\nst ack 3 6\nanch ore lement, HTML 122\nAND operator &&,s hort-circuit 6 3\nAND-NOT operator &^ 53\nanimat ion, GIF 13\nanonymou s\nfunc tion2 2, 135, 236\nfunc tion, defer 146\nfunc tion, rec ursive1 37\nst ruc t ﬁeld1 04, 105, 106, 162\nAPI\nencoding 213, 340\ner ror 1 27, 152\npackage2 84, 296, 311, 333, 352\nrunt ime 3 24\nSQL2 11\nsystemc al l 196\ntemplate 115\ntoken-b ased decoder 213, 215,\n347\nAPLp rogrammingl angu agex iii\nappendbuilt-in function8 8, 90, 91\nappendIntexample8 8\nargument\n... 139, 142\ncommand-line4 ,1 8, 33, 43, 179,\n180, 290, 313\nfunc tion1 19\npointer3 3, 83\nslice 86\nar ithmetice xpressione valuator1 97\nar ray\ncomp arison8 3\nlengt h,... 82\nliteral 82, 84\ntype 8 1\nunderly ing 8 4, 88, 91, 187\nzerov alue 82\nASCII 56, 64, 66, 67, 305\nASN.1 (Abstrac tSy ntaxN ot ation\nOne) 107\nassemb l yline, cake2 34\nassertion\nfunc tion3 16\ninterface typ e 208, 210\n367\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 385,
      "page_label": "367"
    }
  },
  {
    "page_content": "ptg16105617\n368 INDEX\ntest 3 06\ntype 2 05, 211\nassig nabilit y 38, 175\nassig nabilit y,i nt erface 175\nassig nment\nimplicit3 8\nmu ltiple-value 37\nop erator +=, -=,e tc.5\nop erator s 36, 52\nst atement 5 , 7, 36, 52, 94, 173\ntuple3 1, 37\nasso ciativity,o perator 5 2\natomic operat ion2 64\nattack,H TMLi nj e ction 1 15\nattack,S QL inj e ction 2 11\nautoescapeexample1 17\nback-do or, package3 15\nback-off,e xp onent ial 130\nbackquot ech arac ter,` 66\nbankexamplep ackage2 58, 261, 263\nbare return 1 26\nbasenameexample7 2\nbehavior,u ndeﬁne d 260\nBenchmarkfunc tion3 02, 321\nbidirec tion alt ou nidirec tion al\nch annel conversion2 31\nbinary\nop erator s,t able of5 2\nsemaph ore 2 62\ntree 1 02\nbit vec tor 1 65\nbit-cle arop erator &^ 53\nbit-s etdata typ e 77\nbit w ise\ncomp lemento perator ^ 53\nop erator s,t able of5 3\nOR operator | 166, 167\nbl ack-b oxt est3 10\nbl ank identiﬁer _ 7, 38, 95, 120, 126,\n287\nbl ank imp ort 2 87\nblock\nﬁle 46\nlexic al 46, 120, 135, 141, 212\nlo cal 46\npackage4 6\nunivers e 46\nblocking proﬁle 324\nBlog ,Go x vi,3 26\nboilingexample2 9\nbooltype 6 3\nboole an\ncons tant, false 63\ncons tant, true 63\nzerov alue 30\nbreadthFirstfunc tion1 39\nbreadt h-ﬁrs tsearch algor it hm1 39,\n239\nbreakst atement 2 4, 46\nbreakst atement,l ab ele d 249\nbr ittlet est3 17\nbroadc ast2 51, 254, 276\nBrooks, Fre d xiv\nbtoifunc tion6 4\nbuffered channel 2 26, 231\nbufiopackage9\nbufio.NewReaderfunc tion9 8\nbufio.NewScannerfunc tion9\n(*bufio.Reader).ReadRune\nmethod 9 8\nbufio.Scannertype 9",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 386,
      "page_label": "368"
    }
  },
  {
    "page_content": "bufiopackage9\nbufio.NewReaderfunc tion9 8\nbufio.NewScannerfunc tion9\n(*bufio.Reader).ReadRune\nmethod 9 8\nbufio.Scannertype 9\n(*bufio.Scanner).Err method 9 7\n(*bufio.Scanner).Scan method 9\n(*bufio.Scanner).Split method\n99\nbufio.ScanWordsfunc tion9 9\n+buildcomments 296\nbuildc on straints 296\nbuildt ags 296\nbuildingp ackages 293\nbuilt-in function\nappend 88, 90, 91\ncap 84, 232\nclose 226, 228, 251\ncomplex 61\ncopy 89\ndelete 94\nimag 61\nlen 4, 54, 64, 65, 81, 84, 233\nmake 9, 18, 88, 94, 225\nnew 34\npanic 148, 149\nreal 61\nrecover 152\nbuilt-in interface, error 196\nbuilt-in typ e,error 11, 128, 149,\n196\nbyte slice tos tr ing conversion7 3\nbytetype 5 2\nByteCounterexample1 73\nbytespackage7 1, 73\nbytes.Buffertype 7 4, 169, 172, 185\n(*bytes.Buffer).Grow method\n169\n(*bytes.Buffer).WriteByte\nmethod 7 4\n(*bytes.Buffer).WriteRune\nmethod 7 4\n(*bytes.Buffer).WriteString\nmethod 7 4\nbytes.Equalfunc tion8 6\nbzipCc ode3 62\nbzipexamplep ackage3 63\nbzipperexample3 65\nC++ programmingl angu agex iv,x v,\n361\nCp rogrammingl angu agex ii,x v, 1,\n6, 52, 260, 361\ncach e,conc urrentn on-blo cking 2 72\ncach e,non-blo cking 2 75\ncake ass emb l yline2 34\ncall\nby reference 83\nby value 83, 120, 158\ninterface met hod 1 82\nokvalue fro mfunc tion1 28\ncallingCf ro mGo 3 61\ncamel cas e 28\ncancel lat ion2 51, 252\ncancel lat iono fH TTPr equest2 53\ncapbuilt-in function8 4, 232\ncapacity,c hannel 2 26, 232, 233\ncapacity,s lice 88, 89\ncapt uring iterat ionv ar iable 140\ncapt uring loopv ar iable 141, 236,\n240",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 386,
      "page_label": "368"
    }
  },
  {
    "page_content": "capacity,c hannel 2 26, 232, 233\ncapacity,s lice 88, 89\ncapt uring iterat ionv ar iable 140\ncapt uring loopv ar iable 141, 236,\n240\ncasein typ eswitch 212\ncase, select 245\nCelsiustype 3 9\nCelsiusFlagfunc tion1 81\ncfexample4 3\ncgoto ol3 61, 362\n<-ch,c hannel receive 1 8, 225, 232\nch<-,c hannel send1 8, 225, 232\nch aining, met hod 1 14\nchantype 2 25\nch annel\nbuffered 2 26, 231\ncapacity 2 26, 232, 233\nclose 228, 251\nclosing a  225\ncommunic ation2 25, 245\ncomp arison2 25\nconv ersion, bidirec tion alt o\nunidirec tion al2 31\ndraining a  229, 252\nmake 18, 225\nni l 246, 249\npolling2 46\nrangeov er2 29\nre ceive <-ch 18, 225, 232\nre ceive ,non-blo cking 2 46\nre ceive ,okvalue fro m 229\nsend ch<- 18, 225, 232\nsy nchro nou s 226\ntype 1 8\ntype <-chan T,r eceive-only2 30\ntype chan<- T,s end-only2 30\ntype,u nidirec tion al2 30, 231\nunbuffered 2 26\nzerov alue 225, 246\nch arac ter conv ersion7 1\nch arac ter test7 1\ncharcountexample9 8\nchatexample2 54\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 386,
      "page_label": "368"
    }
  },
  {
    "page_content": "ptg16105617\nINDEX 369\nch ats er ver 253\nCheckQuotafunc tion3 12, 313\nclient, emai l 312\nclient, SMTP 312\nclockexample2 20, 222\nclocks er ver,c on cur rent2 19\nclosebuilt-in function2 26, 228,\n251\nclose,c hannel 2 28, 251\nclos ergoro utine 2 38, 250\nclosingac hannel 2 25\nclosure, lexic al 136\ncmplx.Sqrtfunc tion6 1\nco de\nformat 3, 6, 9, 48\npoint, Unico de 67\nproduc tion3 01\nColoredPointexample1 61\ncommaexample7 3\ncommand, test ing a 308\ncommand-linea rgument4 ,1 8, 33,\n43, 179, 180, 290, 313\ncomment\n/*...*/ 5, 25\n// 5, 25\ndo c 42, 296\n// Output 326\ncomments, +build 296\ncommunic atings equential pro cesses\n(CSP) xiii ,2 17\ncommunic ation, channel 2 25, 245\ncomp arabilit y 9, 38, 40, 53, 86, 93,\n97, 104\ncomp arison\nar ray 83\nch annel 2 25\nfunc tion1 33\ninterface 184\nmap9 6\nop erator == 40, 63\nop erator s 40, 93\nop erator s,t able of5 3\nslice 87\nst ring6 5\nst ruc t 104\ncomp ilation,s ep arate2 84\ncomp lemento perator ^,b it w ise 5 3\ncomplexbuilt-in function6 1\ncomplextype 6 1\ncomp osite lit eral 14\ncomp osite typ e xv,1 4, 81\ncomp osition,p aral lel2 24\ncomp osition,t yp e xv,1 07, 162, 189\ncompress/bzip2package3 61\ncomp ression3 61\nconceptu ali nt egr ity x iv\nconcrete typ e 24, 171, 211, 214\nconc urrency 1 7, 217, 257\nexcessive 2 41, 242\nsafe 2 75\nsafety 2 56, 257, 272, 365\nwith share dvar iables 257\nconc urrent\nclocks er ver 219\ndirec tor ytraversal2 47\necho ser ver 222\nnon-blo cking cache 2 72\nwe bcraw ler 239\nconﬁnement,s er ial 262\nconﬁnement,v ar iable 261",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 387,
      "page_label": "369"
    }
  },
  {
    "page_content": "direc tor ytraversal2 47\necho ser ver 222\nnon-blo cking cache 2 72\nwe bcraw ler 239\nconﬁnement,s er ial 262\nconﬁnement,v ar iable 261\nconsistenc y,s equential 268, 269\nconstde clarat ion1 4, 75\ncons tant\nfalseboole an 63\ngenerator, iota xiii,7 7\ntime.Minute 76\ntime.Second 164\ntrueboole an 63\ntypes, untyped7 8\ncons tants, pre cisiono f7 8\ncons \ntraints, bui ld 296\ncont ent ion,l ock2 67, 272\ncont ext swit c h280\ncontinuest atement 2 4, 46\ncontinuest atement,l ab ele d 249\ncont rac ts, interfaces as 171\ncont rol ﬂow 4 6\nconv ersion\nbidirec tion alt ou nidirec tion al\nch annel 2 31\nbyte slice tos tr ing 7 3\nch arac ter 71\nimplicit7 9\nnarrow ing 4 0, 55\nnumeric7 9\nop erat ion4 0, 55, 64, 71, 78, 79,\n173, 187, 194, 208, 231, 353, 358\nrune slice tos tr ing 7 1\nrune tos tr ing 7 1\nst ring7 1\nst ringt ob ytes lice 40, 73\nst ringt or unes lice 71, 88\nunsafe.Pointer 356\ncopybuilt-in function8 9\ncountdownexample2 44, 245, 246\ncounting semaphore 2 41\ncoverage, statement 3 18, 320\ncoverage, test 3 18\ncoverage_testexample3 19\nCPU proﬁle 324\ncrawlexample2 40, 242, 243\ncraw ler,c on cur rentw eb 2 39\ncraw ler,w eb 1 19\ncr iticals ec tion 2 63, 270, 275\ncross-comp ilation 2 95\ncr yptography 5 5, 83, 121, 325\ncrypto/sha256package8 3\ncustomSortexample1 90\ncyclic dat ast ruc ture3 37\ncyclic testd ep endency 3 14\ndata\nrace 259, 267, 275\nst ruc ture, cyc lic 337\nst ruc ture, rec ursive1 01, 102, 107\ntype,b it-s et 77\ndatabase driver, MySQL2 84\ndatabase/sqlpackage2 11, 288\ndaysAgofunc tion1 14",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 387,
      "page_label": "369"
    }
  },
  {
    "page_content": "st ruc ture, rec ursive1 01, 102, 107\ntype,b it-s et 77\ndatabase driver, MySQL2 84\ndatabase/sqlpackage2 11, 288\ndaysAgofunc tion1 14\ndeadbeef 55, 80\nde adlo ck2 33, 240, 265\nde clarat ion\nconst 14, 75\nfunc 3, 29, 119\nimport 3, 28, 42, 284, 285, 362\nmethod 4 0, 155\npackage 2, 28, 41, 285\npackage-le vel 2 8\nscop e 45, 137\nsh adowing 4 6, 49, 206, 212\nshort var iable 5, 7, 30, 31\nst atement,s hort var iable 7\nstruct 99\ntype 39\nvar 5, 30\nde clarat ions,o rder of4 8\nde code example, S-expression3 47\nde coder API, token-b ased 2 13, 215,\n347\nde coding, S-expression3 44\nde coding, XML 213\nde crements tatement -- 5, 37\ndedupexample9 7\nde epequivalence 87, 317, 358\ndefaultcase in select 246\ndefaultcase in switch 23\ndefaultcase int yp e switch 212\ndeferanonymou sfunc tion1 46\ndeferexample1 50, 151\ndeferst atement 1 44, 150, 264\ndefer red functionc al l 144\ndeletebuilt-in function9 4\ndepth-ﬁrs tsearch algor it hm1 36\ndereference,i mp licit1 59\ndi agram\nhelloworldsu bst ring6 9\npip eline2 28\nslice cap acity growt h 90\nslice ofm onths8 4\nst rings haring 6 5\nst ruc thole 355\nthumbnailsequence 238\ndig itala rtifac t example1 78\nDijkstra, Edsger3 18\nDi lbert 1 00\ndirec ted acyclic graph1 36, 284\ndirec tor ytraversal, con cur rent2 47\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 387,
      "page_label": "369"
    }
  },
  {
    "page_content": "ptg16105617\n370 INDEX\ndiscriminated union2 11, 213, 214\nDisplayfunc tion3 33\ndisplayexample3 33\ndisplayfunc tion3 34\ndisplaying met hodso fat yp e 351\nDistancefunc tion1 56\ndo c comment4 2, 296\ndoc.godo c comment ﬁle 42, 296\ndo cumentation,p ackage2 96\ndomain name, imp ort pat h 284\ndot .in templ ate 1 13\ndown loadingp ackages 292\nDr.S trange lov e 336\ndrainingac hannel 2 29, 252\nduexample2 47, 249, 250\ndupexample9 ,1 1, 12\ndup lic ates up pression2 76\ndy namic disp atch 1 83\ndy namic typ e,i nt erface 181\nechoexample5 , 7, 34, 309\nechotest 3 09\necho ser ver,c on cur rent2 22\necho_test.go 310\nef fec tive tests, writing 3 16, 317\nemai lclient3 12\nembarrassinglyp aral lel2 35\nembedde dst ruc t ﬁeld1 61\nembedding, int erface 174\nembedding, str uct 1 04, 161\nEmployeest ruc t 100\nempt y\ninterface typ e 176\nselectst atement 2 45\nst ring5 , 7, 30\nst ruc t 102\nencapsulat ion1 68, 284\nencodingAPI2 13, 340\nenco ding, S-expression3 38\nencoding/jsonpackage1 07\nencoding/xmlpackage1 07, 213\nendo f ﬁle (EOF) 131\nenum 77\nenviro nment var iable\nGOARCH 292, 295\nGOMAXPROCS 281, 321\nGOOS 292, 295\nGOPATH xv i,2 91, 295\nGOROOT 292\nequalfunc tion8 7, 96\nequality,p oint er3 2\nequivalence,d eep8 7, 317, 358\nerrorbuilt-in interface 196\nerrorbuilt-in typ e 11, 128, 149, 196\ner ror API 1 27, 152\nerror.Errormethod 1 96\nerrorffunc tion1 43\ner ror-handlings trateg ies 128, 152,\n310, 316\nerrorspackage1 96\nerrors.Newfunc tion1 96\nes cap e\nhexade cimal 66\nHTML 116\noctal6 6\nsequence 10\nsequences, table of6 6",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 388,
      "page_label": "370"
    }
  },
  {
    "page_content": "310, 316\nerrorspackage1 96\nerrors.Newfunc tion1 96\nes cap e\nhexade cimal 66\nHTML 116\noctal6 6\nsequence 10\nsequences, table of6 6\nUnico de 68, 107\nURL 111\nes capingv ar iables 36\nevalexample1 98\neventm ultiplexing2 44\nevents 227, 244\nExamplefunc tion3 02, 326\nexample\nautoescape 117\nbasename 72\nboiling 29\nByteCounter 173\nbzipper 365\ncf 43\ncharcount 98\nchat 254\nclock 220, 222\nColoredPoint 161\ncomma 73\ncountdown 244, 245, 246\ncoverage_test 319\ncrawl 240, 242, 243\ncustomSort 190\ndedup 97\ndefer 150, 151\ndig itala rtifac t 178\ndisplay 333\ndu 247, 249, 250\ndup 9, 11, 12\necho 5, 7, 34, 309\neval 198\nfetch 16, 148\nfetchall 18\nfindlinks 122, 125, 139\nftoc 29\ngithub 110, 111\ngraph 99\nhelloworld 1, 2\nhttp 192, 194, 195\nintset 166\nissues 112\nissueshtml 115\nissuesreport 114\njpeg 287\nlissajous 14, 22, 35\nmandelbrot 62\nmemo 275, 276, 277, 278, 279\nmethods 351\nmovie 108, 110\nnetcat 221, 223, 227\nnetflag 78\nnonempty 92\noutline 123, 133\npackage, bank 258, 261, 263\npackage, bzip 363\npackage, format 332\npackage, geometry 156\npackage, http 192\npackage, links 138\npackage, memo 273\npackage, params 348\npackage, storage 312, 313\npackage, tempconv 42\npackage, thumbnail 235\npalindrom e 303, 305, 308\nparams 348\nParse 152\npipeline 228, 230, 231\npl aylist1 87\nrev 86\nreverb 223, 224\nserver 19, 21\nsexpr 340\nS-expressiond ecode3 47\nsha256 83\nsleep 179\nspinner 218\nsquares 135\nsum 142\nsurface 59, 203\ntempconv 39, 180, 289\ntemp eraturec onversion2 9\ntempflag 181\ntest of word 303\nthumbnail 236, 237, 238\ntitle 153",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 388,
      "page_label": "370"
    }
  },
  {
    "page_content": "squares 135\nsum 142\nsurface 59, 203\ntempconv 39, 180, 289\ntemp eraturec onversion2 9\ntempflag 181\ntest of word 303\nthumbnail 236, 237, 238\ntitle 153\ntopoSort 136\ntrace 146\ntreesort 102\nurlvalues 160\nwait 130\nword 303, 305, 308\nxmlselect 215\nappendInt 88\nexception 1 28, 149\nexcessive con cur rency 2 41, 242\nexclusion, mut ual 262, 267\nexclusivel ock2 63, 266, 270\nexclusiveO Ro perator ^ 53\nexp onent ial back-off 1 30\nexp ort ofs tr uct ﬁeld1 01, 106, 109,\n110, 168\nexport_test.goﬁle 315\nExpr.Checkmethod 2 02\nexpression\naddressable1 59, 341\nevaluator1 97\nmethod 1 64\nre ceive 2 25\nExpr.Evalmethod 1 99\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 388,
      "page_label": "370"
    }
  },
  {
    "page_content": "ptg16105617\nINDEX 371\nextendingas lice 86\nExtensible Marku pLanguage (XML)\n107\nexter nal testp ackage2 85, 314\nFahrenheittype 3 9\nfai lurem essage ,test 3 06\nfallthroughst atement 2 3, 212\nfalseboole an cons tant6 3\nfetchexample1 6, 148\nfetchallexample1 8\nfibfunc tion3 7, 218\nFibonacci algor it hm3 7, 218\nﬁeld\nanonymou sst ruc t 104, 105, 106,\n162\nembedde dst ruc t 161\nexp ort ofs tr uct 1 01, 106, 109,\n110, 168\norder,s tr uct 1 01, 355\nsele ctor1 56\nst ruc t 15, 99\ntag, omitempty 109\ntag, str uct 1 09, 348\nﬁgure\nLiss ajous 1 3\nMandelbro t 63\n3-D sur face 58, 203\nFi leTransfer Pro tocol (FTP) 222\nﬁle\nblock4 6\nexport_test.go 315\nname,M icros oft Windows 72\nname,P OSIX 72\n_test.go 285, 302, 303\nfindlinksexample1 22, 125, 139\nﬁxe d-size stack 1 24\nflagpackage3 3, 179\nﬂag\ngo tool -bench 321\ngo tool -benchmem 322\ngo tool -covermode 319\ngo tool -coverprofile 319\ngo tool -cpuprofile 324\ngo tool -nodecount 325\ngo tool -text 325\ngo tool -web 326\ngodoc -analysis 176\ngo list -f315\ngo -race 271\ngo test -race274\ngo test -run305\ngo test -v304\nflag.Argsfunc tion3 4\nflag.Boolfunc tion3 4\nflag.Durationfunc tion1 79\nflag.Parsefunc tion3 4\nflag.Stringfunc tion3 4\nflag.Valueinterface 179, 180\nﬂoating-p oint\nnumb er5 6\nprecision5 6, 57, 63, 78\ntr unc ation 4 0, 55\nfmtpackage2\nfmt.Errorffunc tion1 29, 196\nfmt.Fprintffunc tion1 72\nfmt.Printffunc tion1 0\nfmt.Printlnfunc tion2\nfmt.Scanffunc tion7 5\nfmt.Sscanffunc tion1 80\nfmt.Stringerinterface 180, 210\nforscop e 47\nforst atement 6",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 389,
      "page_label": "371"
    }
  },
  {
    "page_content": "fmt.Printlnfunc tion2\nfmt.Scanffunc tion7 5\nfmt.Sscanffunc tion1 80\nfmt.Stringerinterface 180, 210\nforscop e 47\nforst atement 6\nforEachNodefunc tion1 33\nforeig n-functioni nt erface (FFI) 361\nformat, code 3, 6, 9, 48\nformatexamplep ackage3 32\nformatAtomfunc tion3 32\nframewor k,w eb 1 93\nftocexample2 9\nfuncde clarat ion3 ,2 9, 119\nfunc tion\nanonymou s 22, 135, 236\nappendbuilt-in 88, 90, 91\nargument1 19\nassertion3 16\nBenchmark 302, 321\nbody, missing1 21\nbreadthFirst 139\nbtoi 64\nbufio.NewReader 98\nbufio.NewScanner 9\nbufio.ScanWords 99\nbytes.Equal 86\ncall,d efer red 1 44\ncall, okvalue fro m 128\ncapbuilt-in 84, 232\nCelsiusFlag 181\nCheckQuota 312, 313\nclosebuilt-in 226, 228, 251\ncmplx.Sqrt 61\ncomp arison1 33\ncomplexbuilt-in 61\ncopybuilt-in 89\ndaysAgo 114\ndeletebuilt-in 94\nDisplay 333\ndisplay 334\nDistance 156\nequal 87, 96\nerrorf 143\nerrors.New 196\nExample 302, 326\nfib 37, 218\nflag.Args 34\nflag.Bool 34\nflag.Duration 179\nflag.Parse 34\nflag.String 34\nfmt.Errorf 129, 196\nfmt.Fprintf 172\nfmt.Printf 10\nfmt.Println 2\nfmt.Scanf 75\nfmt.Sscanf 180\nforEachNode 133\nformatAtom 332\ngcd 37\nhand ler 19, 21, 152, 191, 194, 195,\n348\nhtml.Parse 121, 125\nhttp.DefaultServeMux 195\nhttp.Error 193\nhttp.Get 16, 18\nhttp.Handle 195\nhttp.HandleFunc 19, 22, 195\nhttp.ListenAndServe 19, 191\nhttp.NewRequest 253\nhttp.ServeMux 193\nhypot 120\nimagbuilt-in 61\nimage.Decode 288\nimage.RegisterFormat 288\nincr 33\ninit 44, 49\nintsToString 74\nio.Copy 17, 18\nioutil.ReadAll 16, 272\nioutil.ReadDir 247\nioutil.ReadFile 12, 145",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 389,
      "page_label": "371"
    }
  },
  {
    "page_content": "image.RegisterFormat 288\nincr 33\ninit 44, 49\nintsToString 74\nio.Copy 17, 18\nioutil.ReadAll 16, 272\nioutil.ReadDir 247\nioutil.ReadFile 12, 145\nio.WriteString 209\nitob 64\njson.Marshal 108\njson.MarshalIndent 108\njson.NewDecoder 111\njson.NewEncoder 111\njson.Unmarshal 110, 114\nlenbuilt-in 4, 54, 64, 65, 81, 84,\n233\nlinks.Extract 138\nliteral 22, 135, 227\nlog.Fatalf 49, 130\nmain 2, 310\nmakebuilt-in 9, 18, 88, 94, 225\nmath.Hypot 156\nmath.Inf 57\nmath.IsInf 57\nmath.IsNaN 57\nmath.NaN 57\nmu lti-value d 11, 30, 37, 96, 125,\n126\nmustCopy 221\nnet.Dial 220\nnet.Listen 220\nnewbuilt-in 34\nni l 132\nos.Close 11\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 389,
      "page_label": "371"
    }
  },
  {
    "page_content": "ptg16105617\n372 INDEX\nos.Exit 16, 34, 48\nos.Getwd 48\nos.IsExist 207\nos.IsNotExist 207\nos.IsPermission 207\nos.Open 11\nos.Stat 247\npanicbuilt-in 148, 149\nparameter 119\nparams.Unpack 349\npng.Encode 62\nPopCount 45\nrealbuilt-in 61\nrecoverbuilt-in 152\nre cursive anony mou s 137\nreflect.TypeOf 330\nreflect.ValueOf 331, 337\nreflect.Zero 345\nregexp.Compile 149\nregexp.MustCompile 149\nresu ltl ist1 19\nruntime.Stack 151\nSearchIssues 111\nsexpr.Marshal 340\nsexpr.readList 347\nsexpr.Unmarshal 347\nsig nature1 20\nsort.Float64s 191\nsort.Ints 191\nsort.IntsAreSorted 191\nsort.Reverse 189\nsort.Strings 95, 137, 191\nSprint 330\nsqlQuote 211, 212\nstrconv.Atoi 22, 75\nstrconv.FormatInt 75\nstrconv.Itoa 75\nstrconv.ParseInt 75\nstrconv.ParseUint 75\nstrings.Contains 69\nstrings.HasPrefix 69\nstrings.HasSuffix 69\nstrings.Index 289\nstrings.Join 7, 12\nstrings.Map 133\nstrings.NewReader 289\nstrings.NewReplacer 289\nstrings.Split 12\nstrings.ToLower 72\nstrings.ToUpper 72\ntemplate.Must 114\ntemplate.New 114\nTest 302\ntime.After 245\ntime.AfterFunc 164\ntime.Now 220\ntime.Parse 220\ntime.Since 114\ntime.Tick 244, 246\ntitle 144, 145\ntype 1 19, 120\nunicode.IsDigit 71\nunicode.IsLetter 71\nunicode.IsLower 71\nunicode.IsSpace 93\nunicode.IsUpper 71\nunsafe.AlignOf 355\nunsafe.Offsetof 355\nunsafe.Sizeof 354\nurl.QueryEscape 111\nutf8.DecodeRuneInString 69\nutf8.RuneCountInString 69\nvalue 132\nvar iadic 142, 172\nvisit 122\nWaitForServer 130\nwalkDir 247\nzerov alue 132\ngarb agec ol lec tion x i, xiii, 7, 35, 230,\n353, 357",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 390,
      "page_label": "372"
    }
  },
  {
    "page_content": "value 132\nvar iadic 142, 172\nvisit 122\nWaitForServer 130\nwalkDir 247\nzerov alue 132\ngarb agec ol lec tion x i, xiii, 7, 35, 230,\n353, 357\ngarb agec ol lec tor,m ov ing 3 57\nGCD algor it hm3 7\ngcdfunc tion3 7\ngeometryexamplep ackage1 56\ngeometry.Point.Distance method\n156\ngett erm et hod 1 69\nGIF animat ion1 3\nGitHub issuet racker1 10\ngithubexample1 10, 111\nGo\nPl ayg round x vi,3 26\nBlog xv i, 326\nissue1 10, 112, 358\ngoto ol2 ,4 2, 44, 290\ngo tool -benchﬂag 321\ngo tool -benchmemﬂag 322\ngo tool -covermodeﬂag 319\ngo tool -coverprofileﬂag 319\ngo tool -cpuprofileﬂag 324\ngo tool -nodecountﬂag 325\ngo tool pprof 325\ngo tool -textﬂag 325\ngo tool -webﬂag 326\ngo tool cover 318, 319\ngo docto ol2 5\ngost atement 1 8, 218\nGOARCHenviro nment var iable 292,\n295\ngo build 2, 286, 293, 294\ngo doc 296\ngodoc -analysisﬂag 176\ngodocto olx vi,2 5, 297, 326\ngo env 292\ngofmtto ol3 , 4, 44, 286\ngo get xv i, 2, 292, 293\ngo help 290\ngoimportsto ol3 ,4 4, 286\ngo install 295\ngolang.org/x/net/html package\n122\ngolintto ol2 92\ngo list 298, 315\ngo list -fﬂag 315\nGOMAXPROCSenviro nment var iable\n281, 321\nGOOSenviro nment var iable 292, 295\nGOPATHenviro nment var iable xvi,\n291, 295\ngopl.iorepository x vi\ngo -raceﬂag 271\nGOROOTenviro nment var iable 292\ngoro utine 1 8, 217, 233, 235\nclos er 238, 250\nidentity 2 82\nle ak 233, 236, 246\nmonitor2 61, 277\nmu ltiplexing2 81\nvs. OS thread2 80\ngo run 2, 294\ngo test 301, 302, 304\ngo test -raceﬂag 274\ngo test -runﬂag 305\ngo test -vﬂag 304\ngotost atement 2 4\ngraphexample9 9",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 390,
      "page_label": "372"
    }
  },
  {
    "page_content": "vs. OS thread2 80\ngo run 2, 294\ngo test 301, 302, 304\ngo test -raceﬂag 274\ngo test -runﬂag 305\ngo test -vﬂag 304\ngotost atement 2 4\ngraphexample9 9\nGraphViz 326\nGr ies emer,R ob ert x i\ngrowth,s tack 1 24, 280, 358\ngu ardingm ut ex2 63\nhalf-openi nt erval 4\nhand ler function1 9, 21, 152, 191,\n194, 195, 348\n‘‘happ ens before’’re lat ion2 26, 257,\n261, 277\n‘‘hasa ’’re lat ions hip 1 62\nhash table 9, 93\nHaskel lprog rammingl angu agex iv\nhe ap\nal location 3 6\nproﬁle 324\nvar iable 36\nhelloworldexample1 ,2\nhelloworldsu bst ringd iagram 69\nhexade cimal escape 6 6\nhexade cimal literal 55\nhidden point er3 57\nHo are ,To nyx iii\nhole,s tr uct 3 54\nHTML\nanch ore lement1 22\nes cap e 116\ninjec tion att ack 1 15\nmetach arac ter 116\npars er1 21\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 390,
      "page_label": "372"
    }
  },
  {
    "page_content": "ptg16105617\nINDEX 373\nhtml.Parsefunc tion1 21, 125\nhtml/templatepackage1 13, 115\nHT TP\nGETr equest2 1, 127, 272, 348\nPOSTr equest3 48\nre quest, cancellat iono f2 53\nre questm ultiplexer 193\nhttpexample1 92, 194, 195\nhttpexamplep ackage1 92\n(*http.Client).Domethod 2 53\nhttp.DefaultClientvar iable 253\nhttp.DefaultServeMux func tion\n195\nhttp.Errorfunc tion1 93\nhttp.Getfunc tion1 6, 18\nhttp.Handlefunc tion1 95\nhttp.HandleFuncfunc tion1 9, 22,\n195\nhttp.Handlerinterface 191, 193\nhttp.HandlerFunctype 1 94, 203\nhttp.ListenAndServe func tion1 9,\n191\nhttp.NewRequestfunc tion2 53\nhttp.Requesttype 2 1, 253\n(*http.Request).ParseForm\nmethod 2 2, 348\nhttp.ResponseWriter type 1 9, 22,\n191, 193\nhttp.ServeMuxfunc tion1 93\nhypotfunc tion1 20\nidentiﬁer _,b lank 7 ,3 8, 95, 120, 126,\n287\nidentiﬁer,q ualiﬁed 4 1, 43\nidentity,g oroutine 2 82\nIEEE 754 stand ard 5 6, 57\nif,i nitializat ions tatement in2 2,\n206\nif-elsescop e 47\nif-elsest atement 9 ,2 2, 47\nimagbuilt-in function6 1\nimagem anipu lat ion1 21\nimagepackage6 2, 287\nimage/colorpackage1 4\nimage.Decodefunc tion2 88\nimage/pngpackage2 88\nimage.RegisterFormat func tion\n288\nimag inar y literal 61\nimmut abi lit y261\nimmut abi lit y,s tr ing 6 5, 73\nimplementation wit hslice,s tack 9 2,\n215\nimplicit\n& 158, 167\nassig nment3 8\nconv ersion7 9\ndereference 159\nimportde clarat ion3 ,2 8, 42, 284,\n285, 362\nimport\nbl ank 2 87\npath 2 84\npath dom ain name2 84\nrenaming2 86\nincrfunc tion3 3\nincrements tatement ++ 5, 37, 94\nindex operat ion, str ing 6 4",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 391,
      "page_label": "373"
    }
  },
  {
    "page_content": "import\nbl ank 2 87\npath 2 84\npath dom ain name2 84\nrenaming2 86\nincrfunc tion3 3\nincrements tatement ++ 5, 37, 94\nindex operat ion, str ing 6 4\nindirec tion operator * 24, 32\ninﬁnite loop6 ,1 20, 228\ninfor mat ionh iding1 68, 284\ninitfunc tion4 4, 49\ninitializat ion\nlazy 268\npackage4 4\nst atement in if 22, 206\nst atement in switch 24\ninitializer list 3 0\ninjec tion att ack,H TML1 15\ninjec \ntion att ack,S QL 2 11\nin-place slice techniques 91\ninsertions or talgor it hm1 01\ninttype 5 2\ninteger\nliteral 55\nov erﬂow 5 3, 113\nsig ned 5 2, 54\nunsig ned 5 2, 54\nintegrat iont est3 14\ninterface\nassig nabilit y 175\ncomp arison1 84\ndy namic typ e 181\nembedding1 74\nerrorbuilt-in 196\nflag.Value 179, 180\nfmt.Stringer 180, 210\nhttp.Handler 191, 193\nio.Closer 174\nio.Reader 174\nio.Writer 15, 22, 172, 174, 186,\n208, 209, 309\nJSON1 10\nmethod cal l 182\nni l 182\npit fal l 184\nReadWriteCloser 174\nReadWriter 174\nsatisfac tion1 71, 175\nsort.Interface 186\ntype 1 71, 174\ninterface{}type 1 43, 176, 331\ninterface\ntype ass ertion2 08, 210\ntype,e mp ty1 76\nvalue 181\nwith nil point er1 84\nzerov alue 182\ninterfaces as cont rac ts 171\ninternalpackage2 98\nintsetexample1 66\nintsToStringfunc tion7 4\ninvar iants 159, 169, 170, 265, 284,\n311, 352\niopackage1 74\nio.Closerinterface 174\nio.Copyfunc tion1 7, 18\nio.Discardst ream2 2\nio.Discardvar iable 18\nio.EOFvar iable 132\nio/ioutilpackage1 6, 145\nio.Readerinterface 174\niotacons tantg enerator x iii,7 7\nioutil.ReadAllfunc tion1 6, 272\nioutil.ReadDirfunc tion2 47",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 391,
      "page_label": "373"
    }
  },
  {
    "page_content": "io/ioutilpackage1 6, 145\nio.Readerinterface 174\niotacons tantg enerator x iii,7 7\nioutil.ReadAllfunc tion1 6, 272\nioutil.ReadDirfunc tion2 47\nioutil.ReadFilefunc tion1 2, 145\nio.Writerinterface 15, 22, 172,\n174, 186, 208, 209, 309\nio.WriteStringfunc tion2 09\n‘‘is a’’re lat ions hip 1 62, 175\nissue, Go1 10, 112, 358\nissuet racker, GitHu b 110\nissuesexample1 12\nissueshtmlexample1 15\nissuesreportexample1 14\nit erat iono rder,m ap 95\nit erat ionv ar iable,c apturing 1 40\nitobfunc tion6 4\nJava programmingl angu agex v\nJavaS crip tObjec tNo tat ion( JSON)\n107, 338\nJavaS crip t prog rammingl angu age\nxv,1 07\njpegexample2 87\nJSON\ninterface 110\ninterface,O penM ov ieD at abas e\n113\ninterface,x kcd1 13\nmars haling1 08\nunmarsh aling1 10\njson.Decodertype 1 11\njson.Encodertype 1 11\njson.Marshalfunc tion1 08\njson.MarshalIndentfunc tion1 08\njson.NewDecoderfunc tion1 11\njson.NewEncoderfunc tion1 11\njson.Unmarshalfunc tion1 10, 114\nke yword ,type 212\nke yword s,t able of2 7\nKnut h,D on ald 323\nlabels cope 4 6\nlabel, statement 4 6\nlabele d\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 391,
      "page_label": "373"
    }
  },
  {
    "page_content": "ptg16105617\n374 INDEX\nbreakst atement 2 49\ncontinuest atement 2 49\nst atement 4 6\nlayout,m emor y 354, 355\nlazy initializat ion2 68\nle ak,goro utine 2 33, 236, 246\nlef tshif top erator << 54\nlenbuilt-in function4 ,5 4, 64, 65,\n81, 84, 233\nlexic alblock4 6, 120, 135, 141, 212\nlexic alclosure1 36\nlifet ime, var iable 35, 46, 135\nlinksexamplep ackage1 38\nlinks.Extractfunc tion1 38\nLisp programmingl angu age3 38\nLiss ajous algor it hm1 5\nLiss ajous ﬁgure1 3\nlissajousexample1 4, 22, 35\nlist,i nitializer 30\nliteral\nar ray 82, 84\ncomp osite 1 4\nfunc tion2 2, 135, 227\nhexade cimal 55\nimag inar y 61\ninteger5 5\nmap9 4\noctal5 5\nraw str ing 6 6\nrune 56\nslice 38, 86\nst ring6 5\nst ruc t 15, 102, 106\nlo cal\nblock4 6\nvar iable 29, 141\nvar iable,a ddresso f3 2, 36\nvar iable scope 1 35\nlo cat ingp ackages 291\nlo ck\ncont ent ion 2 67, 272\nexclusive2 63, 266, 270\nmu tex 102, 263, 264, 324\nnon-reent rant2 65\nre aders2 66\nsh are d 266\nwr iter2 66\nlogpackage4 9, 130, 170\nlog.Fatalffunc tion4 9, 130\nlo oku pm[key],m ap 94\nlo oku p, okvalue fro mmap9 6\nlo op\ninﬁnite 6 ,1 20, 228\nrange 6, 9\nvar iable,c apturing 1 41, 236, 240\nvar iable scope 1 41, 236\nwhile6\nmainfunc tion2 ,3 10\nmain,p ackage2 ,2 85, 310\nmakebuilt-in function9 ,1 8, 88, 94,\n225\nmakech annel 1 8, 225\nmakemap9 ,1 8, 94\nmakeslice 88, 322\nMandelbro tﬁgure6 3\nMandelbro tset6 1\nmandelbrotexample6 2\nmap\nas set 96, 202\ncomp arison9 6\nelement, non existent9 4, 95\nit erat iono rder 95\nliteral 94\nlo oku pm[key] 94\nlo oku p, okvalue fro m 96",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 392,
      "page_label": "374"
    }
  },
  {
    "page_content": "map\nas set 96, 202\ncomp arison9 6\nelement, non existent9 4, 95\nit erat iono rder 95\nliteral 94\nlo oku pm[key] 94\nlo oku p, okvalue fro m 96\nmake 9, 18, 94\nni l 95\nrangeov er9 4\ntype 9 ,9 3\nwith slice key 9 7\nzerov alue 95\nmars halingJ SON1 08\nmathpackage1 4, 56\nmath/bigpackage6 3\nmath/cmplxpackage6 1\nmath.Hypotfunc tion1 56\nmath.Inffunc tion5 7\nmath.IsInffunc tion5 7\nmath.IsNaNfunc tion5 7\nmath.NaNfunc tion5 7\nmath/randpackage2 85, 308\nmemoexample2 75, 276, 277, 278,\n279\nmemoexamplep ackage2 73\nmemoizat ion2 72\nmemory allocat ion3 6, 71, 89, 169,\n209, 322\nmemory layout3 54, 355\nmetach arac ter,H TML1 16\nmethod\n(*bufio.Reader).ReadRune 98\n(*bufio.Scanner).Err 97\n(*bufio.Scanner).Scan 9\n(*bufio.Scanner).Split 99\n(*bytes.Buffer).Grow 169\n(*bytes.Buffer).WriteByte 74\n(*bytes.Buffer).WriteRune 74\n(*bytes.Buffer).WriteString\n74\ncall,i nt erface 182\nch aining1 14\nde clarat ion4 0, 155\nerror.Error 196\nExpr.Check 202\nexpression1 64\nExpr.Eval 199\ngeometry.Point.Distance 156\ngett er1 69\n(*http.Client).Do 253\n(*http.Request).ParseForm 22,\n348\nname 1 56\nnet.Conn.Close 220\nnet.Listener.Accept 220\n(*os.File).Write 183\npath.Distance 157\nprom otion 1 61\nre ceivern ame1 57\nre ceiverp arameter 156\nre ceivert yp e 157\nreflect.Type.Field 348\nreflect.Value.Addr 342\nreflect.Value.CanAddr 342\nreflect.Value.Interface 331,\n342\nreflect.Value.Kind 332\nsele ctor1 56\nsett er1 69\nString 40, 166, 329\n(*sync.Mutex).Lock 21, 146, 263\n(*sync.Mutex).Unlock 21, 146,\n263\n(*sync.Once).Do 270",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 392,
      "page_label": "374"
    }
  },
  {
    "page_content": "sele ctor1 56\nsett er1 69\nString 40, 166, 329\n(*sync.Mutex).Lock 21, 146, 263\n(*sync.Mutex).Unlock 21, 146,\n263\n(*sync.Once).Do 270\n(*sync.RWMutex).RLock 266\n(*sync.RWMutex).RUnlock 266\n(*sync.WaitGroup).Add 238\n(*sync.WaitGroup).Done 238\ntemplate.Funcs 114\ntemplate.Parse 114\n(*testing.T).Errorf 200, 304,\n306\n(*testing.T).Fatal 306\ntime.Time.Format 220\nvalue 164\n(*xml.Decoder).Token 213\nmethodsexample3 51\nmethodso fat yp e,d ispl aying 3 51\nMicros oft Windows ﬁle name7 2\nmissingf unctionb ody1 21\nm[key],m ap lookup 9 4\nmobi lep latfor ms1 21\nMo dula-2 programmingl angu age\nxiii\nmo dular ity 2 83\nmonitor2 64, 275\nmonitorg oroutine 2 61, 277\nmovieexample1 08, 110\nmoving garb agec ol lec tor 3 57\nmu ltimap1 60, 193\nmu ltiple-value assig nment3 7\nmu ltiplexer,H TTPr equest1 93\nmu ltiplexing, event 2 44\nmu ltiplexing, goroutine 2 81\nmu ltithre ading, share d-memor y\n217, 257\nmu lti-value dfunc tion1 1, 30, 37, 96,\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 392,
      "page_label": "374"
    }
  },
  {
    "page_content": "ptg16105617\nINDEX 375\n125, 126\nmustCopyfunc tion2 21\nmu tex 145, 163, 256, 269\ngu arding2 63\nlo ck1 02, 263, 264, 324\nre ad/w rit e 266, 267\nmu tuale xc lusion2 62, 267\nMySQLd at abas e dr iver2 84\nname\nmethod 1 56\nmethod receiver1 57\npackage2 8, 43\nparameter 120\nsp ace 41, 156, 283\nname d\nresu lt1 20, 126\nresu ltz erov alue 120, 127\ntype 2 4, 39, 40, 105, 157\nnamingc onvent ion 2 8, 169, 174,\n289\nnaming, package2 89\nNaN( notan umber) 57, 93\nnarrow ing conversion4 0, 55\nnegat iono perator ! 63\nnetpackage2 19\nnetcatexample2 21, 223, 227\nnet.Conntype 2 20\nnet.Conn.Closemethod 2 20\nnet.Dialfunc tion2 20\nnetflagexample7 8\nnet/httppackage1 6, 191\nnet.Listenfunc tion2 20\nnet.Listenertype 2 20\nnet.Listener.Accept method 2 20\nnet/smtppackage3 12\nnet/urlpackage1 60\nnetwor king1 21, 219\nnewbuilt-in function3 4\nnew,r edeﬁning3 5\nni l\nch annel 2 46, 249\nfunc tion1 32\ninterface 182\nmap9 5\npointer3 2\npointer, int erface wit h 184\nre ceiver1 59, 185\nslice 87\nnon-blo cking\ncach e 275\ncach e,conc urrent2 72\nch annel receive 2 46\nselect 246\nnonemptyexample9 2\nnonexistentm ap element9 4, 95\nnon-reent rantl ock2 65\nnon-stand ard package1 21\nnumb er, ﬂoating-p oint5 6\nnumb erz erov alue 5, 30\nnumeric\nconv ersion7 9\nprecision5 5, 78\ntype 5 1\nOb ero nprog rammingl angu agex iii\nobjec t 156\nobjec t-oriente dprog ramming\n(O OP) 155, 168\noctale scap e 66\noctall it eral 55\nokvalue 37\nokvalue fro mch annel receive 2 29\nokvalue fro mfunc tionc al l 128\nokvalue fro mmapl ooku p 96",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 393,
      "page_label": "375"
    }
  },
  {
    "page_content": "octale scap e 66\noctall it eral 55\nokvalue 37\nokvalue fro mch annel receive 2 29\nokvalue fro mfunc tionc al l 128\nokvalue fro mmapl ooku p 96\nokvalue fro mtype ass ertion2 06\nomitemptyﬁeldt ag 109\nOp enM ov ieD at abas e JSON\ninterface 113\nop erat ion, atomic 264\nop erat ion, conv ersion4 0, 55, 64, 71,\n78, 79, 173, 187, 194, 208, 231,\n353, 358\nop erator\n+=, -=,e tc., assig nment5\n&,a ddress-of2 4, 32, 94, 158, 167\n&^,A ND-NOT 5 3\n&^,b it-cle ar 53\n^,b it w ise complement5 3\n|,b it w ise OR1 66, 167\n==,c omparison4 0, 63\n^,e xc lusiveO R5 3\n*,i ndirec tion 2 4, 32\n<<,l ef tshif t 54\n!,n egat ion6 3\n%,r emainder 52, 166\n>>,r ig hts hif t 54\n&&,s hort-circuit AND 63\n||,s hort-circuit OR6 3\n+,s tr ing con catenat ion5 ,6 5\n-,u nary 5 3\n+,u nary 5 3\nasso ciativity 5 2\nprecedence 52, 63\ns[i:j],s lice 84, 86\ns[i:j],s ubst ring6 5, 86\nop erator s\nassig nment3 6, 52\ncomp arison4 0, 93\ntableo fb inar y 52\ntableo fb it w ise 5 3\ntableo fc omparison5 3\nopt imizat ion2 64, 321, 323\nopt imizat ion, premature 3 24\nOR operator ||,s hort-circuit 6 3\norder ofd eclarat ions 4 8\norder,s tr uct ﬁeld1 01, 355\nor ganizat ion, wor ksp ace 291\nOS threadv s. goroutine 2 80\nospackage4 ,2 06\nos.Argsvar iable 4\nos.Closefunc tion1 1\nos.Exitfunc tion1 6, 34, 48\n*os.Filetype 1 1, 13, 172, 175, 185,\n336\nos.FileInfotype 2 47\n(*os.File).Writemethod 1 83\nos.Getwdfunc tion4 8\nos.IsExistfunc tion2 07\nos.IsNotExistfunc tion2 07\nos.IsPermissionfunc tion2 07\nos.LinkErrortype 2 07\nos.Openfunc tion1 1",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 393,
      "page_label": "375"
    }
  },
  {
    "page_content": "os.Getwdfunc tion4 8\nos.IsExistfunc tion2 07\nos.IsNotExistfunc tion2 07\nos.IsPermissionfunc tion2 07\nos.LinkErrortype 2 07\nos.Openfunc tion1 1\nos.PathErrortype 2 07\nos.Statfunc tion2 47\noutlineexample1 23, 133\n// Outputcomment3 26\nov erﬂow,i nt eger5 3, 113\nov erﬂow,s tack 1 24\npackagede clarat ion2 ,2 8, 41, 285\npackage\nAPI2 84, 296, 311, 333, 352\nback-do or3 15\nbankexample2 58, 261, 263\nblock4 6\nbufio 9\nbytes 71, 73\nbzipexample3 63\ncompress/bzip2 361\ncrypto/sha256 83\ndatabase/sql 211, 288\ndo cumentation 2 96\nencoding/json 107\nencoding/xml 107, 213\nerrors 196\nexter nal test2 85, 314\nflag 33, 179\nfmt 2\nformatexample3 32\ngeometryexample1 56\ngolang.org/x/net/html 122\nhtml/template 113, 115\nhttpexample1 92\nimage 62, 287\nimage/color 14\nimage/png 288\ninitializat ion4 4\ninternal 298\nio 174\nio/ioutil 16, 145\nlinksexample1 38\nlog 49, 130, 170\nmain 2, 285, 310\nmath 14, 56\nmath/big 63\nmath/cmplx 61\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 393,
      "page_label": "375"
    }
  },
  {
    "page_content": "ptg16105617\n376 INDEX\nmath/rand 285, 308\nmemoexample2 73\nname 2 8, 43\nnaming2 89\nnet 219\nnet/http 16, 191\nnet/smtp 312\nnet/url 160\nnon-stand ard 1 21\nos 4, 206\nparamsexample3 48\npath 72\npath/filepath 72\nreflect 330\nregexp 149\nruntime 151\nsort 95, 186, 189\nstorageexample3 12, 313\nstrconv 22, 71, 75\nstrings 7, 71, 72, 289\nsync 237, 263\nsyscall 196, 208\ntempconvexample4 2\ntesting 285, 302\ntext/scanner 344\ntext/tabwriter 188\ntext/template 113, 300\nthumbnailexample2 35\ntime 18, 77, 183\nunicode 71\nunicode/utf8 69\nunsafe 354\npackage-le vel declarat ion2 8\npackages\nbuilding2 93\ndown loading2 92\nlo cat ing2 91\nquer ying2 98\npalindrom e 191\npalindrom eexample3 03, 305, 308\npanic 64, 152, 253\npanicbuilt-in function1 48, 149\nparadoxic al race 267\nparal lelc omposition 2 24\nparal lel, emb arrassingly2 35\nparal lelism 217\nparameter\n... 91, 142, 143, 172\nfunc tion1 19\nmethod receiver1 56\nname 1 20\npassing1 20\nunus ed1 20\nparamsexample3 48\nparamsexamplep ackage3 48\nparams.Unpackfunc tion3 49\nparent hes es 4, 6, 9, 52, 63, 119, 146,\n158, 285, 335, 345\nParseexample1 52\npars er, HTML1 21\nPascal programmingl angu agex iii\npath, ... 292, 299\npathpackage7 2\npath.Distancemethod 1 57\npath/filepathpackage7 2\nPi ke,R ob x i, xiii,6 7, 107\npipelineexample2 28, 230, 231\npip eline2 27\npip elined iagram 228\npit fal l,i nt erface 184\npit fal l,s cope 1 40\npl atfor ms, mobile1 21\nPl ayg round,G ox vi,3 26\npl ayliste xample1 87\npng.Encodefunc tion6 2\npointer2 4, 32, 34\nali asing3 3\nargument3 3, 83",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 394,
      "page_label": "376"
    }
  },
  {
    "page_content": "pl atfor ms, mobile1 21\nPl ayg round,G ox vi,3 26\npl ayliste xample1 87\npng.Encodefunc tion6 2\npointer2 4, 32, 34\nali asing3 3\nargument3 3, 83\nequality 3 2\nhidden 357\nni l 32\nre ceiver1 58, 167\nto str uct 1 00, 103\nzerov alue 32\npollingc hannel 2 46\npoly mor phism, ad hoc 2 11\npoly mor phism, subtype 2 11\nPopCountfunc tion4 5\nPo rtableN et wor kGraphics (PNG)\n62\nPOS\nIX ﬁle name7 2\nPOSIX stand ard x i, 55, 72, 197\nprecedence,o perator 5 2, 63\nprecision\nﬂoating-p oint5 6, 57, 63, 78\nnumeric5 5, 78\nof con stants7 8\npredeclare dnames, table of2 8\nprematurea bstrac tion2 16, 316, 317\nprematureo pt imizat ion3 24\nPrintf %% 10\nPrintfverbs, table of1 0\nPrintf %b 10, 54, 75\nPrintf %c 10, 56\nPrintf %d 10, 55\nPrintf %e 10, 57\nPrintf %f 10, 57\nPrintf %g 10, 57\nPrintf %[n] 56\nPrintf %o 10, 55\nPrintf %q 10, 56, 97\nPrintf %s 10\nPrintf %*s 134\nPrintf %T 10, 80, 83, 184, 331\nPrintf %t 10, 83\nPrintf %#v 106, 207\nPrintf %v 10, 11\nPrintf % x71\nPrintf %#x 56\nPrintf %x 10, 55, 83\nproduc tionc ode3 01\nproﬁle\nblocking 3 24\nCPU 324\nhe ap3 24\nproﬁling3 24\nprog rammingl angu age\nAlef xiii\nAPLx iii\nC++ xiv, xv, 361\nCxii,x v, 1, 6, 52, 260, 361\nHaskel l xiv\nJava xv\nJavaS crip t xv,1 07\nLisp 3 38\nMo dula-2 xiii\nOb ero n xiii\nPascal xiii\nPython x v, 193\nRu byx v, 193\nScheme x iii\nSque ak,Ne wsque ak xiii\nprom otion,m et hod 1 61\nprot ocolb uf fers1 07\nPython prog rammingl angu agex v,\n193\nqu aliﬁed identiﬁer 41, 43\nquer yingp ackages 298\nquot ech arac ter,' 56\nrace\ncondit ion 21, 257, 258, 259",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 394,
      "page_label": "376"
    }
  },
  {
    "page_content": "Python prog rammingl angu agex v,\n193\nqu aliﬁed identiﬁer 41, 43\nquer yingp ackages 298\nquot ech arac ter,' 56\nrace\ncondit ion 21, 257, 258, 259\ndetec tor 2 71, 274\nparadoxic al 267\nrandomize dtest ing 3 07\nrangelo op6 ,9\nrangeov erc hannel 2 29\nrangeov erm ap 94\nrangeov ers tr ing 6 9, 88\n{{range}}temp latea ction1 13\nraw str ing lit eral 66\nre ach abi lit y36\nre ad, stale 268\nre adersl ock2 66\nre ad/w rit emu tex 266, 267\nReadWriteCloserinterface 174\nReadWriterinterface 174\nrealbuilt-in function6 1\nre ceive\n<-ch,c hannel 1 8, 225, 232\nexpression2 25\nnon-blo cking channel 2 46\nokvalue fro mch annel 2 29\nre ceive-onlyc hannel typ e<-chan T\n230\nre ceiver\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 394,
      "page_label": "376"
    }
  },
  {
    "page_content": "ptg16105617\nINDEX 377\nname,m et hod 1 57\nni l 159, 185\nparameter,m et hod 1 56\npointer1 58, 167\ntype,m et hod 1 57\nrecoverbuilt-in function1 52\nre cursion1 21, 124, 247, 333, 339,\n345, 359\nre cursive\nanonymou sfunc tion1 37\ndata str ucture1 01, 102, 107\ntype 4 8\nre deﬁning new 35\nreference\ncall by8 3\nidentity 8 7\ntype 9 ,1 2, 93, 120\nreflectpackage3 30\nreﬂec tion 3 29, 352, 359\nreflect.StructTagtype 3 48\nreflect.Typetype 3 30\nreflect.Type.Fieldmethod 3 48\nreflect.TypeOffunc tion3 30\nreflect.Valuetype 3 31, 342\nreflect.Valuezerov alue 332\nreflect.Value.Addrmethod 3 42\nreflect.Value.CanAddr method\n342\nreflect.Value.Interface method\n331, 342\nreflect.Value.Kindmethod 3 32\nreflect.ValueOffunc tion3 31, 337\nreflect.Zerofunc tion3 45\nregexppackage1 49\nregexp.Compilefunc tion1 49\nregexp.MustCompilefunc tion1 49\nregu lar expression6 6, 149, 305, 321\nre lat ion,‘‘happ ens before’’226, 257,\n261, 277\nre lat ions hip, ‘‘hasa ’’162\nre lat ions hip, ‘‘is a’’162, 175\nremainder operator % 52, 166\nrenamingi mp ort 2 86\nrendezvous 2 34\nrepl acementc harac ter(,U nico de\n70, 98\nrepository, gopl.io xv i\nre quest\nHT TP GET2 1, 127, 272, 348\nHT TP POST3 48\nmu ltiplexer,H TTP1 93\nresu ltl ist, function1 19\nresu lt, named 1 20, 126\nreturn,b are1 26\nreturnst atement 2 9, 120, 125\nrevexample8 6\nreverbexample2 23, 224\nrights hif top erator >> 54\nRu byp rogrammingl angu agex v,\n193\nruneliteral 56\nrunetype 5 2, 67\nrune slice tos tr ing conversion7 1\nrune tos tr ing conversion7 1\nruntimepackage1 51",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 395,
      "page_label": "377"
    }
  },
  {
    "page_content": "193\nruneliteral 56\nrunetype 5 2, 67\nrune slice tos tr ing conversion7 1\nrune tos tr ing conversion7 1\nruntimepackage1 51\nrunt ime API 3 24\nrunt ime sch edu ler 281\nruntime.Stackfunc tion1 51\nsatisfac tion, interface 171, 175\nScal able Vec tor Graphics (SVG) 58\nsche duler,r untime 2 81\nScheme \nprogrammingl angu agex iii\nscop e\nde clarat ion4 5, 137\nfor 47\nif-else 47\nlabel4 6\nlo cal variable1 35\nlo opv ar iable 141, 236\npit fal l 140\nshort var iable decl arat ion2 2, 48\nswitch 47\nsearch algor it hm, bre adt h-ﬁrs t 139,\n239\nsearch algor it hm, depth-ﬁrs t 136\nSearchIssuesfunc tion1 11\nselect case245\nselect, defaultcase in2 46\nselect,n on-blo cking 2 46\nselectst atement 2 44, 245\nselect{}st atement 2 45\nsele ctive recov ery 1 52\nsele ctor, ﬁeld1 56\nsele ctor, met hod 1 56\nsemaph ore ,binary 2 62\nsemaph ore ,counting 2 41\nsemicolon3 ,6\nsend ch<-,c hannel 1 8, 225, 232\nsend statement 2 25\nsend-onlyc hannel typ echan<- T\n230\nseparatec ompi lat ion2 84\nsequence diag ram,thumbnail 238\nsequential consistenc y 268, 269\nserial conﬁnement 2 62\nserverexample1 9, 21\nserver\nch at2 53\nconc urrentc lo ck2 19\nconc urrente ch o 222\nset, map as 96, 202\nsett erm et hod 1 69\nsexprexample3 40\nS-expression\nde code example3 47\nde coding3 44\nenco ding3 38\nsexpr.Marshalfunc tion3 40\nsexpr.readListfunc tion3 47\nsexpr.Unmarshalfunc tion3 47\nSHA256 message digest8 3\nsha256example8 3\nsh adowing declarat ion4 6, 49, 206,\n212\nsh are d\nlo ck2 66\nvar iables 257\nvar iables, conc urrency wit h 257",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 395,
      "page_label": "377"
    }
  },
  {
    "page_content": "sha256example8 3\nsh adowing declarat ion4 6, 49, 206,\n212\nsh are d\nlo ck2 66\nvar iables 257\nvar iables, conc urrency wit h 257\nsh are d-memor ymu ltithre ading2 17,\n257\nshif top erator <<,l ef t 54\nshif top erator >>,r ig ht5 4\nshort\nvar iable decl arat ion5 , 7, 30, 31\nvar iable decl arat ions cope 2 2, 48\nvar iable decl arat ions tatement 7\nshort-circuit\nAND operator && 63\nevaluation 6 3\nOR operator || 63\nsig nature, function1 20\nsig \nned int eger5 2, 54\ns[i:j],s lice operator 8 4, 86\ns[i:j],s ubst ringo perator 6 5, 86\nsimples tatement 6 ,2 2\nSizeoftable3 54\nsleepexample1 79\nslice 4\nargument8 6\ncapacity 8 8, 89\ncapacity growt h di agram 90\ncomp arison8 7\nextending a  86\nke y,m ap wit h 97\nliteral 38, 86\nmake 88, 322\nni l 87\nof monthsd iagram 84\nop erator s[i:j] 84, 86\nro tat iona lgor it hm8 6\nte chniques, in-place 91\ntype 8 4\nus ed as stack 1 23\nzerol engt h 87\nzerov alue 74, 87\nSMTP client3 12\nso cket\nTCP2 19\nUDP2 19\nUnix domain 219\nsort algor it hm, top olog ical 136\nsortpackage9 5, 186, 189\nsort.Float64sfunc tion1 91\nsort.Interfaceinterface 186\nsort.Intsfunc tion1 91\nsort.IntsAreSortedfunc tion1 91\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 395,
      "page_label": "377"
    }
  },
  {
    "page_content": "ptg16105617\n378 INDEX\nsort.IntSlicetype 1 91\nsort.Reversefunc tion1 89\nsort.Stringsfunc tion9 5, 137, 191\nspinnerexample2 18\nSprintfunc tion3 30\nSQLA PI 2 11\nSQLi nj e ction att ack 2 11\nsqlQuotefunc tion2 11, 212\nsquaresexample1 35\nSque ak,Ne wsque akprog ramming\nlanguage x iii\nst ack\nal location 3 6\nﬁxe d-size 124\ngrowth 1 24, 280, 358\nimplementation wit hslice 92, 215\nov erﬂow 1 24\nslice useda s1 23\ntrace 149, 253\nvar iable 36\nvar iable-size 124\nst ale read2 68\nst and ard\nIEEE 754 56, 57\nPOSIX xi,5 5, 72, 197\nUnico de 2, 27, 52, 66, 67, 69, 97\nst atement\n--,d ecrement 5 ,3 7\n++,i ncrement 5 ,3 7, 94\nassig nment5 , 7, 36, 52, 94, 173\nbreak 24, 46\ncontinue 24, 46\ncoverage3 18, 320\ndefer 144, 150, 264\nfallthrough 23, 212\nfor 6\ngo 18, 218\ngoto 24\nif-else 9, 22, 47\nlabel4 6\nlabele d 46\nreturn 29, 120, 125\nselect{} 245\nselect 244, 245\nsend 2 25\nshort var iable decl arat ion7\nsimple6 ,2 2\nswitch 23, 47\ntagless switch 24\ntype switch 210, 212, 214, 329\nunreach able1 20\nstorageexamplep ackage3 12, 313\nSt range lov e,D r. 3 36\nst rateg ies, er ror-handling1 28, 152,\n310, 316\nstrconvpackage2 2, 71, 75\nstrconv.Atoifunc tion2 2, 75\nstrconv.FormatIntfunc tion7 5\nstrconv.Itoafunc tion7 5\nstrconv.ParseIntfunc tion7 5\nstrconv.ParseUintfunc tion7 5\nst ream, io.Discard 22\nStringmethod 4 0, 166, 329\nst ring\nconc atenation operator + 5, 65\nconv ersion7 1\nimmut abi lit y65, 73\nindex operat ion6 4\nliteral 65\nliteral,r aw 66\nrangeov er6 9, 88\nsh aring diagram 65\ntest 7 1",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 396,
      "page_label": "378"
    }
  },
  {
    "page_content": "conv ersion7 1\nimmut abi lit y65, 73\nindex operat ion6 4\nliteral 65\nliteral,r aw 66\nrangeov er6 9, 88\nsh aring diagram 65\ntest 7 1\nto bytes lice conv ersion4 0, 73\nto runes lice conv ersion7 1, 88\nzerov alue 5, 7, 30\ncomp arison6 5\nstringspackage7 ,7 1, 72, 289\nstrings.Containsfunc tion6 9\nstrings.HasPrefixfunc tion6 9\nstrings.HasSuffixfunc tion6 9\nstrings.Indexfunc tion2 89\nstrings.Joinfunc tion7 ,1 2\nstrings.Mapfunc tion1 33\nstrings.NewReaderfunc tion2 89\nstrings.NewReplacer func tion2 89\nstrings.Readertype 2 89\nstrings.Replacertype 2 89\nstrings.Splitfunc tion1 2\nstrings.ToLowerfunc tion7 2\nstrings.ToUpperfunc tion7 2\nstructde clarat ion9 9\nst ruc t\ncomp arison1 04\nembedding1 04, 161\nEmployee 100\nempt y 102\nﬁeld1 5, 99\nﬁeld, anony mou s 104, 105, 106,\n162\nﬁeld, emb edde d 161\nﬁeld, exp ort of1 01, 106, 109, 110,\n168\nﬁeldo rder 101, 355\nﬁeldt ag 109, 348\nhole 354\nhole diag ram 355\nliteral 15, 102, 106\nliteral,a ddresso f1 03\npointert o1 00, 103\ntype 1 5, 24, 99\nstruct{}type 2 27, 241, 250\nst ruc ttype,u nnamed 1 63\nst ruc t zerov alue 102\nsu bst itutabi lit y193\nsu bst ringo perator s[i:j] 65, 86\nsu btype poly mor phism 211\nsumexample1 42\nsurfaceexample5 9, 203\nsurface ﬁgure, 3-D 58, 203\nSVG5 8\nSWIG3 61\nSw iss armyk nife2 90\nswitch, defaultcase in2 3\nswitch,i nitializat ions tatement in\n24\nswitchscop e 47\nswitchst atement 2 3, 47\nswitchst atement,t ag less2 4\nswitchst atement,t yp e 210, 212,\n214, 329\nsw itch,c ontext 280\nsyncpackage2 37, 263\nsy nchro nou sch annel 2 26",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 396,
      "page_label": "378"
    }
  },
  {
    "page_content": "switchst atement,t ag less2 4\nswitchst atement,t yp e 210, 212,\n214, 329\nsw itch,c ontext 280\nsyncpackage2 37, 263\nsy nchro nou sch annel 2 26\nsync.Mutextype 2 63, 269\n(*sync.Mutex).Lockmethod 2 1,\n146, 263\n(*sync.Mutex).Unlock method 2 1,\n146, 263\nsync.Oncetype 2 70\n(*sync.Once).Domethod 2 70\nsync.RWMutextype 2 66, 270\n(*sync.RWMutex).RLock method\n266\n(*sync.RWMutex).RUnlock method\n266\nsync.WaitGrouptype 2 37, 250, 274\n(*sync.WaitGroup).Add method\n238\n(*sync.WaitGroup).Done method\n238\nsyscallpackage1 96, 208\nsyscall.Errnotype 1 96, 197\nsystemc al l API1 96\ntableo f\nbinary operator s 52\nbit w ise operator s 53\ncomp arisono perator s 53\nes cap esequences 66\nke yword s 27\npredeclare dnames2 8\nPrintfverbs 10\nUTF-8 enco dings 67\ntable, Sizeof 354\ntable-dr ivent esting 2 00, 306, 319\ntag, str uct ﬁeld1 09, 348\ntagles\ns switchst atement 2 4\ntags, bui ld 296\nTCPs ocket2 19\nte chniques, in-place slice 91\ntempconvexample3 9, 180, 289\ntempconvexamplep ackage4 2\ntemp eraturec onversione xample2 9\ntempflagexample1 81\ntemplateAPI1 15\ntemp late\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 396,
      "page_label": "378"
    }
  },
  {
    "page_content": "ptg16105617\nINDEX 379\n|in 113\nac tion,{{range}} 113\ndot .in 113\ntemplate.Funcsmethod 1 14\ntemplate.HTMLtype 1 16\ntemplate.Mustfunc tion1 14\ntemplate.Newfunc tion1 14\ntemplate.Parsemethod 1 14\nTestfunc tion3 02\ntest\nbl ack-b ox3 10\nbr ittle3 17\nch arac ter 71\ncoverage3 18\ndep endency,c yc lic 314\necho 309\nfai lurem essage 3 06\nintegrat ion3 14\nof wordexample3 03\npackage, exter nal 285, 314\nst ring7 1\nwhit e-b ox3 11\nassertion3 06\n_test.goﬁle 285, 302, 303\ntestingpackage2 85, 302\ntest ing\nac ommand 3 08\nrandomize d 307\ntable-dr iven2 00, 306, 319\ntesting.Btype 3 21\ntesting.Ttype 3 02\n(*testing.T).Errorf method 2 00,\n304, 306\n(*testing.T).Fatalmethod 3 06\ntests, writing effec tive 3 16, 317\ntext/scannerpackage3 44\ntext/tabwriterpackage1 88\ntext/templatepackage1 13, 300\nThomps on, Ken xi,6 7\nthre ad2 18, 280\nthre ad-lo cal storage2 82\n3-D sur face ﬁgure5 8, 203\nthumbnailexample2 36, 237, 238\nthumbnailexamplep ackage2 35\nthumbnailsequence diag ram 238\ntimepackage1 8, 77, 183\ntime.Afterfunc tion2 45\ntime.AfterFuncfunc tion1 64\ntime.Durationtype 7 6, 179\ntime.Minutecons tant7 6\ntime.Nowfunc tion2 20\ntime.Parsefunc tion2 20\ntime.Secondcons tant1 64\ntime.Sincefunc tion1 14\ntime.Tickfunc tion2 44, 246\ntime.Timetype 1 14\ntime.Time.Formatmethod 2 20\ntitleexample1 53\ntitlefunc tion1 44, 145\ntoken-b ased decoder API2 13, 215,\n347\ntoken-b ased XML deco ding2 13\nto ol\ncgo 361, 362\ngo 2, 42, 44, 290\ngo doc 25\ngodoc xv i,2 5, 297, 326\ngofmt 3, 4, 44, 286\ngoimports 3, 44, 286\ngolint 292",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 397,
      "page_label": "379"
    }
  },
  {
    "page_content": "to ol\ncgo 361, 362\ngo 2, 42, 44, 290\ngo doc 25\ngodoc xv i,2 5, 297, 326\ngofmt 3, 4, 44, 286\ngoimports 3, 44, 286\ngolint 292\ntopolog ical sor talgor it hm1 36\ntopoSortexample1 36\ntraceexample1 46\ntrace,s tack 1 49, 253\ntree,b inar y 102\ntreesortexample1 02\ntrueboole an cons tant6 3\ntr unc ation,ﬂ oating-p oint4 0, 55\ntuplea ssig nment3 1, 37\ntypede clarat ion3 9\ntypeke yword 2 12\ntype\nabstrac t 24, 171\nag gregate8 1, 99\nar ray 81\nassertion2 05, 211\nassertion, interface 208, 210\nassertion, okvalue fro m 206\nbool 63\nbufio.Scanner 9\nbyte 52\nbytes.Buffer 74, 169, 172, 185\nCelsius 39\nchan 225\nch annel 1 8\n<-chan T,r eceive-onlyc hannel\n230\nchan<- T,s end-onlyc hannel 2 30\ncomplex 61\ncomp osite x v, 14, 81\ncomp osition x v, 107, 162, 189\nconcrete 2 4, 171, 211, 214\ndisplaying met hodso f a  351\nempt yinterface 176\nerrorbuilt-in 11, 128, 149, 196\nFahrenheit 39\nfunc tion1 19, 120\nhttp.HandlerFunc 194, 203\nhttp.Request 21, 253\nhttp.ResponseWriter 19, 22,\n191, 193\nint 52\ninterface{} 143, 176, 331\ninterface 171, 174\ninterface dynamic 181\njson.Decoder 111\njson.Encoder 111\nmap9 ,9 3\nmethod receiver1 57\nmismatch 5 5\nname d 24, 39, 40, 105, 157\nnet.Conn 220\nnet.Listener 220\nnumeric5 1\n*os.File 11, 13, 172, 175, 185,\n336\nos.FileInfo 247\nos.LinkError 207\nos.PathError 207\nre cursive 4 8\nreference9 ,1 2, 93, 120\nreflect.StructTag 348\nreflect.Type 330\nreflect.Value 331, 342\nrune 52, 67\nslice 84\nsort.IntSlice 191\nstrings.Reader 289\nstrings.Replacer 289\nstruct{} 227, 241, 250\nst ruc t 15, 24, 99",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 397,
      "page_label": "379"
    }
  },
  {
    "page_content": "reflect.Value 331, 342\nrune 52, 67\nslice 84\nsort.IntSlice 191\nstrings.Reader 289\nstrings.Replacer 289\nstruct{} 227, 241, 250\nst ruc t 15, 24, 99\nswitch, casein 212\nswitch, defaultcase in2 12\nswitchst atement 2 10, 212, 214,\n329\nsync.Mutex 263, 269\nsync.Once 270\nsync.RWMutex 266, 270\nsync.WaitGroup 237, 250, 274\nsyscall.Errno 196, 197\ntemplate.HTML 116\ntesting.B 321\ntesting.T 302\ntime.Duration 76, 179\ntime.Time 114\nuint 52\nuintptr 52, 354, 357\nunderly ing 3 9\nunidirec tion alc hannel 2 30, 231\nunnamed str uct 1 63\nunsafe.Pointer 356\nurl.URL 193\ntypes, untypedc on stant 7 8\nUDPs ocket2 19\nuinttype 5 2\nuintptrtype 5 2, 354, 357\nunar yop erator + 53\nunar yop erator - 53\nunbuffered channel 2 26\nundeﬁne dbehavior 2 60\nunderly ing array 84, 88, 91, 187\nunderly ing typ e 39\nUnico de\nco depoint6 7\nes cap e 68, 107\nrepl acementc harac ter( 70, 98\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 397,
      "page_label": "379"
    }
  },
  {
    "page_content": "ptg16105617\n380 INDEX\nst and ard 2 ,2 7, 52, 66, 67, 69, 97\nunicodepackage7 1\nunicode.IsDigitfunc tion7 1\nunicode.IsLetterfunc tion7 1\nunicode.IsLowerfunc tion7 1\nunicode.IsSpacefunc tion9 3\nunicode.IsUpperfunc tion7 1\nunicode/utf8package6 9\nunidirec tion alc hannel typ e 230, 231\nunion, discriminated 2 11, 213, 214\nunivers eblock4 6\nUnix domain socket2 19\nunmarsh alingJ SON1 10\nunnamed str uct typ e 163\nunnamed var iable 34, 88\nunreach ables tatement 1 20\nunsafepackage3 54\nunsafe.AlignOffunc tion3 55\nunsafe.Offsetoffunc tion3 55\nunsafe.Pointerconv ersion3 56\nunsafe.Pointertype 3 56\nunsafe.Pointerzerov alue 356\nunsafe.Sizeoffunc tion3 54\nunsig ned int eger5 2, 54\nuntypedc on stant typ es 78\nunus edp arameter 120\nURL 123\nURL escape 1 11\nurl.QueryEscapefunc tion1 11\nurl.URLtype 1 93\nurlvaluesexample1 60\nUTF-8 66, 67, 98\nUTF-8 enco dings, table of6 7\nutf8.DecodeRuneInString func tion\n69\nutf8.RuneCountInString func tion\n69\nutf8.UTFMaxvalue 98\nvalue\naddressable3 2\ncall by8 3, 120, 158\nfunc tion1 32\ninterface 181\nmethod 1 64\nutf8.UTFMax 98\nvarde clarat ion5 ,3 0\nvar iable\nconﬁnement 2 61\nhe ap3 6\nhttp.DefaultClient 253\nio.Discard 18\nio.EOF 132\nlifet ime3 5, 46, 135\nlo cal 29, 141\nos.Args 4\nst ack 3 6\nunnamed 3 4, 88\nvar iables, escaping 3 6\nvar iables, share d 257\nvar iable-size stack 1 24\nvar iadic function1 42, 172\nve ctor, bit 1 65\nvendor ing 2 93\nvisibi lit y28, 29, 41, 168, 297\nvisitfunc tion1 22\nwaitexample1 30\nWaitForServerfunc tion1 30\nwalkDirfunc tion2 47\nwe b\ncraw ler 119",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 398,
      "page_label": "380"
    }
  },
  {
    "page_content": "vendor ing 2 93\nvisibi lit y28, 29, 41, 168, 297\nvisitfunc tion1 22\nwaitexample1 30\nWaitForServerfunc tion1 30\nwalkDirfunc tion2 47\nwe b\ncraw ler 119\ncraw ler,c on cur rent2 39\nframewor k 193\nwhilel oop6\nwhit e-b oxt est3 11\nWi l kes, Maur ice 301\nWirth, Nik lausx iii\nwordexample3 03, 305, 308\nwordexample, test of3 03\nworksp ace organizat ion2 91\nwr iterl ock2 66\nwr iting effec tive tests 316, 317\nxkcd JSONi nt erface 113\nXML deco ding2 13\nXML (ExtensibleM arku pLanguage)\n107\n(*xml.Decoder).Token method\n213\nxmlselectexample2 15\nzerol engt hslice 87\nzerov alue\nar ray 82\nboole an 30\nch annel 2 25, 246\nfunc tion1 32\ninterface 182\nmap9 5\nname dresu lt1 20, 127\nnumb er5 ,3 0\npointer3 2\nreflect.Value 332\nslice 74, 87\nst ring5 , 7, 30\nst ruc t 102\nunsafe.Pointer 356\nThe Go Programming Language\n© 2016 Alan A. A. Donovan & Brian W. Kernighan\nrevision 3b600c, date 29 Sep 2015\nFrom the Library of YIGUANG HU",
    "metadata": {
      "producer": "www.it-ebooks.info",
      "creator": "www.it-ebooks.info",
      "creationdate": "2015-09-29T15:37:21-06:00",
      "author": "Alan A. A. Donovan, Brian W. Kernighan",
      "keywords": "www.it-ebooks.info",
      "moddate": "2019-05-26T11:43:22+08:00",
      "pdfversion": "1.6",
      "subject": "",
      "title": "The Go Programming Language",
      "source": "_backend/data/pdfs\\Go.pdf",
      "total_pages": 399,
      "page": 398,
      "page_label": "380"
    }
  }
]